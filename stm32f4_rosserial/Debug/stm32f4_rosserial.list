
stm32f4_rosserial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e0c  08005e0c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e14  08005e14  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000133c  20000084  08005ea4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c0  08005ea4  000213c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b04  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000297f  00000000  00000000  00032bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  00035538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  000364b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000239d1  00000000  00000000  00037338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb85  00000000  00000000  0005ad09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4cae  00000000  00000000  0006688e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b53c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  0013b5b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000084 	.word	0x20000084
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005b18 	.word	0x08005b18

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000088 	.word	0x20000088
 8000200:	08005b18 	.word	0x08005b18

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <HAL_Init+0x40>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_Init+0x40>)
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x40>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f92b 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f004 ff2e 	bl	80053a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f943 	bl	8000802 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f90b 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000018 	.word	0x20000018
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20001238 	.word	0x20001238

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20001238 	.word	0x20001238

080005f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <__NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db0b      	blt.n	8000686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 021f 	and.w	r2, r3, #31
 8000674:	4907      	ldr	r1, [pc, #28]	; (8000694 <__NVIC_EnableIRQ+0x38>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff8e 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff29 	bl	80005f8 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff3e 	bl	8000640 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff8e 	bl	80006ec <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5d 	bl	8000698 <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff31 	bl	800065c <__NVIC_EnableIRQ>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffa2 	bl	8000754 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000828:	f7ff feda 	bl	80005e0 <HAL_GetTick>
 800082c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d101      	bne.n	8000838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	e099      	b.n	800096c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2202      	movs	r2, #2
 8000844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f022 0201 	bic.w	r2, r2, #1
 8000856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000858:	e00f      	b.n	800087a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800085a:	f7ff fec1 	bl	80005e0 <HAL_GetTick>
 800085e:	4602      	mov	r2, r0
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	2b05      	cmp	r3, #5
 8000866:	d908      	bls.n	800087a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2220      	movs	r2, #32
 800086c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2203      	movs	r2, #3
 8000872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000876:	2303      	movs	r3, #3
 8000878:	e078      	b.n	800096c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1e8      	bne.n	800085a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	4b38      	ldr	r3, [pc, #224]	; (8000974 <HAL_DMA_Init+0x158>)
 8000894:	4013      	ands	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d107      	bne.n	80008e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	4313      	orrs	r3, r2
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f023 0307 	bic.w	r3, r3, #7
 80008fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	4313      	orrs	r3, r2
 8000904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090a:	2b04      	cmp	r3, #4
 800090c:	d117      	bne.n	800093e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	4313      	orrs	r3, r2
 8000916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00e      	beq.n	800093e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 fa99 	bl	8000e58 <DMA_CheckFifoParam>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d008      	beq.n	800093e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2240      	movs	r2, #64	; 0x40
 8000930:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800093a:	2301      	movs	r3, #1
 800093c:	e016      	b.n	800096c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 fa50 	bl	8000dec <DMA_CalcBaseAndBitshift>
 800094c:	4603      	mov	r3, r0
 800094e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000954:	223f      	movs	r2, #63	; 0x3f
 8000956:	409a      	lsls	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	f010803f 	.word	0xf010803f

08000978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000996:	2b01      	cmp	r3, #1
 8000998:	d101      	bne.n	800099e <HAL_DMA_Start_IT+0x26>
 800099a:	2302      	movs	r3, #2
 800099c:	e048      	b.n	8000a30 <HAL_DMA_Start_IT+0xb8>
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d137      	bne.n	8000a22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2202      	movs	r2, #2
 80009b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2200      	movs	r2, #0
 80009be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f000 f9e2 	bl	8000d90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009d0:	223f      	movs	r2, #63	; 0x3f
 80009d2:	409a      	lsls	r2, r3
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0216 	orr.w	r2, r2, #22
 80009e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009f6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d007      	beq.n	8000a10 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0208 	orr.w	r2, r2, #8
 8000a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0201 	orr.w	r2, r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	e005      	b.n	8000a2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d004      	beq.n	8000a56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00c      	b.n	8000a70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2205      	movs	r2, #5
 8000a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 0201 	bic.w	r2, r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a88:	4b92      	ldr	r3, [pc, #584]	; (8000cd4 <HAL_DMA_IRQHandler+0x258>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a92      	ldr	r2, [pc, #584]	; (8000cd8 <HAL_DMA_IRQHandler+0x25c>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0a9b      	lsrs	r3, r3, #10
 8000a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d01a      	beq.n	8000ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d013      	beq.n	8000ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f022 0204 	bic.w	r2, r2, #4
 8000ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae0:	f043 0201 	orr.w	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aec:	2201      	movs	r2, #1
 8000aee:	409a      	lsls	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d012      	beq.n	8000b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00b      	beq.n	8000b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b16:	f043 0202 	orr.w	r2, r3, #2
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b22:	2204      	movs	r2, #4
 8000b24:	409a      	lsls	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d012      	beq.n	8000b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b40:	2204      	movs	r2, #4
 8000b42:	409a      	lsls	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b4c:	f043 0204 	orr.w	r2, r3, #4
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b58:	2210      	movs	r2, #16
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d043      	beq.n	8000bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d03c      	beq.n	8000bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b76:	2210      	movs	r2, #16
 8000b78:	409a      	lsls	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d018      	beq.n	8000bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d108      	bne.n	8000bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d024      	beq.n	8000bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	4798      	blx	r3
 8000baa:	e01f      	b.n	8000bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d01b      	beq.n	8000bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	4798      	blx	r3
 8000bbc:	e016      	b.n	8000bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d107      	bne.n	8000bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0208 	bic.w	r2, r2, #8
 8000bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 808e 	beq.w	8000d1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 8086 	beq.w	8000d1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c12:	2220      	movs	r2, #32
 8000c14:	409a      	lsls	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d136      	bne.n	8000c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0216 	bic.w	r2, r2, #22
 8000c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d103      	bne.n	8000c56 <HAL_DMA_IRQHandler+0x1da>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d007      	beq.n	8000c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0208 	bic.w	r2, r2, #8
 8000c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c6a:	223f      	movs	r2, #63	; 0x3f
 8000c6c:	409a      	lsls	r2, r3
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d07d      	beq.n	8000d86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	4798      	blx	r3
        }
        return;
 8000c92:	e078      	b.n	8000d86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d01c      	beq.n	8000cdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d108      	bne.n	8000cc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d030      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	4798      	blx	r3
 8000cc0:	e02b      	b.n	8000d1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d027      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	4798      	blx	r3
 8000cd2:	e022      	b.n	8000d1a <HAL_DMA_IRQHandler+0x29e>
 8000cd4:	20000018 	.word	0x20000018
 8000cd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10f      	bne.n	8000d0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0210 	bic.w	r2, r2, #16
 8000cf8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d032      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d022      	beq.n	8000d74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2205      	movs	r2, #5
 8000d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0201 	bic.w	r2, r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d307      	bcc.n	8000d62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1f2      	bne.n	8000d46 <HAL_DMA_IRQHandler+0x2ca>
 8000d60:	e000      	b.n	8000d64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	4798      	blx	r3
 8000d84:	e000      	b.n	8000d88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d86:	bf00      	nop
    }
  }
}
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop

08000d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b40      	cmp	r3, #64	; 0x40
 8000dbc:	d108      	bne.n	8000dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000dce:	e007      	b.n	8000de0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	60da      	str	r2, [r3, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3b10      	subs	r3, #16
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <DMA_CalcBaseAndBitshift+0x64>)
 8000dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <DMA_CalcBaseAndBitshift+0x68>)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d909      	bls.n	8000e2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e22:	f023 0303 	bic.w	r3, r3, #3
 8000e26:	1d1a      	adds	r2, r3, #4
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	659a      	str	r2, [r3, #88]	; 0x58
 8000e2c:	e007      	b.n	8000e3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e36:	f023 0303 	bic.w	r3, r3, #3
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	aaaaaaab 	.word	0xaaaaaaab
 8000e54:	08005cd0 	.word	0x08005cd0

08000e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d11f      	bne.n	8000eb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d855      	bhi.n	8000f24 <DMA_CheckFifoParam+0xcc>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <DMA_CheckFifoParam+0x28>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000ea3 	.word	0x08000ea3
 8000e88:	08000e91 	.word	0x08000e91
 8000e8c:	08000f25 	.word	0x08000f25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d045      	beq.n	8000f28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ea0:	e042      	b.n	8000f28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000eaa:	d13f      	bne.n	8000f2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eb0:	e03c      	b.n	8000f2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eba:	d121      	bne.n	8000f00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d836      	bhi.n	8000f30 <DMA_CheckFifoParam+0xd8>
 8000ec2:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <DMA_CheckFifoParam+0x70>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000ed9 	.word	0x08000ed9
 8000ecc:	08000edf 	.word	0x08000edf
 8000ed0:	08000ed9 	.word	0x08000ed9
 8000ed4:	08000ef1 	.word	0x08000ef1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
      break;
 8000edc:	e02f      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d024      	beq.n	8000f34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eee:	e021      	b.n	8000f34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ef8:	d11e      	bne.n	8000f38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000efe:	e01b      	b.n	8000f38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d902      	bls.n	8000f0c <DMA_CheckFifoParam+0xb4>
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d003      	beq.n	8000f12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f0a:	e018      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8000f10:	e015      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00e      	beq.n	8000f3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
      break;
 8000f22:	e00b      	b.n	8000f3c <DMA_CheckFifoParam+0xe4>
      break;
 8000f24:	bf00      	nop
 8000f26:	e00a      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
      break;
 8000f28:	bf00      	nop
 8000f2a:	e008      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
      break;
 8000f2c:	bf00      	nop
 8000f2e:	e006      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
      break;
 8000f30:	bf00      	nop
 8000f32:	e004      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
      break;
 8000f34:	bf00      	nop
 8000f36:	e002      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
      break;   
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <DMA_CheckFifoParam+0xe6>
      break;
 8000f3c:	bf00      	nop
    }
  } 
  
  return status; 
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e165      	b.n	8001234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8154 	bne.w	800122e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x4a>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d123      	bne.n	8000fde <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	69b9      	ldr	r1, [r7, #24]
 8000fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0203 	and.w	r2, r3, #3
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d00b      	beq.n	8001032 <HAL_GPIO_Init+0xe6>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001026:	2b11      	cmp	r3, #17
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b12      	cmp	r3, #18
 8001030:	d130      	bne.n	8001094 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80ae 	beq.w	800122e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b5c      	ldr	r3, [pc, #368]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a5b      	ldr	r2, [pc, #364]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b59      	ldr	r3, [pc, #356]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ee:	4a57      	ldr	r2, [pc, #348]	; (800124c <HAL_GPIO_Init+0x300>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4e      	ldr	r2, [pc, #312]	; (8001250 <HAL_GPIO_Init+0x304>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d025      	beq.n	8001166 <HAL_GPIO_Init+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <HAL_GPIO_Init+0x308>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d01f      	beq.n	8001162 <HAL_GPIO_Init+0x216>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4c      	ldr	r2, [pc, #304]	; (8001258 <HAL_GPIO_Init+0x30c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x212>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <HAL_GPIO_Init+0x310>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x20e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <HAL_GPIO_Init+0x314>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x20a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <HAL_GPIO_Init+0x318>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x206>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a48      	ldr	r2, [pc, #288]	; (8001268 <HAL_GPIO_Init+0x31c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x202>
 800114a:	2306      	movs	r3, #6
 800114c:	e00c      	b.n	8001168 <HAL_GPIO_Init+0x21c>
 800114e:	2307      	movs	r3, #7
 8001150:	e00a      	b.n	8001168 <HAL_GPIO_Init+0x21c>
 8001152:	2305      	movs	r3, #5
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x21c>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x21c>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x21c>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x21c>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x21c>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4934      	ldr	r1, [pc, #208]	; (800124c <HAL_GPIO_Init+0x300>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_GPIO_Init+0x320>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011aa:	4a30      	ldr	r2, [pc, #192]	; (800126c <HAL_GPIO_Init+0x320>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b0:	4b2e      	ldr	r3, [pc, #184]	; (800126c <HAL_GPIO_Init+0x320>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d4:	4a25      	ldr	r2, [pc, #148]	; (800126c <HAL_GPIO_Init+0x320>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_GPIO_Init+0x320>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fe:	4a1b      	ldr	r2, [pc, #108]	; (800126c <HAL_GPIO_Init+0x320>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_GPIO_Init+0x320>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001228:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_GPIO_Init+0x320>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f ae96 	bls.w	8000f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	3724      	adds	r7, #36	; 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40023800 	.word	0x40023800
 800124c:	40013800 	.word	0x40013800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40021400 	.word	0x40021400
 8001268:	40021800 	.word	0x40021800
 800126c:	40013c00 	.word	0x40013c00

08001270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0ca      	b.n	800141a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001284:	4b67      	ldr	r3, [pc, #412]	; (8001424 <HAL_RCC_ClockConfig+0x1b4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90c      	bls.n	80012ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <HAL_RCC_ClockConfig+0x1b4>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b62      	ldr	r3, [pc, #392]	; (8001424 <HAL_RCC_ClockConfig+0x1b4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b6      	b.n	800141a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c4:	4b58      	ldr	r3, [pc, #352]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a57      	ldr	r2, [pc, #348]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80012ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012dc:	4b52      	ldr	r3, [pc, #328]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a51      	ldr	r2, [pc, #324]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80012e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	494c      	ldr	r1, [pc, #304]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d044      	beq.n	8001390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d119      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e07d      	b.n	800141a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132a:	2b03      	cmp	r3, #3
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06d      	b.n	800141a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e065      	b.n	800141a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f023 0203 	bic.w	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4933      	ldr	r1, [pc, #204]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001360:	f7ff f93e 	bl	80005e0 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	e00a      	b.n	800137e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001368:	f7ff f93a 	bl	80005e0 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e04d      	b.n	800141a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 020c 	and.w	r2, r3, #12
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d1eb      	bne.n	8001368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_ClockConfig+0x1b4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d20c      	bcs.n	80013b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_RCC_ClockConfig+0x1b4>)
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_RCC_ClockConfig+0x1b4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e030      	b.n	800141a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4915      	ldr	r1, [pc, #84]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	490d      	ldr	r1, [pc, #52]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013f6:	f000 f851 	bl	800149c <HAL_RCC_GetSysClockFreq>
 80013fa:	4601      	mov	r1, r0
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	fa21 f303 	lsr.w	r3, r1, r3
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff f8a0 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023c00 	.word	0x40023c00
 8001428:	40023800 	.word	0x40023800
 800142c:	08005df4 	.word	0x08005df4
 8001430:	20000018 	.word	0x20000018

08001434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_RCC_GetHCLKFreq+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000018 	.word	0x20000018

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001450:	f7ff fff0 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001454:	4601      	mov	r1, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	0a9b      	lsrs	r3, r3, #10
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001462:	5cd3      	ldrb	r3, [r2, r3]
 8001464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	08005e04 	.word	0x08005e04

08001474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001478:	f7ff ffdc 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 800147c:	4601      	mov	r1, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0b5b      	lsrs	r3, r3, #13
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	08005e04 	.word	0x08005e04

0800149c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014b6:	4bc6      	ldr	r3, [pc, #792]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	f200 817e 	bhi.w	80017c0 <HAL_RCC_GetSysClockFreq+0x324>
 80014c4:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <HAL_RCC_GetSysClockFreq+0x30>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	08001501 	.word	0x08001501
 80014d0:	080017c1 	.word	0x080017c1
 80014d4:	080017c1 	.word	0x080017c1
 80014d8:	080017c1 	.word	0x080017c1
 80014dc:	08001507 	.word	0x08001507
 80014e0:	080017c1 	.word	0x080017c1
 80014e4:	080017c1 	.word	0x080017c1
 80014e8:	080017c1 	.word	0x080017c1
 80014ec:	0800150d 	.word	0x0800150d
 80014f0:	080017c1 	.word	0x080017c1
 80014f4:	080017c1 	.word	0x080017c1
 80014f8:	080017c1 	.word	0x080017c1
 80014fc:	08001669 	.word	0x08001669
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001500:	4bb4      	ldr	r3, [pc, #720]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x338>)
 8001502:	613b      	str	r3, [r7, #16]
       break;
 8001504:	e15f      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001506:	4bb3      	ldr	r3, [pc, #716]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x338>)
 8001508:	613b      	str	r3, [r7, #16]
      break;
 800150a:	e15c      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800150c:	4bb0      	ldr	r3, [pc, #704]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001514:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001516:	4bae      	ldr	r3, [pc, #696]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d04a      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001522:	4bab      	ldr	r3, [pc, #684]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	099b      	lsrs	r3, r3, #6
 8001528:	f04f 0400 	mov.w	r4, #0
 800152c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	ea03 0501 	and.w	r5, r3, r1
 8001538:	ea04 0602 	and.w	r6, r4, r2
 800153c:	4629      	mov	r1, r5
 800153e:	4632      	mov	r2, r6
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f04f 0400 	mov.w	r4, #0
 8001548:	0154      	lsls	r4, r2, #5
 800154a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800154e:	014b      	lsls	r3, r1, #5
 8001550:	4619      	mov	r1, r3
 8001552:	4622      	mov	r2, r4
 8001554:	1b49      	subs	r1, r1, r5
 8001556:	eb62 0206 	sbc.w	r2, r2, r6
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	f04f 0400 	mov.w	r4, #0
 8001562:	0194      	lsls	r4, r2, #6
 8001564:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001568:	018b      	lsls	r3, r1, #6
 800156a:	1a5b      	subs	r3, r3, r1
 800156c:	eb64 0402 	sbc.w	r4, r4, r2
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	00e2      	lsls	r2, r4, #3
 800157a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800157e:	00d9      	lsls	r1, r3, #3
 8001580:	460b      	mov	r3, r1
 8001582:	4614      	mov	r4, r2
 8001584:	195b      	adds	r3, r3, r5
 8001586:	eb44 0406 	adc.w	r4, r4, r6
 800158a:	f04f 0100 	mov.w	r1, #0
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	02a2      	lsls	r2, r4, #10
 8001594:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001598:	0299      	lsls	r1, r3, #10
 800159a:	460b      	mov	r3, r1
 800159c:	4614      	mov	r4, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f04f 0400 	mov.w	r4, #0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	f7fe fe32 	bl	8000214 <__aeabi_uldivmod>
 80015b0:	4603      	mov	r3, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e049      	b.n	800164c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b8:	4b85      	ldr	r3, [pc, #532]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	f04f 0400 	mov.w	r4, #0
 80015c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	ea03 0501 	and.w	r5, r3, r1
 80015ce:	ea04 0602 	and.w	r6, r4, r2
 80015d2:	4629      	mov	r1, r5
 80015d4:	4632      	mov	r2, r6
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	f04f 0400 	mov.w	r4, #0
 80015de:	0154      	lsls	r4, r2, #5
 80015e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015e4:	014b      	lsls	r3, r1, #5
 80015e6:	4619      	mov	r1, r3
 80015e8:	4622      	mov	r2, r4
 80015ea:	1b49      	subs	r1, r1, r5
 80015ec:	eb62 0206 	sbc.w	r2, r2, r6
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	f04f 0400 	mov.w	r4, #0
 80015f8:	0194      	lsls	r4, r2, #6
 80015fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015fe:	018b      	lsls	r3, r1, #6
 8001600:	1a5b      	subs	r3, r3, r1
 8001602:	eb64 0402 	sbc.w	r4, r4, r2
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	00e2      	lsls	r2, r4, #3
 8001610:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001614:	00d9      	lsls	r1, r3, #3
 8001616:	460b      	mov	r3, r1
 8001618:	4614      	mov	r4, r2
 800161a:	195b      	adds	r3, r3, r5
 800161c:	eb44 0406 	adc.w	r4, r4, r6
 8001620:	f04f 0100 	mov.w	r1, #0
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	02a2      	lsls	r2, r4, #10
 800162a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800162e:	0299      	lsls	r1, r3, #10
 8001630:	460b      	mov	r3, r1
 8001632:	4614      	mov	r4, r2
 8001634:	4618      	mov	r0, r3
 8001636:	4621      	mov	r1, r4
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f04f 0400 	mov.w	r4, #0
 800163e:	461a      	mov	r2, r3
 8001640:	4623      	mov	r3, r4
 8001642:	f7fe fde7 	bl	8000214 <__aeabi_uldivmod>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800164c:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	0c1b      	lsrs	r3, r3, #16
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	3301      	adds	r3, #1
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	613b      	str	r3, [r7, #16]
      break;
 8001666:	e0ae      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001670:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d04a      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167e:	4b54      	ldr	r3, [pc, #336]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	f04f 0400 	mov.w	r4, #0
 8001688:	f240 11ff 	movw	r1, #511	; 0x1ff
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	ea03 0501 	and.w	r5, r3, r1
 8001694:	ea04 0602 	and.w	r6, r4, r2
 8001698:	4629      	mov	r1, r5
 800169a:	4632      	mov	r2, r6
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	f04f 0400 	mov.w	r4, #0
 80016a4:	0154      	lsls	r4, r2, #5
 80016a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016aa:	014b      	lsls	r3, r1, #5
 80016ac:	4619      	mov	r1, r3
 80016ae:	4622      	mov	r2, r4
 80016b0:	1b49      	subs	r1, r1, r5
 80016b2:	eb62 0206 	sbc.w	r2, r2, r6
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	f04f 0400 	mov.w	r4, #0
 80016be:	0194      	lsls	r4, r2, #6
 80016c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016c4:	018b      	lsls	r3, r1, #6
 80016c6:	1a5b      	subs	r3, r3, r1
 80016c8:	eb64 0402 	sbc.w	r4, r4, r2
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	00e2      	lsls	r2, r4, #3
 80016d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016da:	00d9      	lsls	r1, r3, #3
 80016dc:	460b      	mov	r3, r1
 80016de:	4614      	mov	r4, r2
 80016e0:	195b      	adds	r3, r3, r5
 80016e2:	eb44 0406 	adc.w	r4, r4, r6
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	02a2      	lsls	r2, r4, #10
 80016f0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016f4:	0299      	lsls	r1, r3, #10
 80016f6:	460b      	mov	r3, r1
 80016f8:	4614      	mov	r4, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	4621      	mov	r1, r4
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f04f 0400 	mov.w	r4, #0
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	f7fe fd84 	bl	8000214 <__aeabi_uldivmod>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e049      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	f04f 0400 	mov.w	r4, #0
 800171e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	ea03 0501 	and.w	r5, r3, r1
 800172a:	ea04 0602 	and.w	r6, r4, r2
 800172e:	4629      	mov	r1, r5
 8001730:	4632      	mov	r2, r6
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	f04f 0400 	mov.w	r4, #0
 800173a:	0154      	lsls	r4, r2, #5
 800173c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001740:	014b      	lsls	r3, r1, #5
 8001742:	4619      	mov	r1, r3
 8001744:	4622      	mov	r2, r4
 8001746:	1b49      	subs	r1, r1, r5
 8001748:	eb62 0206 	sbc.w	r2, r2, r6
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	0194      	lsls	r4, r2, #6
 8001756:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800175a:	018b      	lsls	r3, r1, #6
 800175c:	1a5b      	subs	r3, r3, r1
 800175e:	eb64 0402 	sbc.w	r4, r4, r2
 8001762:	f04f 0100 	mov.w	r1, #0
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	00e2      	lsls	r2, r4, #3
 800176c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001770:	00d9      	lsls	r1, r3, #3
 8001772:	460b      	mov	r3, r1
 8001774:	4614      	mov	r4, r2
 8001776:	195b      	adds	r3, r3, r5
 8001778:	eb44 0406 	adc.w	r4, r4, r6
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	02a2      	lsls	r2, r4, #10
 8001786:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800178a:	0299      	lsls	r1, r3, #10
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	4618      	mov	r0, r3
 8001792:	4621      	mov	r1, r4
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f04f 0400 	mov.w	r4, #0
 800179a:	461a      	mov	r2, r3
 800179c:	4623      	mov	r3, r4
 800179e:	f7fe fd39 	bl	8000214 <__aeabi_uldivmod>
 80017a2:	4603      	mov	r3, r0
 80017a4:	460c      	mov	r4, r1
 80017a6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x334>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	0f1b      	lsrs	r3, r3, #28
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	613b      	str	r3, [r7, #16]
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x338>)
 80017c2:	613b      	str	r3, [r7, #16]
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	693b      	ldr	r3, [r7, #16]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	00f42400 	.word	0x00f42400

080017d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8083 	beq.w	80018f8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017f2:	4b95      	ldr	r3, [pc, #596]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d019      	beq.n	8001832 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fe:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001806:	2b08      	cmp	r3, #8
 8001808:	d106      	bne.n	8001818 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800180a:	4b8f      	ldr	r3, [pc, #572]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001816:	d00c      	beq.n	8001832 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001818:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001820:	2b0c      	cmp	r3, #12
 8001822:	d112      	bne.n	800184a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001824:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001830:	d10b      	bne.n	800184a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d05b      	beq.n	80018f6 <HAL_RCC_OscConfig+0x11e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d157      	bne.n	80018f6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e216      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x8a>
 8001854:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a7b      	ldr	r2, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800185a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e01d      	b.n	800189e <HAL_RCC_OscConfig+0xc6>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_OscConfig+0xae>
 800186c:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a75      	ldr	r2, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b73      	ldr	r3, [pc, #460]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a72      	ldr	r2, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e00b      	b.n	800189e <HAL_RCC_OscConfig+0xc6>
 8001886:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800188c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6c      	ldr	r2, [pc, #432]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d013      	beq.n	80018ce <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7fe fe9b 	bl	80005e0 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ae:	f7fe fe97 	bl	80005e0 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1db      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0xd6>
 80018cc:	e014      	b.n	80018f8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7fe fe87 	bl	80005e0 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d6:	f7fe fe83 	bl	80005e0 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b64      	cmp	r3, #100	; 0x64
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1c7      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e8:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0xfe>
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d06f      	beq.n	80019e4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	d017      	beq.n	8001940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001910:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001918:	2b08      	cmp	r3, #8
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001930:	2b0c      	cmp	r3, #12
 8001932:	d11c      	bne.n	800196e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d116      	bne.n	800196e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001940:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_OscConfig+0x180>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d001      	beq.n	8001958 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e18f      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4938      	ldr	r1, [pc, #224]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196c:	e03a      	b.n	80019e4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d020      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001976:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7fe fe30 	bl	80005e0 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001984:	f7fe fe2c 	bl	80005e0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e170      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4925      	ldr	r1, [pc, #148]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
 80019b6:	e015      	b.n	80019e4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7fe fe0f 	bl	80005e0 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c6:	f7fe fe0b 	bl	80005e0 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e14f      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d037      	beq.n	8001a60 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7fe fdef 	bl	80005e0 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a06:	f7fe fdeb 	bl	80005e0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e12f      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x22e>
 8001a24:	e01c      	b.n	8001a60 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7fe fdd8 	bl	80005e0 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a32:	e00f      	b.n	8001a54 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a34:	f7fe fdd4 	bl	80005e0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d908      	bls.n	8001a54 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e118      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	42470000 	.word	0x42470000
 8001a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b8a      	ldr	r3, [pc, #552]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1e9      	bne.n	8001a34 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8097 	beq.w	8001b9c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b83      	ldr	r3, [pc, #524]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b7f      	ldr	r3, [pc, #508]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a7e      	ldr	r2, [pc, #504]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b7c      	ldr	r3, [pc, #496]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9e:	4b79      	ldr	r3, [pc, #484]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d118      	bne.n	8001adc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aaa:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a75      	ldr	r2, [pc, #468]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab6:	f7fe fd93 	bl	80005e0 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7fe fd8f 	bl	80005e0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0d3      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	4b6c      	ldr	r3, [pc, #432]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x31a>
 8001ae4:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	4a65      	ldr	r2, [pc, #404]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	; 0x70
 8001af0:	e01c      	b.n	8001b2c <HAL_RCC_OscConfig+0x354>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x33c>
 8001afa:	4b61      	ldr	r3, [pc, #388]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afe:	4a60      	ldr	r2, [pc, #384]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	6713      	str	r3, [r2, #112]	; 0x70
 8001b06:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	4a5d      	ldr	r2, [pc, #372]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6713      	str	r3, [r2, #112]	; 0x70
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0x354>
 8001b14:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a59      	ldr	r2, [pc, #356]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	4a56      	ldr	r2, [pc, #344]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d015      	beq.n	8001b60 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7fe fd54 	bl	80005e0 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7fe fd50 	bl	80005e0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e092      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b52:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0ee      	beq.n	8001b3c <HAL_RCC_OscConfig+0x364>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7fe fd3e 	bl	80005e0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7fe fd3a 	bl	80005e0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e07c      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7e:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ee      	bne.n	8001b68 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b90:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	4a3a      	ldr	r2, [pc, #232]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d068      	beq.n	8001c76 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d060      	beq.n	8001c72 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d145      	bne.n	8001c44 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7fe fd0f 	bl	80005e0 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7fe fd0b 	bl	80005e0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e04f      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	019b      	lsls	r3, r3, #6
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	085b      	lsrs	r3, r3, #1
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	061b      	lsls	r3, r3, #24
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	071b      	lsls	r3, r3, #28
 8001c10:	491b      	ldr	r1, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fce0 	bl	80005e0 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c24:	f7fe fcdc 	bl	80005e0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e020      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x44c>
 8001c42:	e018      	b.n	8001c76 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe fcc9 	bl	80005e0 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c52:	f7fe fcc5 	bl	80005e0 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e009      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x47a>
 8001c70:	e001      	b.n	8001c76 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000
 8001c88:	42470060 	.word	0x42470060

08001c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e01d      	b.n	8001cda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f003 fba0 	bl	80053f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f000 f8e4 	bl	8001e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b085      	sub	sp, #20
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	d007      	beq.n	8001d14 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_ConfigClockSource+0x18>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e0a6      	b.n	8001e90 <HAL_TIM_ConfigClockSource+0x166>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d68:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b40      	cmp	r3, #64	; 0x40
 8001d78:	d067      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x120>
 8001d7a:	2b40      	cmp	r3, #64	; 0x40
 8001d7c:	d80b      	bhi.n	8001d96 <HAL_TIM_ConfigClockSource+0x6c>
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d073      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x140>
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d802      	bhi.n	8001d8c <HAL_TIM_ConfigClockSource+0x62>
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d06f      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d8a:	e078      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d06c      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x140>
 8001d90:	2b30      	cmp	r3, #48	; 0x30
 8001d92:	d06a      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001d94:	e073      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d96:	2b70      	cmp	r3, #112	; 0x70
 8001d98:	d00d      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x8c>
 8001d9a:	2b70      	cmp	r3, #112	; 0x70
 8001d9c:	d804      	bhi.n	8001da8 <HAL_TIM_ConfigClockSource+0x7e>
 8001d9e:	2b50      	cmp	r3, #80	; 0x50
 8001da0:	d033      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0xe0>
 8001da2:	2b60      	cmp	r3, #96	; 0x60
 8001da4:	d041      	beq.n	8001e2a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001da6:	e06a      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dac:	d066      	beq.n	8001e7c <HAL_TIM_ConfigClockSource+0x152>
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d017      	beq.n	8001de4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001db4:	e063      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f000 f981 	bl	80020cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	609a      	str	r2, [r3, #8]
      break;
 8001de2:	e04c      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6899      	ldr	r1, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f000 f96a 	bl	80020cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e06:	609a      	str	r2, [r3, #8]
      break;
 8001e08:	e039      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f000 f8de 	bl	8001fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2150      	movs	r1, #80	; 0x50
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f937 	bl	8002096 <TIM_ITRx_SetConfig>
      break;
 8001e28:	e029      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f000 f8fd 	bl	8002036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2160      	movs	r1, #96	; 0x60
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f927 	bl	8002096 <TIM_ITRx_SetConfig>
      break;
 8001e48:	e019      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f000 f8be 	bl	8001fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2140      	movs	r1, #64	; 0x40
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f917 	bl	8002096 <TIM_ITRx_SetConfig>
      break;
 8001e68:	e009      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f000 f90e 	bl	8002096 <TIM_ITRx_SetConfig>
      break;
 8001e7a:	e000      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a40      	ldr	r2, [pc, #256]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d00f      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <TIM_Base_SetConfig+0x118>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <TIM_Base_SetConfig+0x11c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <TIM_Base_SetConfig+0x120>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d108      	bne.n	8001eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d02b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d027      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <TIM_Base_SetConfig+0x118>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d023      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <TIM_Base_SetConfig+0x11c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <TIM_Base_SetConfig+0x120>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d017      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <TIM_Base_SetConfig+0x128>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <TIM_Base_SetConfig+0x12c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00f      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <TIM_Base_SetConfig+0x130>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <TIM_Base_SetConfig+0x134>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <TIM_Base_SetConfig+0x138>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d003      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <TIM_Base_SetConfig+0x13c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d108      	bne.n	8001f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <TIM_Base_SetConfig+0xf8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d103      	bne.n	8001f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	615a      	str	r2, [r3, #20]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	40010400 	.word	0x40010400
 8001fc0:	40014000 	.word	0x40014000
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800
 8001fcc:	40001800 	.word	0x40001800
 8001fd0:	40001c00 	.word	0x40001c00
 8001fd4:	40002000 	.word	0x40002000

08001fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f023 0201 	bic.w	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f023 030a 	bic.w	r3, r3, #10
 8002014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	621a      	str	r2, [r3, #32]
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002036:	b480      	push	{r7}
 8002038:	b087      	sub	sp, #28
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f023 0210 	bic.w	r2, r3, #16
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	031b      	lsls	r3, r3, #12
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	621a      	str	r2, [r3, #32]
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f043 0307 	orr.w	r3, r3, #7
 80020b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	021a      	lsls	r2, r3, #8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	609a      	str	r2, [r3, #8]
}
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002120:	2302      	movs	r3, #2
 8002122:	e032      	b.n	800218a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800215c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4313      	orrs	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e03f      	b.n	8002228 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f003 f93b 	bl	8005438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2224      	movs	r2, #36	; 0x24
 80021c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fc3c 	bl	8002a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800220e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	d153      	bne.n	80022f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_UART_Transmit_DMA+0x26>
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e04c      	b.n	80022f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_UART_Transmit_DMA+0x38>
 8002264:	2302      	movs	r3, #2
 8002266:	e045      	b.n	80022f4 <HAL_UART_Transmit_DMA+0xc4>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	88fa      	ldrh	r2, [r7, #6]
 8002280:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2221      	movs	r2, #33	; 0x21
 800228c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_UART_Transmit_DMA+0xcc>)
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_UART_Transmit_DMA+0xd0>)
 800229e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	4a17      	ldr	r2, [pc, #92]	; (8002304 <HAL_UART_Transmit_DMA+0xd4>)
 80022a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	2200      	movs	r2, #0
 80022ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3304      	adds	r3, #4
 80022c4:	461a      	mov	r2, r3
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	f7fe fb56 	bl	8000978 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	08002665 	.word	0x08002665
 8002300:	080026b7 	.word	0x080026b7
 8002304:	08002757 	.word	0x08002757

08002308 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b20      	cmp	r3, #32
 8002320:	d166      	bne.n	80023f0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_UART_Receive_DMA+0x26>
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e05f      	b.n	80023f2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_UART_Receive_DMA+0x38>
 800233c:	2302      	movs	r3, #2
 800233e:	e058      	b.n	80023f2 <HAL_UART_Receive_DMA+0xea>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2222      	movs	r2, #34	; 0x22
 800235e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_UART_Receive_DMA+0xf4>)
 8002368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236e:	4a24      	ldr	r2, [pc, #144]	; (8002400 <HAL_UART_Receive_DMA+0xf8>)
 8002370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <HAL_UART_Receive_DMA+0xfc>)
 8002378:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237e:	2200      	movs	r2, #0
 8002380:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3304      	adds	r3, #4
 8002392:	4619      	mov	r1, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	f7fe faed 	bl	8000978 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ea:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e000      	b.n	80023f2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80023f0:	2302      	movs	r3, #2
  }
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	080026d3 	.word	0x080026d3
 8002400:	0800273b 	.word	0x0800273b
 8002404:	08002757 	.word	0x08002757

08002408 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_UART_IRQHandler+0x52>
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa7f 	bl	8002956 <UART_Receive_IT>
      return;
 8002458:	e0cc      	b.n	80025f4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80ab 	beq.w	80025b8 <HAL_UART_IRQHandler+0x1b0>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_UART_IRQHandler+0x70>
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80a0 	beq.w	80025b8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_UART_IRQHandler+0x90>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_UART_IRQHandler+0xb0>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	f043 0202 	orr.w	r2, r3, #2
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_UART_IRQHandler+0xd0>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_UART_IRQHandler+0xf0>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	f043 0208 	orr.w	r2, r3, #8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d078      	beq.n	80025f2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_UART_IRQHandler+0x112>
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fa1e 	bl	8002956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <HAL_UART_IRQHandler+0x13a>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d031      	beq.n	80025a6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f967 	bl	8002816 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d123      	bne.n	800259e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002564:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	2b00      	cmp	r3, #0
 800256c:	d013      	beq.n	8002596 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	4a22      	ldr	r2, [pc, #136]	; (80025fc <HAL_UART_IRQHandler+0x1f4>)
 8002574:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fa5c 	bl	8000a38 <HAL_DMA_Abort_IT>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002590:	4610      	mov	r0, r2
 8002592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	e00e      	b.n	80025b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f85a 	bl	8002650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	e00a      	b.n	80025b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f856 	bl	8002650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	e006      	b.n	80025b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f852 	bl	8002650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80025b2:	e01e      	b.n	80025f2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b4:	bf00      	nop
    return;
 80025b6:	e01c      	b.n	80025f2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_UART_IRQHandler+0x1cc>
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f954 	bl	800287a <UART_Transmit_IT>
    return;
 80025d2:	e00f      	b.n	80025f4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_UART_IRQHandler+0x1ec>
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f99c 	bl	8002926 <UART_EndTransmit_IT>
    return;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80025f2:	bf00      	nop
  }
}
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	08002853 	.word	0x08002853

08002600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d113      	bne.n	80026a8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002694:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026a6:	e002      	b.n	80026ae <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f7ff ffa9 	bl	8002600 <HAL_UART_TxCpltCallback>
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff ffa5 	bl	8002614 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11e      	bne.n	800272c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002702:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff ff7b 	bl	8002628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ff77 	bl	800263c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b21      	cmp	r3, #33	; 0x21
 8002788:	d108      	bne.n	800279c <UART_DMAError+0x46>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002796:	68b8      	ldr	r0, [r7, #8]
 8002798:	f000 f827 	bl	80027ea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b40      	cmp	r3, #64	; 0x40
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b22      	cmp	r3, #34	; 0x22
 80027bc:	d108      	bne.n	80027d0 <UART_DMAError+0x7a>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80027ca:	68b8      	ldr	r0, [r7, #8]
 80027cc:	f000 f823 	bl	8002816 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027dc:	68b8      	ldr	r0, [r7, #8]
 80027de:	f7ff ff37 	bl	8002650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002800:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800282c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff feef 	bl	8002650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b21      	cmp	r3, #33	; 0x21
 800288c:	d144      	bne.n	8002918 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d11a      	bne.n	80028ce <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ac:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	621a      	str	r2, [r3, #32]
 80028c0:	e00e      	b.n	80028e0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	621a      	str	r2, [r3, #32]
 80028cc:	e008      	b.n	80028e0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	1c59      	adds	r1, r3, #1
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6211      	str	r1, [r2, #32]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4619      	mov	r1, r3
 80028ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10f      	bne.n	8002914 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002902:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002912:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fe5a 	bl	8002600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b22      	cmp	r3, #34	; 0x22
 8002968:	d171      	bne.n	8002a4e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	d123      	bne.n	80029bc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10e      	bne.n	80029a0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	b29b      	uxth	r3, r3
 800298a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	1c9a      	adds	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
 800299e:	e029      	b.n	80029f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
 80029ba:	e01b      	b.n	80029f4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6858      	ldr	r0, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	1c59      	adds	r1, r3, #1
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6291      	str	r1, [r2, #40]	; 0x28
 80029d4:	b2c2      	uxtb	r2, r0
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e00c      	b.n	80029f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	1c58      	adds	r0, r3, #1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6288      	str	r0, [r1, #40]	; 0x28
 80029ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4619      	mov	r1, r3
 8002a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d120      	bne.n	8002a4a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0220 	bic.w	r2, r2, #32
 8002a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fdf1 	bl	8002628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e002      	b.n	8002a50 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
  }
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a98:	f023 030c 	bic.w	r3, r3, #12
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	68f9      	ldr	r1, [r7, #12]
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac4:	f040 80e4 	bne.w	8002c90 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4aab      	ldr	r2, [pc, #684]	; (8002d7c <UART_SetConfig+0x324>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <UART_SetConfig+0x84>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4aaa      	ldr	r2, [pc, #680]	; (8002d80 <UART_SetConfig+0x328>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d16c      	bne.n	8002bb6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002adc:	f7fe fcca 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4aa3      	ldr	r2, [pc, #652]	; (8002d84 <UART_SetConfig+0x32c>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	011c      	lsls	r4, r3, #4
 8002b00:	f7fe fcb8 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009a      	lsls	r2, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b1a:	f7fe fcab 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009a      	lsls	r2, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	4a93      	ldr	r2, [pc, #588]	; (8002d84 <UART_SetConfig+0x32c>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2264      	movs	r2, #100	; 0x64
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	1aeb      	subs	r3, r5, r3
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	3332      	adds	r3, #50	; 0x32
 8002b48:	4a8e      	ldr	r2, [pc, #568]	; (8002d84 <UART_SetConfig+0x32c>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b56:	441c      	add	r4, r3
 8002b58:	f7fe fc8c 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009a      	lsls	r2, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b72:	f7fe fc7f 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	4a7d      	ldr	r2, [pc, #500]	; (8002d84 <UART_SetConfig+0x32c>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2264      	movs	r2, #100	; 0x64
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	1aeb      	subs	r3, r5, r3
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	3332      	adds	r3, #50	; 0x32
 8002ba0:	4a78      	ldr	r2, [pc, #480]	; (8002d84 <UART_SetConfig+0x32c>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	f003 0207 	and.w	r2, r3, #7
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4422      	add	r2, r4
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e154      	b.n	8002e60 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bb6:	f7fe fc49 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	4a6c      	ldr	r2, [pc, #432]	; (8002d84 <UART_SetConfig+0x32c>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	011c      	lsls	r4, r3, #4
 8002bda:	f7fe fc37 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009a      	lsls	r2, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bf4:	f7fe fc2a 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	009a      	lsls	r2, r3, #2
 8002c02:	441a      	add	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	4a5d      	ldr	r2, [pc, #372]	; (8002d84 <UART_SetConfig+0x32c>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	2264      	movs	r2, #100	; 0x64
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	1aeb      	subs	r3, r5, r3
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3332      	adds	r3, #50	; 0x32
 8002c22:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <UART_SetConfig+0x32c>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c30:	441c      	add	r4, r3
 8002c32:	f7fe fc0b 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009a      	lsls	r2, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c4c:	f7fe fbfe 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009a      	lsls	r2, r3, #2
 8002c5a:	441a      	add	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	4a47      	ldr	r2, [pc, #284]	; (8002d84 <UART_SetConfig+0x32c>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2264      	movs	r2, #100	; 0x64
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	1aeb      	subs	r3, r5, r3
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3332      	adds	r3, #50	; 0x32
 8002c7a:	4a42      	ldr	r2, [pc, #264]	; (8002d84 <UART_SetConfig+0x32c>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 0207 	and.w	r2, r3, #7
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4422      	add	r2, r4
 8002c8c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002c8e:	e0e7      	b.n	8002e60 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a39      	ldr	r2, [pc, #228]	; (8002d7c <UART_SetConfig+0x324>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <UART_SetConfig+0x24c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a38      	ldr	r2, [pc, #224]	; (8002d80 <UART_SetConfig+0x328>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d171      	bne.n	8002d88 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ca4:	f7fe fbe6 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	009a      	lsls	r2, r3, #2
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	4a31      	ldr	r2, [pc, #196]	; (8002d84 <UART_SetConfig+0x32c>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	011c      	lsls	r4, r3, #4
 8002cc8:	f7fe fbd4 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009a      	lsls	r2, r3, #2
 8002cd6:	441a      	add	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ce2:	f7fe fbc7 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009a      	lsls	r2, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <UART_SetConfig+0x32c>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2264      	movs	r2, #100	; 0x64
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	1aeb      	subs	r3, r5, r3
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	3332      	adds	r3, #50	; 0x32
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <UART_SetConfig+0x32c>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1c:	441c      	add	r4, r3
 8002d1e:	f7fe fba9 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009a      	lsls	r2, r3, #2
 8002d2c:	441a      	add	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d38:	f7fe fb9c 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <UART_SetConfig+0x32c>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	2264      	movs	r2, #100	; 0x64
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	1aeb      	subs	r3, r5, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	3332      	adds	r3, #50	; 0x32
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <UART_SetConfig+0x32c>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4422      	add	r2, r4
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	e071      	b.n	8002e60 <UART_SetConfig+0x408>
 8002d7c:	40011000 	.word	0x40011000
 8002d80:	40011400 	.word	0x40011400
 8002d84:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d88:	f7fe fb60 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009a      	lsls	r2, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	4a31      	ldr	r2, [pc, #196]	; (8002e68 <UART_SetConfig+0x410>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	011c      	lsls	r4, r3, #4
 8002dac:	f7fe fb4e 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	009a      	lsls	r2, r3, #2
 8002dba:	441a      	add	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dc6:	f7fe fb41 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009a      	lsls	r2, r3, #2
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <UART_SetConfig+0x410>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2264      	movs	r2, #100	; 0x64
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	1aeb      	subs	r3, r5, r3
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	3332      	adds	r3, #50	; 0x32
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <UART_SetConfig+0x410>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e00:	441c      	add	r4, r3
 8002e02:	f7fe fb23 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009a      	lsls	r2, r3, #2
 8002e10:	441a      	add	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e1c:	f7fe fb16 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	441a      	add	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <UART_SetConfig+0x410>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2264      	movs	r2, #100	; 0x64
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	1aeb      	subs	r3, r5, r3
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	3332      	adds	r3, #50	; 0x32
 8002e4a:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <UART_SetConfig+0x410>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4422      	add	r2, r4
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	e7ff      	b.n	8002e60 <UART_SetConfig+0x408>
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bdb0      	pop	{r4, r5, r7, pc}
 8002e68:	51eb851f 	.word	0x51eb851f

08002e6c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0a5a      	lsrs	r2, r3, #9
 8002e7c:	490f      	ldr	r1, [pc, #60]	; (8002ebc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002e7e:	fba1 1202 	umull	r1, r2, r1, r2
 8002e82:	09d2      	lsrs	r2, r2, #7
 8002e84:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002e86:	fb01 f202 	mul.w	r2, r1, r2
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0a5b      	lsrs	r3, r3, #9
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	09db      	lsrs	r3, r3, #7
 8002e9c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	00044b83 	.word	0x00044b83
 8002ec0:	3b9aca00 	.word	0x3b9aca00

08002ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ec8:	f7fd fb24 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ecc:	f000 f810 	bl	8002ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ed0:	f000 f946 	bl	8003160 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ed4:	f000 f91c 	bl	8003110 <MX_DMA_Init>
  MX_TIM2_Init();
 8002ed8:	f000 f878 	bl	8002fcc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002edc:	f000 f8ee 	bl	80030bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002ee0:	f000 f8c2 	bl	8003068 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
ros_init();
 8002ee4:	f001 fb38 	bl	8004558 <ros_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ros_run();
 8002ee8:	f001 fb58 	bl	800459c <ros_run>
 8002eec:	e7fc      	b.n	8002ee8 <main+0x24>
	...

08002ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b094      	sub	sp, #80	; 0x50
 8002ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	2234      	movs	r2, #52	; 0x34
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f002 fccd 	bl	800589e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f04:	f107 0308 	add.w	r3, r7, #8
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f14:	2300      	movs	r3, #0
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <SystemClock_Config+0xd4>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <SystemClock_Config+0xd4>)
 8002f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f22:	6413      	str	r3, [r2, #64]	; 0x40
 8002f24:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <SystemClock_Config+0xd4>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f30:	2300      	movs	r3, #0
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <SystemClock_Config+0xd8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <SystemClock_Config+0xd8>)
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <SystemClock_Config+0xd8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f64:	2308      	movs	r3, #8
 8002f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f70:	2302      	movs	r3, #2
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f74:	2302      	movs	r3, #2
 8002f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fc2b 	bl	80017d8 <HAL_RCC_OscConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002f88:	f000 f912 	bl	80031b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f8c:	230f      	movs	r3, #15
 8002f8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8002f90:	2303      	movs	r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002fa4:	f107 0308 	add.w	r3, r7, #8
 8002fa8:	2104      	movs	r1, #4
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe f960 	bl	8001270 <HAL_RCC_ClockConfig>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002fb6:	f000 f8fb 	bl	80031b0 <Error_Handler>
  }
}
 8002fba:	bf00      	nop
 8002fbc:	3750      	adds	r7, #80	; 0x50
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000

08002fcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd2:	f107 0308 	add.w	r3, r7, #8
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <MX_TIM2_Init+0x98>)
 8002fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <MX_TIM2_Init+0x98>)
 8002ff2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002ff6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <MX_TIM2_Init+0x98>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <MX_TIM2_Init+0x98>)
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <MX_TIM2_Init+0x98>)
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <MX_TIM2_Init+0x98>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003012:	4814      	ldr	r0, [pc, #80]	; (8003064 <MX_TIM2_Init+0x98>)
 8003014:	f7fe fe3a 	bl	8001c8c <HAL_TIM_Base_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800301e:	f000 f8c7 	bl	80031b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003028:	f107 0308 	add.w	r3, r7, #8
 800302c:	4619      	mov	r1, r3
 800302e:	480d      	ldr	r0, [pc, #52]	; (8003064 <MX_TIM2_Init+0x98>)
 8003030:	f7fe fe7b 	bl	8001d2a <HAL_TIM_ConfigClockSource>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800303a:	f000 f8b9 	bl	80031b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003046:	463b      	mov	r3, r7
 8003048:	4619      	mov	r1, r3
 800304a:	4806      	ldr	r0, [pc, #24]	; (8003064 <MX_TIM2_Init+0x98>)
 800304c:	f7ff f85e 	bl	800210c <HAL_TIMEx_MasterConfigSynchronization>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003056:	f000 f8ab 	bl	80031b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000133c 	.word	0x2000133c

08003068 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 800306e:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 8003070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 8003074:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <MX_USART1_UART_Init+0x50>)
 8003076:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 800308c:	220c      	movs	r2, #12
 800308e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 8003092:	2200      	movs	r2, #0
 8003094:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 8003098:	2200      	movs	r2, #0
 800309a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800309c:	4804      	ldr	r0, [pc, #16]	; (80030b0 <MX_USART1_UART_Init+0x48>)
 800309e:	f7ff f87a 	bl	8002196 <HAL_UART_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80030a8:	f000 f882 	bl	80031b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200012fc 	.word	0x200012fc
 80030b4:	40011000 	.word	0x40011000
 80030b8:	000f4240 	.word	0x000f4240

080030bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <MX_USART2_UART_Init+0x50>)
 80030c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030c8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80030cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030e2:	220c      	movs	r2, #12
 80030e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030f4:	f7ff f84f 	bl	8002196 <HAL_UART_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030fe:	f000 f857 	bl	80031b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000137c 	.word	0x2000137c
 800310c:	40004400 	.word	0x40004400

08003110 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <MX_DMA_Init+0x4c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a0f      	ldr	r2, [pc, #60]	; (800315c <MX_DMA_Init+0x4c>)
 8003120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <MX_DMA_Init+0x4c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	2010      	movs	r0, #16
 8003138:	f7fd fb39 	bl	80007ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800313c:	2010      	movs	r0, #16
 800313e:	f7fd fb52 	bl	80007e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	2011      	movs	r0, #17
 8003148:	f7fd fb31 	bl	80007ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800314c:	2011      	movs	r0, #17
 800314e:	f7fd fb4a 	bl	80007e6 <HAL_NVIC_EnableIRQ>

}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800

08003160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <MX_GPIO_Init+0x4c>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <MX_GPIO_Init+0x4c>)
 8003170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <MX_GPIO_Init+0x4c>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <MX_GPIO_Init+0x4c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a08      	ldr	r2, [pc, #32]	; (80031ac <MX_GPIO_Init+0x4c>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <MX_GPIO_Init+0x4c>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]

}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 80031ec:	463b      	mov	r3, r7
 80031ee:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	15db      	asrs	r3, r3, #23
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8003206:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	0159      	lsls	r1, r3, #5
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	b2ca      	uxtb	r2, r1
 8003238:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	10d9      	asrs	r1, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	b2ca      	uxtb	r2, r1
 8003246:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	12d9      	asrs	r1, r3, #11
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	b2ca      	uxtb	r2, r1
 8003254:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	b25a      	sxtb	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	14db      	asrs	r3, r3, #19
 8003260:	b25b      	sxtb	r3, r3
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	b25b      	sxtb	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b259      	sxtb	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	b2ca      	uxtb	r2, r1
 8003274:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	111b      	asrs	r3, r3, #4
 800327a:	b2da      	uxtb	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	1c59      	adds	r1, r3, #1
 8003280:	6079      	str	r1, [r7, #4]
 8003282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 800328a:	edd7 7a00 	vldr	s15, [r7]
 800328e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003296:	d508      	bpl.n	80032aa <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 80032aa:	2308      	movs	r3, #8
  }
 80032ac:	4618      	mov	r0, r3
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3303      	adds	r3, #3
 80032ca:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	f003 0207 	and.w	r2, r3, #7
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	00da      	lsls	r2, r3, #3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	02da      	lsls	r2, r3, #11
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	04db      	lsls	r3, r3, #19
 8003310:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8003314:	431a      	orrs	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
 8003338:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800334a:	05db      	lsls	r3, r3, #23
 800334c:	431a      	orrs	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	601a      	str	r2, [r3, #0]

    return 8;
 800336a:	2308      	movs	r3, #8
  }
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_ZN3ros3MsgC1Ev>:
class Msg
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <_ZN3ros3MsgC1Ev+0x1c>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	08005de4 	.word	0x08005de4

08003398 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
      data()
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ffe8 	bl	8003378 <_ZN3ros3MsgC1Ev>
 80033a8:	4a06      	ldr	r2, [pc, #24]	; (80033c4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff03 	bl	80031be <_ZN3ros4TimeC1Ev>
    {
    }
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	08005dcc 	.word	0x08005dcc

080033c8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	b2ca      	uxtb	r2, r1
 80033e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0a19      	lsrs	r1, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3301      	adds	r3, #1
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	b2ca      	uxtb	r2, r1
 80033f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	0c19      	lsrs	r1, r3, #16
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3302      	adds	r3, #2
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	4413      	add	r3, r2
 8003404:	b2ca      	uxtb	r2, r1
 8003406:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	0e19      	lsrs	r1, r3, #24
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3303      	adds	r3, #3
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	4413      	add	r3, r2
 8003416:	b2ca      	uxtb	r2, r1
 8003418:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3304      	adds	r3, #4
 800341e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6899      	ldr	r1, [r3, #8]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	b2ca      	uxtb	r2, r1
 800342c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0a19      	lsrs	r1, r3, #8
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3301      	adds	r3, #1
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	4413      	add	r3, r2
 800343c:	b2ca      	uxtb	r2, r1
 800343e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	0c19      	lsrs	r1, r3, #16
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3302      	adds	r3, #2
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	b2ca      	uxtb	r2, r1
 8003450:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0e19      	lsrs	r1, r3, #24
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3303      	adds	r3, #3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	4413      	add	r3, r2
 8003460:	b2ca      	uxtb	r2, r1
 8003462:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3304      	adds	r3, #4
 8003468:	60fb      	str	r3, [r7, #12]
      return offset;
 800346a:	68fb      	ldr	r3, [r7, #12]
    }
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	4413      	add	r3, r2
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	440b      	add	r3, r1
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3302      	adds	r3, #2
 80034b2:	6839      	ldr	r1, [r7, #0]
 80034b4:	440b      	add	r3, r1
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3303      	adds	r3, #3
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	440b      	add	r3, r1
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	061b      	lsls	r3, r3, #24
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	4413      	add	r3, r2
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3301      	adds	r3, #1
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	440b      	add	r3, r1
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3302      	adds	r3, #2
 8003508:	6839      	ldr	r1, [r7, #0]
 800350a:	440b      	add	r3, r1
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3303      	adds	r3, #3
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	440b      	add	r3, r1
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	061b      	lsls	r3, r3, #24
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3304      	adds	r3, #4
 8003530:	60fb      	str	r3, [r7, #12]
     return offset;
 8003532:	68fb      	ldr	r3, [r7, #12]
    }
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	08005b30 	.word	0x08005b30

0800355c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	08005b40 	.word	0x08005b40

08003578 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fef8 	bl	8003378 <_ZN3ros3MsgC1Ev>
 8003588:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	809a      	strh	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a09      	ldr	r2, [pc, #36]	; (80035bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a07      	ldr	r2, [pc, #28]	; (80035bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a06      	ldr	r2, [pc, #24]	; (80035bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	615a      	str	r2, [r3, #20]
    {
    }
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08005db4 	.word	0x08005db4
 80035bc:	08005b64 	.word	0x08005b64

080035c0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8899      	ldrh	r1, [r3, #4]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	b2ca      	uxtb	r2, r1
 80035da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	889b      	ldrh	r3, [r3, #4]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	b299      	uxth	r1, r3
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	3301      	adds	r3, #1
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	4413      	add	r3, r2
 80035ec:	b2ca      	uxtb	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3302      	adds	r3, #2
 80035f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc fe02 	bl	8000204 <strlen>
 8003600:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	4413      	add	r3, r2
 8003608:	69b9      	ldr	r1, [r7, #24]
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f803 	bl	8004616 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3304      	adds	r3, #4
 8003614:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	18d0      	adds	r0, r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4619      	mov	r1, r3
 8003624:	f002 f930 	bl	8005888 <memcpy>
      offset += length_topic_name;
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4413      	add	r3, r2
 800362e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc fde5 	bl	8000204 <strlen>
 800363a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	4413      	add	r3, r2
 8003642:	6979      	ldr	r1, [r7, #20]
 8003644:	4618      	mov	r0, r3
 8003646:	f000 ffe6 	bl	8004616 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	18d0      	adds	r0, r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4619      	mov	r1, r3
 800365e:	f002 f913 	bl	8005888 <memcpy>
      offset += length_message_type;
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4413      	add	r3, r2
 8003668:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc fdc8 	bl	8000204 <strlen>
 8003674:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	4413      	add	r3, r2
 800367c:	6939      	ldr	r1, [r7, #16]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 ffc9 	bl	8004616 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	3304      	adds	r3, #4
 8003688:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	18d0      	adds	r0, r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4619      	mov	r1, r3
 8003698:	f002 f8f6 	bl	8005888 <memcpy>
      offset += length_md5sum;
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	4413      	add	r3, r2
 80036b2:	b2ca      	uxtb	r2, r1
 80036b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	0a19      	lsrs	r1, r3, #8
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	b2ca      	uxtb	r2, r1
 80036c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	0c19      	lsrs	r1, r3, #16
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3302      	adds	r3, #2
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4413      	add	r3, r2
 80036d2:	b2ca      	uxtb	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	0e19      	lsrs	r1, r3, #24
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3303      	adds	r3, #3
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	b2ca      	uxtb	r2, r1
 80036e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	61fb      	str	r3, [r7, #28]
      return offset;
 80036ec:	69fb      	ldr	r3, [r7, #28]
    }
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b08a      	sub	sp, #40	; 0x28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	4413      	add	r3, r2
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b29a      	uxth	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	889b      	ldrh	r3, [r3, #4]
 8003716:	b21a      	sxth	r2, r3
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	3301      	adds	r3, #1
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	440b      	add	r3, r1
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	b21b      	sxth	r3, r3
 8003726:	4313      	orrs	r3, r2
 8003728:	b21b      	sxth	r3, r3
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	3302      	adds	r3, #2
 8003734:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	441a      	add	r2, r3
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 ff85 	bl	8004652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	3304      	adds	r3, #4
 800374c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	4413      	add	r3, r2
 8003758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375a:	429a      	cmp	r2, r3
 800375c:	d20c      	bcs.n	8003778 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	441a      	add	r2, r3
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	3b01      	subs	r3, #1
 8003768:	6839      	ldr	r1, [r7, #0]
 800376a:	440b      	add	r3, r1
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	3301      	adds	r3, #1
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e7ec      	b.n	8003752 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4413      	add	r3, r2
 800377e:	3b01      	subs	r3, #1
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	4413      	add	r3, r2
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	3b01      	subs	r3, #1
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	441a      	add	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4413      	add	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	441a      	add	r2, r3
 80037a2:	f107 0310 	add.w	r3, r7, #16
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 ff52 	bl	8004652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	3304      	adds	r3, #4
 80037b2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d20c      	bcs.n	80037de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	441a      	add	r2, r3
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	6839      	ldr	r1, [r7, #0]
 80037d0:	440b      	add	r3, r1
 80037d2:	7812      	ldrb	r2, [r2, #0]
 80037d4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	3301      	adds	r3, #1
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	e7ec      	b.n	80037b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	3b01      	subs	r3, #1
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	4413      	add	r3, r2
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	441a      	add	r2, r3
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f000 ff1f 	bl	8004652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	3304      	adds	r3, #4
 8003818:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	429a      	cmp	r2, r3
 8003828:	d20c      	bcs.n	8003844 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	441a      	add	r2, r3
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	3b01      	subs	r3, #1
 8003834:	6839      	ldr	r1, [r7, #0]
 8003836:	440b      	add	r3, r1
 8003838:	7812      	ldrb	r2, [r2, #0]
 800383a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e7ec      	b.n	800381e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	3b01      	subs	r3, #1
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	4413      	add	r3, r2
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	3b01      	subs	r3, #1
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	441a      	add	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	440a      	add	r2, r1
 8003874:	7812      	ldrb	r2, [r2, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	3301      	adds	r3, #1
 8003880:	6839      	ldr	r1, [r7, #0]
 8003882:	440b      	add	r3, r1
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	4313      	orrs	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	3302      	adds	r3, #2
 8003892:	6839      	ldr	r1, [r7, #0]
 8003894:	440b      	add	r3, r1
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	4313      	orrs	r3, r2
 800389c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	3303      	adds	r3, #3
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	440b      	add	r3, r1
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	061b      	lsls	r3, r3, #24
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	3304      	adds	r3, #4
 80038ba:	61bb      	str	r3, [r7, #24]
     return offset;
 80038bc:	69bb      	ldr	r3, [r7, #24]
    }
 80038be:	4618      	mov	r0, r3
 80038c0:	3728      	adds	r7, #40	; 0x28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	08005b68 	.word	0x08005b68

080038e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	08005b84 	.word	0x08005b84

08003900 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fd34 	bl	8003378 <_ZN3ros3MsgC1Ev>
 8003910:	4a06      	ldr	r2, [pc, #24]	; (800392c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	711a      	strb	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a04      	ldr	r2, [pc, #16]	; (8003930 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003920:	609a      	str	r2, [r3, #8]
    {
    }
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	08005d9c 	.word	0x08005d9c
 8003930:	08005b64 	.word	0x08005b64

08003934 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	4413      	add	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	7912      	ldrb	r2, [r2, #4]
 800394c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3301      	adds	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fc53 	bl	8000204 <strlen>
 800395e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	4413      	add	r3, r2
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fe54 	bl	8004616 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	18d0      	adds	r0, r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4619      	mov	r1, r3
 8003982:	f001 ff81 	bl	8005888 <memcpy>
      offset += length_msg;
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4413      	add	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
      return offset;
 800398e:	68fb      	ldr	r3, [r7, #12]
    }
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3301      	adds	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	441a      	add	r2, r3
 80039be:	f107 030c 	add.w	r3, r7, #12
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fe44 	bl	8004652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	3304      	adds	r3, #4
 80039ce:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d20c      	bcs.n	80039fa <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	441a      	add	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	440b      	add	r3, r1
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	3301      	adds	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e7ec      	b.n	80039d4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	3b01      	subs	r3, #1
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
     return offset;
 8003a1e:	693b      	ldr	r3, [r7, #16]
    }
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	08005ba8 	.word	0x08005ba8

08003a44 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	08005bbc 	.word	0x08005bbc

08003a60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fc84 	bl	8003378 <_ZN3ros3MsgC1Ev>
 8003a70:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	619a      	str	r2, [r3, #24]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	61da      	str	r2, [r3, #28]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	08005d84 	.word	0x08005d84

08003aa8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	b2ca      	uxtb	r2, r1
 8003ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0a19      	lsrs	r1, r3, #8
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	3301      	adds	r3, #1
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b2ca      	uxtb	r2, r1
 8003ad4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0c19      	lsrs	r1, r3, #16
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	3302      	adds	r3, #2
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	b2ca      	uxtb	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0e19      	lsrs	r1, r3, #24
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	3303      	adds	r3, #3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	b2ca      	uxtb	r2, r1
 8003af8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	3304      	adds	r3, #4
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	6a3a      	ldr	r2, [r7, #32]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d22b      	bcs.n	8003b66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003b1c:	6939      	ldr	r1, [r7, #16]
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	4413      	add	r3, r2
 8003b24:	b2ca      	uxtb	r2, r1
 8003b26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	0a19      	lsrs	r1, r3, #8
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	3301      	adds	r3, #1
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	b2ca      	uxtb	r2, r1
 8003b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	0c19      	lsrs	r1, r3, #16
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	3302      	adds	r3, #2
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	b2ca      	uxtb	r2, r1
 8003b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	0e19      	lsrs	r1, r3, #24
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	3303      	adds	r3, #3
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	4413      	add	r3, r2
 8003b54:	b2ca      	uxtb	r2, r1
 8003b56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	3301      	adds	r3, #1
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	e7ce      	b.n	8003b04 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6919      	ldr	r1, [r3, #16]
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	b2ca      	uxtb	r2, r1
 8003b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	0a19      	lsrs	r1, r3, #8
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4413      	add	r3, r2
 8003b82:	b2ca      	uxtb	r2, r1
 8003b84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	0c19      	lsrs	r1, r3, #16
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	3302      	adds	r3, #2
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	b2ca      	uxtb	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	0e19      	lsrs	r1, r3, #24
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	3303      	adds	r3, #3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	b2ca      	uxtb	r2, r1
 8003ba8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3304      	adds	r3, #4
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d22b      	bcs.n	8003c16 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003bcc:	68f9      	ldr	r1, [r7, #12]
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b2ca      	uxtb	r2, r1
 8003bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	0a19      	lsrs	r1, r3, #8
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	3301      	adds	r3, #1
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	b2ca      	uxtb	r2, r1
 8003be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	0c19      	lsrs	r1, r3, #16
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	3302      	adds	r3, #2
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	b2ca      	uxtb	r2, r1
 8003bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	0e19      	lsrs	r1, r3, #24
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	3303      	adds	r3, #3
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	4413      	add	r3, r2
 8003c04:	b2ca      	uxtb	r2, r1
 8003c06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e7ce      	b.n	8003bb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69d9      	ldr	r1, [r3, #28]
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	b2ca      	uxtb	r2, r1
 8003c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	0a19      	lsrs	r1, r3, #8
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	b2ca      	uxtb	r2, r1
 8003c34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	0c19      	lsrs	r1, r3, #16
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	3302      	adds	r3, #2
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	b2ca      	uxtb	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	0e19      	lsrs	r1, r3, #24
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	3303      	adds	r3, #3
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	b2ca      	uxtb	r2, r1
 8003c58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d228      	bcs.n	8003cc0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc fac2 	bl	8000204 <strlen>
 8003c80:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	6979      	ldr	r1, [r7, #20]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fcc3 	bl	8004616 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	3304      	adds	r3, #4
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	18d0      	adds	r0, r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4619      	mov	r1, r3
 8003cac:	f001 fdec 	bl	8005888 <memcpy>
      offset += length_stringsi;
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e7d1      	b.n	8003c64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3728      	adds	r7, #40	; 0x28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08e      	sub	sp, #56	; 0x38
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d08:	3303      	adds	r3, #3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d90a      	bls.n	8003d3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f001 fdbc 	bl	80058b0 <realloc>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003d44:	2300      	movs	r3, #0
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d236      	bcs.n	8003dc0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	3301      	adds	r3, #1
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	440b      	add	r3, r1
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	440b      	add	r3, r1
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	3303      	adds	r3, #3
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	440b      	add	r3, r1
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	3304      	adds	r3, #4
 8003da4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	3301      	adds	r3, #1
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbe:	e7c3      	b.n	8003d48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	3301      	adds	r3, #1
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	3302      	adds	r3, #2
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	3303      	adds	r3, #3
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e02:	3304      	adds	r3, #4
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d90a      	bls.n	8003e26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f001 fd48 	bl	80058b0 <realloc>
 8003e20:	4602      	mov	r2, r0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d236      	bcs.n	8003ea8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	440a      	add	r2, r1
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	3301      	adds	r3, #1
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	440b      	add	r3, r1
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e62:	3302      	adds	r3, #2
 8003e64:	6839      	ldr	r1, [r7, #0]
 8003e66:	440b      	add	r3, r1
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e74:	3303      	adds	r3, #3
 8003e76:	6839      	ldr	r1, [r7, #0]
 8003e78:	440b      	add	r3, r1
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	3214      	adds	r2, #20
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea6:	e7c3      	b.n	8003e30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	3303      	adds	r3, #3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	3304      	adds	r3, #4
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d90a      	bls.n	8003f0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f001 fcd4 	bl	80058b0 <realloc>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003f14:	2300      	movs	r3, #0
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d23f      	bcs.n	8003fa2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	441a      	add	r2, r3
 8003f28:	f107 030c 	add.w	r3, r7, #12
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fb8f 	bl	8004652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	3304      	adds	r3, #4
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d20c      	bcs.n	8003f64 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	441a      	add	r2, r3
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	3b01      	subs	r3, #1
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	440b      	add	r3, r1
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	3301      	adds	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	e7ec      	b.n	8003f3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	4413      	add	r3, r2
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	3b01      	subs	r3, #1
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	3220      	adds	r2, #32
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa0:	e7ba      	b.n	8003f18 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3738      	adds	r7, #56	; 0x38
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	08005cd8 	.word	0x08005cd8

08003fc8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	08005be0 	.word	0x08005be0

08003fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	611a      	str	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68d8      	ldr	r0, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6891      	ldr	r1, [r2, #8]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	4798      	blx	r3
 8004030:	4603      	mov	r3, r0
  };
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
  }
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - huart->hdmarx->Instance->NDTR) & (rbuflen - 1); }
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	425b      	negs	r3, r3
 8004066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
      htim(&htim2), huart(&huart2), rind(0), twind(0), tfind(0){
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a0b      	ldr	r2, [pc, #44]	; (80040b8 <_ZN13STM32HardwareC1Ev+0x40>)
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    }
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4618      	mov	r0, r3
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	2000133c 	.word	0x2000133c
 80040b8:	2000137c 	.word	0x2000137c

080040bc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(TIM_HandleTypeDef *htim_, UART_HandleTypeDef *huart_):
      htim(htim_), huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f809 	bl	80040dc <_ZN13STM32Hardware10reset_rbufEv>

      HAL_TIM_Base_Start(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fd fe07 	bl	8001ce2 <HAL_TIM_Base_Start>
    }
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6858      	ldr	r0, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3308      	adds	r3, #8
 80040ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7fe f909 	bl	8002308 <HAL_UART_Receive_DMA>
    }
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZN13STM32Hardware4readEv>:

    int read(){
 80040fe:	b590      	push	{r4, r7, lr}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
      int c = -1;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ff9d 	bl	8004052 <_ZN13STM32Hardware10getRdmaIndEv>
 8004118:	4603      	mov	r3, r0
 800411a:	429c      	cmp	r4, r3
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	7a1b      	ldrb	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004144:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 800414e:	68fb      	ldr	r3, [r7, #12]
    }
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bd90      	pop	{r4, r7, pc}

08004158 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	d108      	bne.n	8004180 <_ZN13STM32Hardware5flushEv+0x28>
 800416e:	4b28      	ldr	r3, [pc, #160]	; (8004210 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	f083 0301 	eor.w	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <_ZN13STM32Hardware5flushEv+0x28>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <_ZN13STM32Hardware5flushEv+0x2a>
 8004180:	2300      	movs	r3, #0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d040      	beq.n	8004208 <_ZN13STM32Hardware5flushEv+0xb0>
        mutex = true;
 8004186:	4b22      	ldr	r3, [pc, #136]	; (8004210 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 8004198:	429a      	cmp	r2, r3
 800419a:	d032      	beq.n	8004202 <_ZN13STM32Hardware5flushEv+0xaa>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d20a      	bcs.n	80041c2 <_ZN13STM32Hardware5flushEv+0x6a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	b29b      	uxth	r3, r3
 80041c0:	e006      	b.n	80041d0 <_ZN13STM32Hardware5flushEv+0x78>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6858      	ldr	r0, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 80041dc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4413      	add	r3, r2
 80041e4:	3304      	adds	r3, #4
 80041e6:	89fa      	ldrh	r2, [r7, #14]
 80041e8:	4619      	mov	r1, r3
 80041ea:	f7fe f821 	bl	8002230 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
 80041f4:	89fb      	ldrh	r3, [r7, #14]
 80041f6:	4413      	add	r3, r2
 80041f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
        }
        mutex = false;
 8004202:	4b03      	ldr	r3, [pc, #12]	; (8004210 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
      }
    }
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	200000a0 	.word	0x200000a0

08004214 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
      int n = length;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	61bb      	str	r3, [r7, #24]
      n = n <= tbuflen ? n : tbuflen;
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422a:	bfa8      	it	ge
 800422c:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8004230:	61bb      	str	r3, [r7, #24]

      int get_tail;

      //int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
      int n_tail;
      n <= (int)(tbuflen - twind) ? get_tail = n : get_tail = tbuflen - twind;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8004238:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800423c:	461a      	mov	r2, r3
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4293      	cmp	r3, r2
 8004242:	dc02      	bgt.n	800424a <_ZN13STM32Hardware5writeEPhi+0x36>
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e005      	b.n	8004256 <_ZN13STM32Hardware5writeEPhi+0x42>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8004250:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004254:	61fb      	str	r3, [r7, #28]


      n_tail = get_tail;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	617b      	str	r3, [r7, #20]

      memcpy(&(tbuf[twind]), data, n_tail);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8004260:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fb0a 	bl	8005888 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	4413      	add	r3, r2
 800427e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c

      if(n != n_tail){
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d00b      	beq.n	80042a8 <_ZN13STM32Hardware5writeEPhi+0x94>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	18d1      	adds	r1, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	f001 faf0 	bl	8005888 <memcpy>
      }

      flush();
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff ff55 	bl	8004158 <_ZN13STM32Hardware5flushEv>
    }
 80042ae:	bf00      	nop
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return __HAL_TIM_GET_COUNTER(htim); }
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
      data("")
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f84a 	bl	8003378 <_ZN3ros3MsgC1Ev>
 80042e4:	4a05      	ldr	r2, [pc, #20]	; (80042fc <_ZN8std_msgs6StringC1Ev+0x28>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80042ee:	605a      	str	r2, [r3, #4]
    {
    }
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	08005d40 	.word	0x08005d40
 8004300:	08005b64 	.word	0x08005b64

08004304 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fb ff74 	bl	8000204 <strlen>
 800431c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	4413      	add	r3, r2
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f975 	bl	8004616 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3304      	adds	r3, #4
 8004330:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	18d0      	adds	r0, r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	4619      	mov	r1, r3
 8004340:	f001 faa2 	bl	8005888 <memcpy>
      offset += length_data;
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4413      	add	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
      return offset;
 800434c:	68fb      	ldr	r3, [r7, #12]
    }
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	441a      	add	r2, r3
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f96e 	bl	8004652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3304      	adds	r3, #4
 800437a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d20c      	bcs.n	80043a6 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	441a      	add	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	3b01      	subs	r3, #1
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	440b      	add	r3, r1
 800439a:	7812      	ldrb	r2, [r2, #0]
 800439c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	3301      	adds	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e7ec      	b.n	8004380 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	3b01      	subs	r3, #1
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
     return offset;
 80043ca:	693b      	ldr	r3, [r7, #16]
    }
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	4b03      	ldr	r3, [pc, #12]	; (80043ec <_ZN8std_msgs6String7getTypeEv+0x18>)
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	08005c04 	.word	0x08005c04

080043f0 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	08005c14 	.word	0x08005c14

0800440c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe ffae 	bl	8003378 <_ZN3ros3MsgC1Ev>
 800441c:	4a09      	ldr	r2, [pc, #36]	; (8004444 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	60da      	str	r2, [r3, #12]
    {
    }
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	08005d28 	.word	0x08005d28

08004448 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004462:	eeb0 0a67 	vmov.f32	s0, s15
 8004466:	4610      	mov	r0, r2
 8004468:	f7fe feba 	bl	80031e0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004480:	eeb0 0a67 	vmov.f32	s0, s15
 8004484:	4610      	mov	r0, r2
 8004486:	f7fe feab 	bl	80031e0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800448a:	4602      	mov	r2, r0
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	441a      	add	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	edd3 7a03 	vldr	s15, [r3, #12]
 800449e:	eeb0 0a67 	vmov.f32	s0, s15
 80044a2:	4610      	mov	r0, r2
 80044a4:	f7fe fe9c 	bl	80031e0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
      return offset;
 80044b0:	68fb      	ldr	r3, [r7, #12]
    }
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	441a      	add	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f7fe feef 	bl	80032b8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	441a      	add	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3308      	adds	r3, #8
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7fe fee2 	bl	80032b8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	330c      	adds	r3, #12
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7fe fed5 	bl	80032b8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800450e:	4602      	mov	r2, r0
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
     return offset;
 8004516:	68fb      	ldr	r3, [r7, #12]
    }
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	08005c38 	.word	0x08005c38

0800453c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	08005c50 	.word	0x08005c50

08004558 <ros_init>:
	//__usart2.write(&data, 1);
	return ch;
}

void ros_init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
	nh.initNode();
 800455c:	480a      	ldr	r0, [pc, #40]	; (8004588 <ros_init+0x30>)
 800455e:	f000 f971 	bl	8004844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(pub_chat);
 8004562:	490a      	ldr	r1, [pc, #40]	; (800458c <ros_init+0x34>)
 8004564:	4808      	ldr	r0, [pc, #32]	; (8004588 <ros_init+0x30>)
 8004566:	f000 f992 	bl	800488e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(angle_sub);
 800456a:	4909      	ldr	r1, [pc, #36]	; (8004590 <ros_init+0x38>)
 800456c:	4806      	ldr	r0, [pc, #24]	; (8004588 <ros_init+0x30>)
 800456e:	f000 f9bc 	bl	80048ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_>
	nowTick = HAL_GetTick();
 8004572:	f7fc f835 	bl	80005e0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <ros_init+0x3c>)
 800457a:	601a      	str	r2, [r3, #0]
	pastTick = nowTick;
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <ros_init+0x3c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a05      	ldr	r2, [pc, #20]	; (8004598 <ros_init+0x40>)
 8004582:	6013      	str	r3, [r2, #0]
}
 8004584:	bf00      	nop
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200000a4 	.word	0x200000a4
 800458c:	200011ec 	.word	0x200011ec
 8004590:	20001200 	.word	0x20001200
 8004594:	20001224 	.word	0x20001224
 8004598:	20001228 	.word	0x20001228

0800459c <ros_run>:

void ros_run(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	nowTick = HAL_GetTick();
 80045a0:	f7fc f81e 	bl	80005e0 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <ros_run+0x3c>)
 80045a8:	601a      	str	r2, [r3, #0]
	if(nowTick - pastTick > 100)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <ros_run+0x3c>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <ros_run+0x40>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b64      	cmp	r3, #100	; 0x64
 80045b6:	d90d      	bls.n	80045d4 <ros_run+0x38>
	{
		str_msg.data = hello;
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <ros_run+0x44>)
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <ros_run+0x48>)
 80045bc:	605a      	str	r2, [r3, #4]
		pub_chat.publish(&str_msg);
 80045be:	4908      	ldr	r1, [pc, #32]	; (80045e0 <ros_run+0x44>)
 80045c0:	4809      	ldr	r0, [pc, #36]	; (80045e8 <ros_run+0x4c>)
 80045c2:	f7ff fd26 	bl	8004012 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 80045c6:	4809      	ldr	r0, [pc, #36]	; (80045ec <ros_run+0x50>)
 80045c8:	f000 f9bc 	bl	8004944 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
		pastTick = nowTick;
 80045cc:	4b02      	ldr	r3, [pc, #8]	; (80045d8 <ros_run+0x3c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a02      	ldr	r2, [pc, #8]	; (80045dc <ros_run+0x40>)
 80045d2:	6013      	str	r3, [r2, #0]
	}
}
 80045d4:	bf00      	nop
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20001224 	.word	0x20001224
 80045dc:	20001228 	.word	0x20001228
 80045e0:	200011e4 	.word	0x200011e4
 80045e4:	20000008 	.word	0x20000008
 80045e8:	200011ec 	.word	0x200011ec
 80045ec:	200000a4 	.word	0x200000a4

080045f0 <_Z8angle_cbRKN13geometry_msgs7Vector3E>:

void angle_cb(const geometry_msgs::Vector3& msg)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	float x = msg.x;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]
	float y = msg.y;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	613b      	str	r3, [r7, #16]
	float z = msg.z;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	60fb      	str	r3, [r7, #12]
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d80d      	bhi.n	8004646 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	fa22 f103 	lsr.w	r1, r2, r3
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	b2ca      	uxtb	r2, r1
 800463c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e7ee      	b.n	8004624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d811      	bhi.n	8004690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	440a      	add	r2, r1
 8004676:	7812      	ldrb	r2, [r2, #0]
 8004678:	4611      	mov	r1, r2
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	00d2      	lsls	r2, r2, #3
 800467e:	fa01 f202 	lsl.w	r2, r1, r2
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e7ea      	b.n	8004666 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	08005d70 	.word	0x08005d70

080046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff ffe8 	bl	800469c <_ZN3ros15NodeHandleBase_C1Ev>
 80046cc:	4a42      	ldr	r2, [pc, #264]	; (80047d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x11c>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fcce 	bl	8004078 <_ZN13STM32HardwareC1Ev>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80046e2:	3304      	adds	r3, #4
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80046ee:	3318      	adds	r3, #24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff f9b5 	bl	8003a60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b18      	cmp	r3, #24
 80046fe:	d80a      	bhi.n	8004716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>
      publishers[i] = 0;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004708:	2100      	movs	r1, #0
 800470a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3301      	adds	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e7f1      	b.n	80046fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b18      	cmp	r3, #24
 800471e:	d80b      	bhi.n	8004738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	2200      	movs	r2, #0
 800472e:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	3301      	adds	r3, #1
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e7f0      	b.n	800471a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004742:	d20a      	bcs.n	800475a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9e>
      message_in[i] = 0;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e7f0      	b.n	800473c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004764:	d20a      	bcs.n	800477c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc0>
      message_out[i] = 0;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4413      	add	r3, r2
 800476c:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	3301      	adds	r3, #1
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	e7f0      	b.n	800475e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004782:	331c      	adds	r3, #28
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800478e:	3304      	adds	r3, #4
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800479a:	3308      	adds	r3, #8
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80047a6:	3310      	adds	r3, #16
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80047b2:	331c      	adds	r3, #28
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80047be:	3304      	adds	r3, #4
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

    spin_timeout_ = 0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
  }
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	08005d14 	.word	0x08005d14

080047dc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	08005d58 	.word	0x08005d58

080047fc <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ffe5 	bl	80047dc <_ZN3ros11Subscriber_C1Ev>
 8004812:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	330c      	adds	r3, #12
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fdf5 	bl	800440c <_ZN13geometry_msgs7Vector3C1Ev>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	61da      	str	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	621a      	str	r2, [r3, #32]
  {
    topic_ = topic_name;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	609a      	str	r2, [r3, #8]
  };
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	08005cfc 	.word	0x08005cfc

08004844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fc33 	bl	80040bc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800485c:	3310      	adds	r3, #16
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004868:	3314      	adds	r3, #20
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
    index_ = 0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004874:	331c      	adds	r3, #28
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004880:	3318      	adds	r3, #24
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
  };
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b18      	cmp	r3, #24
 80048a0:	dc1c      	bgt.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80048aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d110      	bne.n	80048d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	60da      	str	r2, [r3, #12]
        return true;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e004      	b.n	80048de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e7df      	b.n	800489c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80048dc:	2300      	movs	r3, #0
  }
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b18      	cmp	r3, #24
 80048fc:	dc1b      	bgt.n	8004936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10e      	bne.n	800492e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	605a      	str	r2, [r3, #4]
        return true;
 800492a:	2301      	movs	r3, #1
 800492c:	e004      	b.n	8004938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e7e0      	b.n	80048f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_+0xe>
      }
    }
    return false;
 8004936:	2300      	movs	r3, #0
  }
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fcb0 	bl	80042b6 <_ZN13STM32Hardware4timeEv>
 8004956:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800495e:	330c      	adds	r3, #12
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800496a:	4293      	cmp	r3, r2
 800496c:	d905      	bls.n	800497a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004974:	3304      	adds	r3, #4
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004980:	3310      	adds	r3, #16
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      if (c_time > last_msg_timeout_time)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800498e:	3310      	adds	r3, #16
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	429a      	cmp	r2, r3
 8004996:	d905      	bls.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        mode_ = MODE_FIRST_FF;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800499e:	3310      	adds	r3, #16
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d014      	beq.n	80049d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x94>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fc7f 	bl	80042b6 <_ZN13STM32Hardware4timeEv>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad2      	subs	r2, r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 80049c4:	429a      	cmp	r2, r3
 80049c6:	bf8c      	ite	hi
 80049c8:	2301      	movhi	r3, #1
 80049ca:	2300      	movls	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x94>
          return SPIN_TIMEOUT;
 80049d2:	f06f 0301 	mvn.w	r3, #1
 80049d6:	e211      	b.n	8004dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
      int data = hardware_.read();
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fb8e 	bl	80040fe <_ZN13STM32Hardware4readEv>
 80049e2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f2c0 81eb 	blt.w	8004dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x47e>
      checksum_ += data;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80049fe:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a06:	3310      	adds	r3, #16
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b07      	cmp	r3, #7
 8004a0c:	d12a      	bne.n	8004a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
        message_in[index_++] = data;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a14:	331c      	adds	r3, #28
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	1c51      	adds	r1, r2, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a20:	331c      	adds	r3, #28
 8004a22:	6019      	str	r1, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	b2d9      	uxtb	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
        bytes_--;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a38:	3314      	adds	r3, #20
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1e5a      	subs	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a44:	3314      	adds	r3, #20
 8004a46:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a4e:	3314      	adds	r3, #20
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1a6      	bne.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_MSG_CHECKSUM;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a5c:	3310      	adds	r3, #16
 8004a5e:	2208      	movs	r2, #8
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e79f      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_FIRST_FF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d131      	bne.n	8004ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x192>
        if (data == 0xff)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2bff      	cmp	r3, #255	; 0xff
 8004a76:	d113      	bne.n	8004aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x15c>
          mode_++;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a7e:	3310      	adds	r3, #16
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004a8a:	3310      	adds	r3, #16
 8004a8c:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f103 0214 	add.w	r2, r3, #20
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004a9a:	3310      	adds	r3, #16
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e781      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fc06 	bl	80042b6 <_ZN13STM32Hardware4timeEv>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	bf8c      	ite	hi
 8004ab8:	2301      	movhi	r3, #1
 8004aba:	2300      	movls	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f43f af70 	beq.w	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          configured_ = false;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004aca:	3304      	adds	r3, #4
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 8004ad0:	f06f 0301 	mvn.w	r3, #1
 8004ad4:	e192      	b.n	8004dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004adc:	3310      	adds	r3, #16
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d123      	bne.n	8004b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        if (data == PROTOCOL_VER)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2bfe      	cmp	r3, #254	; 0xfe
 8004ae8:	d10b      	bne.n	8004b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
          mode_++;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004af0:	3310      	adds	r3, #16
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004afc:	3310      	adds	r3, #16
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e750      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_FIRST_FF;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b08:	3310      	adds	r3, #16
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004b14:	3304      	adds	r3, #4
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f083 0301 	eor.w	r3, r3, #1
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f43f af40 	beq.w	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f96d 	bl	8004e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004b2a:	e73b      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b32:	3310      	adds	r3, #16
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d11c      	bne.n	8004b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x230>
        bytes_ = data;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b40:	3314      	adds	r3, #20
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	601a      	str	r2, [r3, #0]
        index_ = 0;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b4c:	331c      	adds	r3, #28
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
        mode_++;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b58:	3310      	adds	r3, #16
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b64:	3310      	adds	r3, #16
 8004b66:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e717      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d118      	bne.n	8004bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x270>
        bytes_ += data << 8;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b88:	3314      	adds	r3, #20
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	441a      	add	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004b98:	3314      	adds	r3, #20
 8004b9a:	601a      	str	r2, [r3, #0]
        mode_++;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004ba2:	3310      	adds	r3, #16
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004bae:	3310      	adds	r3, #16
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e6f7      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004bba:	3310      	adds	r3, #16
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d11d      	bne.n	8004bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ba>
        if ((checksum_ % 256) == 255)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	425a      	negs	r2, r3
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	bf58      	it	pl
 8004bd2:	4253      	negpl	r3, r2
 8004bd4:	2bff      	cmp	r3, #255	; 0xff
 8004bd6:	d10b      	bne.n	8004bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ac>
          mode_++;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004bde:	3310      	adds	r3, #16
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004bea:	3310      	adds	r3, #16
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e6d9      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e6d2      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c04:	3310      	adds	r3, #16
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d116      	bne.n	8004c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f6>
        topic_ = data;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c12:	3318      	adds	r3, #24
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	601a      	str	r2, [r3, #0]
        mode_++;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c1e:	3310      	adds	r3, #16
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c2a:	3310      	adds	r3, #16
 8004c2c:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e6b4      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c40:	3310      	adds	r3, #16
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b06      	cmp	r3, #6
 8004c46:	d121      	bne.n	8004c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x348>
        topic_ += data << 8;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c4e:	3318      	adds	r3, #24
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	441a      	add	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c5e:	3318      	adds	r3, #24
 8004c60:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c68:	3310      	adds	r3, #16
 8004c6a:	2207      	movs	r2, #7
 8004c6c:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c74:	3314      	adds	r3, #20
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f47f ae93 	bne.w	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_MSG_CHECKSUM;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c84:	3310      	adds	r3, #16
 8004c86:	2208      	movs	r2, #8
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e68b      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004c92:	3310      	adds	r3, #16
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	f47f ae84 	bne.w	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        mode_ = MODE_FIRST_FF;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004ca2:	3310      	adds	r3, #16
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	425a      	negs	r2, r3
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	bf58      	it	pl
 8004cb8:	4253      	negpl	r3, r2
 8004cba:	2bff      	cmp	r3, #255	; 0xff
 8004cbc:	f47f ae72 	bne.w	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004cc6:	3318      	adds	r3, #24
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d114      	bne.n	8004cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b4>
            requestSyncTime();
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f898 	bl	8004e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f8b3 	bl	8004e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004cec:	330c      	adds	r3, #12
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	e081      	b.n	8004dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004cfe:	3318      	adds	r3, #24
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b0a      	cmp	r3, #10
 8004d04:	d107      	bne.n	8004d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
            syncTime(message_in);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f978 	bl	8005004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004d14:	e646      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004d1c:	3318      	adds	r3, #24
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d111      	bne.n	8004d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x404>
            req_param_resp.deserialize(message_in);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d2a:	3318      	adds	r3, #24
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe ffc8 	bl	8003cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d40:	3314      	adds	r3, #20
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e62d      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004d4e:	3318      	adds	r3, #24
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b0b      	cmp	r3, #11
 8004d54:	d106      	bne.n	8004d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x420>
            configured_ = false;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e61f      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
            if (subscribers[topic_ - 100])
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004d6a:	3318      	adds	r3, #24
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3b64      	subs	r3, #100	; 0x64
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f43f ae11 	beq.w	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
              subscribers[topic_ - 100]->callback(message_in);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004d88:	3318      	adds	r3, #24
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3b64      	subs	r3, #100	; 0x64
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	6858      	ldr	r0, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004da0:	3318      	adds	r3, #24
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3b64      	subs	r3, #100	; 0x64
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4798      	blx	r3
    while (true)
 8004dc0:	e5f0      	b.n	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        break;
 8004dc2:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004dca:	3304      	adds	r3, #4
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d013      	beq.n	8004dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b6>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004dd8:	3308      	adds	r3, #8
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d908      	bls.n	8004dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b6>
      requestSyncTime();
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f80b 	bl	8004e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004df4:	3308      	adds	r3, #8
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 8004dfa:	2300      	movs	r3, #0
  }
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004e0c:	f107 030c 	add.w	r3, r7, #12
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fac1 	bl	8003398 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f107 020c 	add.w	r2, r7, #12
 8004e20:	210a      	movs	r1, #10
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
    rt_time = hardware_.time();
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fa43 	bl	80042b6 <_ZN13STM32Hardware4timeEv>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
  }
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b08b      	sub	sp, #44	; 0x2c
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe fb93 	bl	8003578 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004e52:	2300      	movs	r3, #0
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	2b18      	cmp	r3, #24
 8004e5a:	dc5b      	bgt.n	8004f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e60:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d04f      	beq.n	8004f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e92:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e9a:	6859      	ldr	r1, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea0:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3308      	adds	r3, #8
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4798      	blx	r3
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eca:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4608      	mov	r0, r1
 8004edc:	4798      	blx	r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ee6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681c      	ldr	r4, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8004ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff f89d 	bl	800403a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004f00:	4601      	mov	r1, r0
 8004f02:	f107 030c 	add.w	r3, r7, #12
 8004f06:	461a      	mov	r2, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	3301      	adds	r3, #1
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
 8004f12:	e7a0      	b.n	8004e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004f14:	2300      	movs	r3, #0
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	2b18      	cmp	r3, #24
 8004f1c:	dc68      	bgt.n	8004ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d05b      	beq.n	8004fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4798      	blx	r3
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4608      	mov	r0, r1
 8004fa4:	4798      	blx	r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fae:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681c      	ldr	r4, [r3, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4798      	blx	r3
 8004fdc:	4601      	mov	r1, r0
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	3301      	adds	r3, #1
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	e793      	b.n	8004f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
  }
 8004ffc:	bf00      	nop
 8004ffe:	372c      	adds	r7, #44	; 0x2c
 8005000:	46bd      	mov	sp, r7
 8005002:	bd90      	pop	{r4, r7, pc}

08005004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800500e:	f107 0308 	add.w	r3, r7, #8
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe f9c0 	bl	8003398 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff f94a 	bl	80042b6 <_ZN13STM32Hardware4timeEv>
 8005022:	4602      	mov	r2, r0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800502e:	f107 0308 	add.w	r3, r7, #8
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fa1f 	bl	8003478 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4916      	ldr	r1, [pc, #88]	; (8005098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005040:	fba1 1303 	umull	r1, r3, r1, r3
 8005044:	099b      	lsrs	r3, r3, #6
 8005046:	4413      	add	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005050:	fba3 0302 	umull	r0, r3, r3, r2
 8005054:	099b      	lsrs	r3, r3, #6
 8005056:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800505a:	fb00 f303 	mul.w	r3, r0, r3
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	4a0e      	ldr	r2, [pc, #56]	; (800509c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	440b      	add	r3, r1
 8005068:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800506a:	f107 0308 	add.w	r3, r7, #8
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8a8 	bl	80051c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff f91a 	bl	80042b6 <_ZN13STM32Hardware4timeEv>
 8005082:	4602      	mov	r2, r0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800508a:	330c      	adds	r3, #12
 800508c:	601a      	str	r2, [r3, #0]
  }
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	10624dd3 	.word	0x10624dd3
 800509c:	000f4240 	.word	0x000f4240

080050a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b63      	cmp	r3, #99	; 0x63
 80050b0:	dd0b      	ble.n	80050ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050b8:	3304      	adds	r3, #4
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f083 0301 	eor.w	r3, r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e077      	b.n	80051ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	f602 6228 	addw	r2, r2, #3624	; 0xe28
 80050d6:	3207      	adds	r2, #7
 80050d8:	4611      	mov	r1, r2
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
 80050de:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	22ff      	movs	r2, #255	; 0xff
 80050e4:	f883 2e28 	strb.w	r2, [r3, #3624]	; 0xe28
    message_out[1] = PROTOCOL_VER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	22fe      	movs	r2, #254	; 0xfe
 80050ec:	f883 2e29 	strb.w	r2, [r3, #3625]	; 0xe29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f883 2e2a 	strb.w	r2, [r3, #3626]	; 0xe2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	121b      	asrs	r3, r3, #8
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f883 2e2b 	strb.w	r2, [r3, #3627]	; 0xe2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 2e2a 	ldrb.w	r2, [r3, #3626]	; 0xe2a
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 3e2b 	ldrb.w	r3, [r3, #3627]	; 0xe2b
 8005114:	4413      	add	r3, r2
 8005116:	b2db      	uxtb	r3, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	b2da      	uxtb	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f883 2e2c 	strb.w	r2, [r3, #3628]	; 0xe2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f883 2e2d 	strb.w	r2, [r3, #3629]	; 0xe2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	b21b      	sxth	r3, r3
 8005130:	121b      	asrs	r3, r3, #8
 8005132:	b2da      	uxtb	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f883 2e2e 	strb.w	r2, [r3, #3630]	; 0xe2e

    /* calculate checksum */
    int chk = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800513e:	2305      	movs	r3, #5
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3307      	adds	r3, #7
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	429a      	cmp	r2, r3
 800514a:	da0d      	bge.n	8005168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	4413      	add	r3, r2
 8005152:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	3301      	adds	r3, #1
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	e7ec      	b.n	8005142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3307      	adds	r3, #7
 800516c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	425a      	negs	r2, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	bf58      	it	pl
 8005178:	4253      	negpl	r3, r2
 800517a:	b2da      	uxtb	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1c59      	adds	r1, r3, #1
 8005180:	6179      	str	r1, [r7, #20]
 8005182:	43d2      	mvns	r2, r2
 8005184:	b2d1      	uxtb	r1, r2
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	460a      	mov	r2, r1
 800518c:	f883 2e28 	strb.w	r2, [r3, #3624]	; 0xe28

    if (l <= OUTPUT_SIZE)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005196:	dc0a      	bgt.n	80051ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	1d18      	adds	r0, r3, #4
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4619      	mov	r1, r3
 80051a6:	f7ff f835 	bl	8004214 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	e005      	b.n	80051ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80051ae:	4905      	ldr	r1, [pc, #20]	; (80051c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f849 	bl	8005248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	08005c74 	.word	0x08005c74

080051c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff f86d 	bl	80042b6 <_ZN13STM32Hardware4timeEv>
 80051dc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4915      	ldr	r1, [pc, #84]	; (800523c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80051e6:	fba1 1303 	umull	r1, r3, r1, r3
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	1e5a      	subs	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80051fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005208:	fb00 f303 	mul.w	r3, r0, r3
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	4a0c      	ldr	r2, [pc, #48]	; (8005240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	1aca      	subs	r2, r1, r3
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8005218:	4413      	add	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
    normalizeSecNSec(sec_offset, nsec_offset);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f603 421c 	addw	r2, r3, #3100	; 0xc1c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f7fd fe1c 	bl	8002e6c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	10624dd3 	.word	0x10624dd3
 8005240:	000f4240 	.word	0x000f4240
 8005244:	3b9aca00 	.word	0x3b9aca00

08005248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	2103      	movs	r1, #3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f804 	bl	8005264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	460b      	mov	r3, r1
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005272:	f107 0314 	add.w	r3, r7, #20
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fb42 	bl	8003900 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f107 0214 	add.w	r2, r7, #20
 800528e:	2107      	movs	r1, #7
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	4798      	blx	r3
  }
 8005294:	bf00      	nop
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <_Z41__static_initialization_and_destruction_0ii>:
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d116      	bne.n	80052da <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d111      	bne.n	80052da <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 80052b6:	480b      	ldr	r0, [pc, #44]	; (80052e4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80052b8:	f7ff fa00 	bl	80046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80052bc:	480a      	ldr	r0, [pc, #40]	; (80052e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80052be:	f7ff f809 	bl	80042d4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher pub_chat("AuCAR/chatter", &str_msg);
 80052c2:	2300      	movs	r3, #0
 80052c4:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80052c6:	4909      	ldr	r1, [pc, #36]	; (80052ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80052c8:	4809      	ldr	r0, [pc, #36]	; (80052f0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80052ca:	f7fe fe8b 	bl	8003fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Vector3> angle_sub("gimbal/angles", &angle_cb);
 80052ce:	2301      	movs	r3, #1
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80052d2:	4909      	ldr	r1, [pc, #36]	; (80052f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80052d4:	4809      	ldr	r0, [pc, #36]	; (80052fc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80052d6:	f7ff fa91 	bl	80047fc <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	200000a4 	.word	0x200000a4
 80052e8:	200011e4 	.word	0x200011e4
 80052ec:	08005cb0 	.word	0x08005cb0
 80052f0:	200011ec 	.word	0x200011ec
 80052f4:	080045f1 	.word	0x080045f1
 80052f8:	08005cc0 	.word	0x08005cc0
 80052fc:	20001200 	.word	0x20001200

08005300 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	330c      	adds	r3, #12
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff f8d2 	bl	80044ba <_ZN13geometry_msgs7Vector311deserializeEPh>
    this->cb_(msg);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	320c      	adds	r2, #12
 800531e:	4610      	mov	r0, r2
 8005320:	4798      	blx	r3
  }
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
  }
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	330c      	adds	r3, #12
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff f8e6 	bl	8004520 <_ZN13geometry_msgs7Vector37getTypeEv>
 8005354:	4603      	mov	r3, r0
  }
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	330c      	adds	r3, #12
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f8e6 	bl	800453c <_ZN13geometry_msgs7Vector36getMD5Ev>
 8005370:	4603      	mov	r3, r0
  }
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
    return configured_;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005388:	3304      	adds	r3, #4
 800538a:	781b      	ldrb	r3, [r3, #0]
  };
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <_GLOBAL__sub_I_nh>:
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
 800539c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80053a0:	2001      	movs	r0, #1
 80053a2:	f7ff ff7b 	bl	800529c <_Z41__static_initialization_and_destruction_0ii>
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <HAL_MspInit+0x4c>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <HAL_MspInit+0x4c>)
 80053b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053bc:	6453      	str	r3, [r2, #68]	; 0x44
 80053be:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <HAL_MspInit+0x4c>)
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <HAL_MspInit+0x4c>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <HAL_MspInit+0x4c>)
 80053d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d8:	6413      	str	r3, [r2, #64]	; 0x40
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_MspInit+0x4c>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40023800 	.word	0x40023800

080053f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005408:	d10d      	bne.n	8005426 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_TIM_Base_MspInit+0x3c>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	4a08      	ldr	r2, [pc, #32]	; (8005434 <HAL_TIM_Base_MspInit+0x3c>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6413      	str	r3, [r2, #64]	; 0x40
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_TIM_Base_MspInit+0x3c>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800

08005438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08c      	sub	sp, #48	; 0x30
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005440:	f107 031c 	add.w	r3, r7, #28
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a65      	ldr	r2, [pc, #404]	; (80055ec <HAL_UART_MspInit+0x1b4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d12d      	bne.n	80054b6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	4a63      	ldr	r2, [pc, #396]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 8005464:	f043 0310 	orr.w	r3, r3, #16
 8005468:	6453      	str	r3, [r2, #68]	; 0x44
 800546a:	4b61      	ldr	r3, [pc, #388]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	4b5d      	ldr	r3, [pc, #372]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	4a5c      	ldr	r2, [pc, #368]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6313      	str	r3, [r2, #48]	; 0x30
 8005486:	4b5a      	ldr	r3, [pc, #360]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005492:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005498:	2302      	movs	r3, #2
 800549a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800549c:	2301      	movs	r3, #1
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a0:	2303      	movs	r3, #3
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054a4:	2307      	movs	r3, #7
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a8:	f107 031c 	add.w	r3, r7, #28
 80054ac:	4619      	mov	r1, r3
 80054ae:	4851      	ldr	r0, [pc, #324]	; (80055f4 <HAL_UART_MspInit+0x1bc>)
 80054b0:	f7fb fd4c 	bl	8000f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80054b4:	e096      	b.n	80055e4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a4f      	ldr	r2, [pc, #316]	; (80055f8 <HAL_UART_MspInit+0x1c0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	f040 8091 	bne.w	80055e4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	4a49      	ldr	r2, [pc, #292]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 80054cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d0:	6413      	str	r3, [r2, #64]	; 0x40
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	4a42      	ldr	r2, [pc, #264]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	6313      	str	r3, [r2, #48]	; 0x30
 80054ee:	4b40      	ldr	r3, [pc, #256]	; (80055f0 <HAL_UART_MspInit+0x1b8>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80054fa:	230c      	movs	r3, #12
 80054fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fe:	2302      	movs	r3, #2
 8005500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005502:	2301      	movs	r3, #1
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005506:	2303      	movs	r3, #3
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800550a:	2307      	movs	r3, #7
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800550e:	f107 031c 	add.w	r3, r7, #28
 8005512:	4619      	mov	r1, r3
 8005514:	4837      	ldr	r0, [pc, #220]	; (80055f4 <HAL_UART_MspInit+0x1bc>)
 8005516:	f7fb fd19 	bl	8000f4c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800551a:	4b38      	ldr	r3, [pc, #224]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 800551c:	4a38      	ldr	r2, [pc, #224]	; (8005600 <HAL_UART_MspInit+0x1c8>)
 800551e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005520:	4b36      	ldr	r3, [pc, #216]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 8005522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005526:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005528:	4b34      	ldr	r3, [pc, #208]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800552e:	4b33      	ldr	r3, [pc, #204]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 8005530:	2200      	movs	r2, #0
 8005532:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005534:	4b31      	ldr	r3, [pc, #196]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 8005536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800553a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800553c:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 800553e:	2200      	movs	r2, #0
 8005540:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005542:	4b2e      	ldr	r3, [pc, #184]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 8005544:	2200      	movs	r2, #0
 8005546:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005548:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 800554a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800554e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005550:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 8005552:	2200      	movs	r2, #0
 8005554:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005556:	4b29      	ldr	r3, [pc, #164]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 8005558:	2200      	movs	r2, #0
 800555a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800555c:	4827      	ldr	r0, [pc, #156]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 800555e:	f7fb f95d 	bl	800081c <HAL_DMA_Init>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8005568:	f7fd fe22 	bl	80031b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a23      	ldr	r2, [pc, #140]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 8005570:	635a      	str	r2, [r3, #52]	; 0x34
 8005572:	4a22      	ldr	r2, [pc, #136]	; (80055fc <HAL_UART_MspInit+0x1c4>)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005578:	4b22      	ldr	r3, [pc, #136]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 800557a:	4a23      	ldr	r2, [pc, #140]	; (8005608 <HAL_UART_MspInit+0x1d0>)
 800557c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 8005580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005584:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005586:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 8005588:	2240      	movs	r2, #64	; 0x40
 800558a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800558c:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 800558e:	2200      	movs	r2, #0
 8005590:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 8005594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005598:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 800559c:	2200      	movs	r2, #0
 800559e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80055ac:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055b2:	4b14      	ldr	r3, [pc, #80]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80055b8:	4812      	ldr	r0, [pc, #72]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 80055ba:	f7fb f92f 	bl	800081c <HAL_DMA_Init>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80055c4:	f7fd fdf4 	bl	80031b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
 80055ce:	4a0d      	ldr	r2, [pc, #52]	; (8005604 <HAL_UART_MspInit+0x1cc>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80055d4:	2200      	movs	r2, #0
 80055d6:	2100      	movs	r1, #0
 80055d8:	2026      	movs	r0, #38	; 0x26
 80055da:	f7fb f8e8 	bl	80007ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80055de:	2026      	movs	r0, #38	; 0x26
 80055e0:	f7fb f901 	bl	80007e6 <HAL_NVIC_EnableIRQ>
}
 80055e4:	bf00      	nop
 80055e6:	3730      	adds	r7, #48	; 0x30
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40011000 	.word	0x40011000
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40020000 	.word	0x40020000
 80055f8:	40004400 	.word	0x40004400
 80055fc:	2000123c 	.word	0x2000123c
 8005600:	40026088 	.word	0x40026088
 8005604:	2000129c 	.word	0x2000129c
 8005608:	400260a0 	.word	0x400260a0

0800560c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800561a:	b480      	push	{r7}
 800561c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800561e:	e7fe      	b.n	800561e <HardFault_Handler+0x4>

08005620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005624:	e7fe      	b.n	8005624 <MemManage_Handler+0x4>

08005626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800562a:	e7fe      	b.n	800562a <BusFault_Handler+0x4>

0800562c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005630:	e7fe      	b.n	8005630 <UsageFault_Handler+0x4>

08005632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800564e:	b480      	push	{r7}
 8005650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005652:	bf00      	nop
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005660:	f7fa ffaa 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005664:	bf00      	nop
 8005666:	bd80      	pop	{r7, pc}

08005668 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800566c:	4802      	ldr	r0, [pc, #8]	; (8005678 <DMA1_Stream5_IRQHandler+0x10>)
 800566e:	f7fb fa05 	bl	8000a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	2000123c 	.word	0x2000123c

0800567c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005680:	4802      	ldr	r0, [pc, #8]	; (800568c <DMA1_Stream6_IRQHandler+0x10>)
 8005682:	f7fb f9fb 	bl	8000a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	2000129c 	.word	0x2000129c

08005690 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005694:	4802      	ldr	r0, [pc, #8]	; (80056a0 <USART2_IRQHandler+0x10>)
 8005696:	f7fc feb7 	bl	8002408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800569a:	bf00      	nop
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	2000137c 	.word	0x2000137c

080056a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
	return 1;
 80056a8:	2301      	movs	r3, #1
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <_kill>:

int _kill(int pid, int sig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80056be:	f000 f8b9 	bl	8005834 <__errno>
 80056c2:	4602      	mov	r2, r0
 80056c4:	2316      	movs	r3, #22
 80056c6:	6013      	str	r3, [r2, #0]
	return -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_exit>:

void _exit (int status)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056dc:	f04f 31ff 	mov.w	r1, #4294967295
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ffe7 	bl	80056b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80056e6:	e7fe      	b.n	80056e6 <_exit+0x12>

080056e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80056f0:	4b11      	ldr	r3, [pc, #68]	; (8005738 <_sbrk+0x50>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <_sbrk+0x16>
		heap_end = &end;
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <_sbrk+0x50>)
 80056fa:	4a10      	ldr	r2, [pc, #64]	; (800573c <_sbrk+0x54>)
 80056fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80056fe:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <_sbrk+0x50>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <_sbrk+0x50>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	466a      	mov	r2, sp
 800570e:	4293      	cmp	r3, r2
 8005710:	d907      	bls.n	8005722 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005712:	f000 f88f 	bl	8005834 <__errno>
 8005716:	4602      	mov	r2, r0
 8005718:	230c      	movs	r3, #12
 800571a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800571c:	f04f 33ff 	mov.w	r3, #4294967295
 8005720:	e006      	b.n	8005730 <_sbrk+0x48>
	}

	heap_end += incr;
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <_sbrk+0x50>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	4a03      	ldr	r2, [pc, #12]	; (8005738 <_sbrk+0x50>)
 800572c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800572e:	68fb      	ldr	r3, [r7, #12]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	2000122c 	.word	0x2000122c
 800573c:	200013c0 	.word	0x200013c0

08005740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <SystemInit+0x60>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <SystemInit+0x60>)
 800574c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005754:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <SystemInit+0x64>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <SystemInit+0x64>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005760:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <SystemInit+0x64>)
 8005762:	2200      	movs	r2, #0
 8005764:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <SystemInit+0x64>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <SystemInit+0x64>)
 800576c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005774:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <SystemInit+0x64>)
 8005778:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <SystemInit+0x68>)
 800577a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <SystemInit+0x64>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <SystemInit+0x64>)
 8005782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005786:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <SystemInit+0x64>)
 800578a:	2200      	movs	r2, #0
 800578c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <SystemInit+0x60>)
 8005790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005794:	609a      	str	r2, [r3, #8]
#endif
}
 8005796:	bf00      	nop
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000ed00 	.word	0xe000ed00
 80057a4:	40023800 	.word	0x40023800
 80057a8:	24003010 	.word	0x24003010

080057ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80057ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80057b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80057b2:	e003      	b.n	80057bc <LoopCopyDataInit>

080057b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80057b4:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80057b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057ba:	3104      	adds	r1, #4

080057bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057bc:	480b      	ldr	r0, [pc, #44]	; (80057ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80057c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057c4:	d3f6      	bcc.n	80057b4 <CopyDataInit>
  ldr  r2, =_sbss
 80057c6:	4a0b      	ldr	r2, [pc, #44]	; (80057f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80057c8:	e002      	b.n	80057d0 <LoopFillZerobss>

080057ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057cc:	f842 3b04 	str.w	r3, [r2], #4

080057d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80057d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80057d4:	d3f9      	bcc.n	80057ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057d6:	f7ff ffb3 	bl	8005740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057da:	f000 f831 	bl	8005840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057de:	f7fd fb71 	bl	8002ec4 <main>
  bx  lr    
 80057e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80057e8:	08005e20 	.word	0x08005e20
  ldr  r0, =_sdata
 80057ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80057f0:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80057f4:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80057f8:	200013c0 	.word	0x200013c0

080057fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057fc:	e7fe      	b.n	80057fc <ADC_IRQHandler>

080057fe <__cxa_pure_virtual>:
 80057fe:	b508      	push	{r3, lr}
 8005800:	f000 f80c 	bl	800581c <_ZSt9terminatev>

08005804 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005804:	b508      	push	{r3, lr}
 8005806:	4780      	blx	r0
 8005808:	f000 f80d 	bl	8005826 <abort>

0800580c <_ZSt13get_terminatev>:
 800580c:	4b02      	ldr	r3, [pc, #8]	; (8005818 <_ZSt13get_terminatev+0xc>)
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	f3bf 8f5b 	dmb	ish
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	2000001c 	.word	0x2000001c

0800581c <_ZSt9terminatev>:
 800581c:	b508      	push	{r3, lr}
 800581e:	f7ff fff5 	bl	800580c <_ZSt13get_terminatev>
 8005822:	f7ff ffef 	bl	8005804 <_ZN10__cxxabiv111__terminateEPFvvE>

08005826 <abort>:
 8005826:	b508      	push	{r3, lr}
 8005828:	2006      	movs	r0, #6
 800582a:	f000 f871 	bl	8005910 <raise>
 800582e:	2001      	movs	r0, #1
 8005830:	f7ff ff50 	bl	80056d4 <_exit>

08005834 <__errno>:
 8005834:	4b01      	ldr	r3, [pc, #4]	; (800583c <__errno+0x8>)
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20000020 	.word	0x20000020

08005840 <__libc_init_array>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	4e0d      	ldr	r6, [pc, #52]	; (8005878 <__libc_init_array+0x38>)
 8005844:	4c0d      	ldr	r4, [pc, #52]	; (800587c <__libc_init_array+0x3c>)
 8005846:	1ba4      	subs	r4, r4, r6
 8005848:	10a4      	asrs	r4, r4, #2
 800584a:	2500      	movs	r5, #0
 800584c:	42a5      	cmp	r5, r4
 800584e:	d109      	bne.n	8005864 <__libc_init_array+0x24>
 8005850:	4e0b      	ldr	r6, [pc, #44]	; (8005880 <__libc_init_array+0x40>)
 8005852:	4c0c      	ldr	r4, [pc, #48]	; (8005884 <__libc_init_array+0x44>)
 8005854:	f000 f960 	bl	8005b18 <_init>
 8005858:	1ba4      	subs	r4, r4, r6
 800585a:	10a4      	asrs	r4, r4, #2
 800585c:	2500      	movs	r5, #0
 800585e:	42a5      	cmp	r5, r4
 8005860:	d105      	bne.n	800586e <__libc_init_array+0x2e>
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005868:	4798      	blx	r3
 800586a:	3501      	adds	r5, #1
 800586c:	e7ee      	b.n	800584c <__libc_init_array+0xc>
 800586e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005872:	4798      	blx	r3
 8005874:	3501      	adds	r5, #1
 8005876:	e7f2      	b.n	800585e <__libc_init_array+0x1e>
 8005878:	08005e14 	.word	0x08005e14
 800587c:	08005e14 	.word	0x08005e14
 8005880:	08005e14 	.word	0x08005e14
 8005884:	08005e1c 	.word	0x08005e1c

08005888 <memcpy>:
 8005888:	b510      	push	{r4, lr}
 800588a:	1e43      	subs	r3, r0, #1
 800588c:	440a      	add	r2, r1
 800588e:	4291      	cmp	r1, r2
 8005890:	d100      	bne.n	8005894 <memcpy+0xc>
 8005892:	bd10      	pop	{r4, pc}
 8005894:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589c:	e7f7      	b.n	800588e <memcpy+0x6>

0800589e <memset>:
 800589e:	4402      	add	r2, r0
 80058a0:	4603      	mov	r3, r0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d100      	bne.n	80058a8 <memset+0xa>
 80058a6:	4770      	bx	lr
 80058a8:	f803 1b01 	strb.w	r1, [r3], #1
 80058ac:	e7f9      	b.n	80058a2 <memset+0x4>
	...

080058b0 <realloc>:
 80058b0:	4b02      	ldr	r3, [pc, #8]	; (80058bc <realloc+0xc>)
 80058b2:	460a      	mov	r2, r1
 80058b4:	4601      	mov	r1, r0
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	f000 b8a0 	b.w	80059fc <_realloc_r>
 80058bc:	20000020 	.word	0x20000020

080058c0 <_raise_r>:
 80058c0:	291f      	cmp	r1, #31
 80058c2:	b538      	push	{r3, r4, r5, lr}
 80058c4:	4604      	mov	r4, r0
 80058c6:	460d      	mov	r5, r1
 80058c8:	d904      	bls.n	80058d4 <_raise_r+0x14>
 80058ca:	2316      	movs	r3, #22
 80058cc:	6003      	str	r3, [r0, #0]
 80058ce:	f04f 30ff 	mov.w	r0, #4294967295
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80058d6:	b112      	cbz	r2, 80058de <_raise_r+0x1e>
 80058d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058dc:	b94b      	cbnz	r3, 80058f2 <_raise_r+0x32>
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 f830 	bl	8005944 <_getpid_r>
 80058e4:	462a      	mov	r2, r5
 80058e6:	4601      	mov	r1, r0
 80058e8:	4620      	mov	r0, r4
 80058ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ee:	f000 b817 	b.w	8005920 <_kill_r>
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d00a      	beq.n	800590c <_raise_r+0x4c>
 80058f6:	1c59      	adds	r1, r3, #1
 80058f8:	d103      	bne.n	8005902 <_raise_r+0x42>
 80058fa:	2316      	movs	r3, #22
 80058fc:	6003      	str	r3, [r0, #0]
 80058fe:	2001      	movs	r0, #1
 8005900:	e7e7      	b.n	80058d2 <_raise_r+0x12>
 8005902:	2400      	movs	r4, #0
 8005904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005908:	4628      	mov	r0, r5
 800590a:	4798      	blx	r3
 800590c:	2000      	movs	r0, #0
 800590e:	e7e0      	b.n	80058d2 <_raise_r+0x12>

08005910 <raise>:
 8005910:	4b02      	ldr	r3, [pc, #8]	; (800591c <raise+0xc>)
 8005912:	4601      	mov	r1, r0
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	f7ff bfd3 	b.w	80058c0 <_raise_r>
 800591a:	bf00      	nop
 800591c:	20000020 	.word	0x20000020

08005920 <_kill_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4c07      	ldr	r4, [pc, #28]	; (8005940 <_kill_r+0x20>)
 8005924:	2300      	movs	r3, #0
 8005926:	4605      	mov	r5, r0
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	f7ff fec1 	bl	80056b4 <_kill>
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	d102      	bne.n	800593c <_kill_r+0x1c>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	b103      	cbz	r3, 800593c <_kill_r+0x1c>
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	bd38      	pop	{r3, r4, r5, pc}
 800593e:	bf00      	nop
 8005940:	200013bc 	.word	0x200013bc

08005944 <_getpid_r>:
 8005944:	f7ff beae 	b.w	80056a4 <_getpid>

08005948 <_malloc_r>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	1ccd      	adds	r5, r1, #3
 800594c:	f025 0503 	bic.w	r5, r5, #3
 8005950:	3508      	adds	r5, #8
 8005952:	2d0c      	cmp	r5, #12
 8005954:	bf38      	it	cc
 8005956:	250c      	movcc	r5, #12
 8005958:	2d00      	cmp	r5, #0
 800595a:	4606      	mov	r6, r0
 800595c:	db01      	blt.n	8005962 <_malloc_r+0x1a>
 800595e:	42a9      	cmp	r1, r5
 8005960:	d903      	bls.n	800596a <_malloc_r+0x22>
 8005962:	230c      	movs	r3, #12
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	2000      	movs	r0, #0
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	f000 f87d 	bl	8005a68 <__malloc_lock>
 800596e:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <_malloc_r+0xac>)
 8005970:	6814      	ldr	r4, [r2, #0]
 8005972:	4621      	mov	r1, r4
 8005974:	b991      	cbnz	r1, 800599c <_malloc_r+0x54>
 8005976:	4c20      	ldr	r4, [pc, #128]	; (80059f8 <_malloc_r+0xb0>)
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	b91b      	cbnz	r3, 8005984 <_malloc_r+0x3c>
 800597c:	4630      	mov	r0, r6
 800597e:	f000 f863 	bl	8005a48 <_sbrk_r>
 8005982:	6020      	str	r0, [r4, #0]
 8005984:	4629      	mov	r1, r5
 8005986:	4630      	mov	r0, r6
 8005988:	f000 f85e 	bl	8005a48 <_sbrk_r>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d124      	bne.n	80059da <_malloc_r+0x92>
 8005990:	230c      	movs	r3, #12
 8005992:	6033      	str	r3, [r6, #0]
 8005994:	4630      	mov	r0, r6
 8005996:	f000 f868 	bl	8005a6a <__malloc_unlock>
 800599a:	e7e4      	b.n	8005966 <_malloc_r+0x1e>
 800599c:	680b      	ldr	r3, [r1, #0]
 800599e:	1b5b      	subs	r3, r3, r5
 80059a0:	d418      	bmi.n	80059d4 <_malloc_r+0x8c>
 80059a2:	2b0b      	cmp	r3, #11
 80059a4:	d90f      	bls.n	80059c6 <_malloc_r+0x7e>
 80059a6:	600b      	str	r3, [r1, #0]
 80059a8:	50cd      	str	r5, [r1, r3]
 80059aa:	18cc      	adds	r4, r1, r3
 80059ac:	4630      	mov	r0, r6
 80059ae:	f000 f85c 	bl	8005a6a <__malloc_unlock>
 80059b2:	f104 000b 	add.w	r0, r4, #11
 80059b6:	1d23      	adds	r3, r4, #4
 80059b8:	f020 0007 	bic.w	r0, r0, #7
 80059bc:	1ac3      	subs	r3, r0, r3
 80059be:	d0d3      	beq.n	8005968 <_malloc_r+0x20>
 80059c0:	425a      	negs	r2, r3
 80059c2:	50e2      	str	r2, [r4, r3]
 80059c4:	e7d0      	b.n	8005968 <_malloc_r+0x20>
 80059c6:	428c      	cmp	r4, r1
 80059c8:	684b      	ldr	r3, [r1, #4]
 80059ca:	bf16      	itet	ne
 80059cc:	6063      	strne	r3, [r4, #4]
 80059ce:	6013      	streq	r3, [r2, #0]
 80059d0:	460c      	movne	r4, r1
 80059d2:	e7eb      	b.n	80059ac <_malloc_r+0x64>
 80059d4:	460c      	mov	r4, r1
 80059d6:	6849      	ldr	r1, [r1, #4]
 80059d8:	e7cc      	b.n	8005974 <_malloc_r+0x2c>
 80059da:	1cc4      	adds	r4, r0, #3
 80059dc:	f024 0403 	bic.w	r4, r4, #3
 80059e0:	42a0      	cmp	r0, r4
 80059e2:	d005      	beq.n	80059f0 <_malloc_r+0xa8>
 80059e4:	1a21      	subs	r1, r4, r0
 80059e6:	4630      	mov	r0, r6
 80059e8:	f000 f82e 	bl	8005a48 <_sbrk_r>
 80059ec:	3001      	adds	r0, #1
 80059ee:	d0cf      	beq.n	8005990 <_malloc_r+0x48>
 80059f0:	6025      	str	r5, [r4, #0]
 80059f2:	e7db      	b.n	80059ac <_malloc_r+0x64>
 80059f4:	20001230 	.word	0x20001230
 80059f8:	20001234 	.word	0x20001234

080059fc <_realloc_r>:
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fe:	4607      	mov	r7, r0
 8005a00:	4614      	mov	r4, r2
 8005a02:	460e      	mov	r6, r1
 8005a04:	b921      	cbnz	r1, 8005a10 <_realloc_r+0x14>
 8005a06:	4611      	mov	r1, r2
 8005a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a0c:	f7ff bf9c 	b.w	8005948 <_malloc_r>
 8005a10:	b922      	cbnz	r2, 8005a1c <_realloc_r+0x20>
 8005a12:	f000 f82b 	bl	8005a6c <_free_r>
 8005a16:	4625      	mov	r5, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a1c:	f000 f874 	bl	8005b08 <_malloc_usable_size_r>
 8005a20:	42a0      	cmp	r0, r4
 8005a22:	d20f      	bcs.n	8005a44 <_realloc_r+0x48>
 8005a24:	4621      	mov	r1, r4
 8005a26:	4638      	mov	r0, r7
 8005a28:	f7ff ff8e 	bl	8005948 <_malloc_r>
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d0f2      	beq.n	8005a18 <_realloc_r+0x1c>
 8005a32:	4631      	mov	r1, r6
 8005a34:	4622      	mov	r2, r4
 8005a36:	f7ff ff27 	bl	8005888 <memcpy>
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f000 f815 	bl	8005a6c <_free_r>
 8005a42:	e7e9      	b.n	8005a18 <_realloc_r+0x1c>
 8005a44:	4635      	mov	r5, r6
 8005a46:	e7e7      	b.n	8005a18 <_realloc_r+0x1c>

08005a48 <_sbrk_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4c06      	ldr	r4, [pc, #24]	; (8005a64 <_sbrk_r+0x1c>)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4605      	mov	r5, r0
 8005a50:	4608      	mov	r0, r1
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	f7ff fe48 	bl	80056e8 <_sbrk>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d102      	bne.n	8005a62 <_sbrk_r+0x1a>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	b103      	cbz	r3, 8005a62 <_sbrk_r+0x1a>
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	200013bc 	.word	0x200013bc

08005a68 <__malloc_lock>:
 8005a68:	4770      	bx	lr

08005a6a <__malloc_unlock>:
 8005a6a:	4770      	bx	lr

08005a6c <_free_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4605      	mov	r5, r0
 8005a70:	2900      	cmp	r1, #0
 8005a72:	d045      	beq.n	8005b00 <_free_r+0x94>
 8005a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a78:	1f0c      	subs	r4, r1, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bfb8      	it	lt
 8005a7e:	18e4      	addlt	r4, r4, r3
 8005a80:	f7ff fff2 	bl	8005a68 <__malloc_lock>
 8005a84:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <_free_r+0x98>)
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	4610      	mov	r0, r2
 8005a8a:	b933      	cbnz	r3, 8005a9a <_free_r+0x2e>
 8005a8c:	6063      	str	r3, [r4, #4]
 8005a8e:	6014      	str	r4, [r2, #0]
 8005a90:	4628      	mov	r0, r5
 8005a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a96:	f7ff bfe8 	b.w	8005a6a <__malloc_unlock>
 8005a9a:	42a3      	cmp	r3, r4
 8005a9c:	d90c      	bls.n	8005ab8 <_free_r+0x4c>
 8005a9e:	6821      	ldr	r1, [r4, #0]
 8005aa0:	1862      	adds	r2, r4, r1
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bf04      	itt	eq
 8005aa6:	681a      	ldreq	r2, [r3, #0]
 8005aa8:	685b      	ldreq	r3, [r3, #4]
 8005aaa:	6063      	str	r3, [r4, #4]
 8005aac:	bf04      	itt	eq
 8005aae:	1852      	addeq	r2, r2, r1
 8005ab0:	6022      	streq	r2, [r4, #0]
 8005ab2:	6004      	str	r4, [r0, #0]
 8005ab4:	e7ec      	b.n	8005a90 <_free_r+0x24>
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	b10a      	cbz	r2, 8005ac0 <_free_r+0x54>
 8005abc:	42a2      	cmp	r2, r4
 8005abe:	d9fa      	bls.n	8005ab6 <_free_r+0x4a>
 8005ac0:	6819      	ldr	r1, [r3, #0]
 8005ac2:	1858      	adds	r0, r3, r1
 8005ac4:	42a0      	cmp	r0, r4
 8005ac6:	d10b      	bne.n	8005ae0 <_free_r+0x74>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	4401      	add	r1, r0
 8005acc:	1858      	adds	r0, r3, r1
 8005ace:	4282      	cmp	r2, r0
 8005ad0:	6019      	str	r1, [r3, #0]
 8005ad2:	d1dd      	bne.n	8005a90 <_free_r+0x24>
 8005ad4:	6810      	ldr	r0, [r2, #0]
 8005ad6:	6852      	ldr	r2, [r2, #4]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	4401      	add	r1, r0
 8005adc:	6019      	str	r1, [r3, #0]
 8005ade:	e7d7      	b.n	8005a90 <_free_r+0x24>
 8005ae0:	d902      	bls.n	8005ae8 <_free_r+0x7c>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	e7d3      	b.n	8005a90 <_free_r+0x24>
 8005ae8:	6820      	ldr	r0, [r4, #0]
 8005aea:	1821      	adds	r1, r4, r0
 8005aec:	428a      	cmp	r2, r1
 8005aee:	bf04      	itt	eq
 8005af0:	6811      	ldreq	r1, [r2, #0]
 8005af2:	6852      	ldreq	r2, [r2, #4]
 8005af4:	6062      	str	r2, [r4, #4]
 8005af6:	bf04      	itt	eq
 8005af8:	1809      	addeq	r1, r1, r0
 8005afa:	6021      	streq	r1, [r4, #0]
 8005afc:	605c      	str	r4, [r3, #4]
 8005afe:	e7c7      	b.n	8005a90 <_free_r+0x24>
 8005b00:	bd38      	pop	{r3, r4, r5, pc}
 8005b02:	bf00      	nop
 8005b04:	20001230 	.word	0x20001230

08005b08 <_malloc_usable_size_r>:
 8005b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b0c:	1f18      	subs	r0, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfbc      	itt	lt
 8005b12:	580b      	ldrlt	r3, [r1, r0]
 8005b14:	18c0      	addlt	r0, r0, r3
 8005b16:	4770      	bx	lr

08005b18 <_init>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr

08005b24 <_fini>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr


stm32f4_rosserial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006534  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d8  080069d8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e0  080069e0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080069ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000084  08006a70  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001430  08006a70  00021430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b66  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002971  00000000  00000000  00032c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  00035590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00036510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000239d7  00000000  00000000  00037390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbbb  00000000  00000000  0005ad67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4d1a  00000000  00000000  00066922  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b63c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  0013b6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000084 	.word	0x20000084
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080066e4 	.word	0x080066e4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000088 	.word	0x20000088
 8000204:	080066e4 	.word	0x080066e4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <HAL_Init+0x40>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_Init+0x40>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_Init+0x40>)
 8000d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f92b 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f808 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d88:	f005 f8f4 	bl	8005f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x54>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x58>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f943 	bl	8001042 <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00e      	b.n	8000de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d80a      	bhi.n	8000de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f000 f90b 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_InitTick+0x5c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000018 	.word	0x20000018
 8000df0:	20000004 	.word	0x20000004
 8000df4:	20000000 	.word	0x20000000

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	200012a8 	.word	0x200012a8

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	200012a8 	.word	0x200012a8

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff feda 	bl	8000e20 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e099      	b.n	80011ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2202      	movs	r2, #2
 8001084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001098:	e00f      	b.n	80010ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800109a:	f7ff fec1 	bl	8000e20 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d908      	bls.n	80010ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2220      	movs	r2, #32
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e078      	b.n	80011ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1e8      	bne.n	800109a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <HAL_DMA_Init+0x158>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2b04      	cmp	r3, #4
 8001112:	d107      	bne.n	8001124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4313      	orrs	r3, r2
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4313      	orrs	r3, r2
 8001122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f023 0307 	bic.w	r3, r3, #7
 800113a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	4313      	orrs	r3, r2
 8001144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	2b04      	cmp	r3, #4
 800114c:	d117      	bne.n	800117e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4313      	orrs	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00e      	beq.n	800117e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fa99 	bl	8001698 <DMA_CheckFifoParam>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2240      	movs	r2, #64	; 0x40
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800117a:	2301      	movs	r3, #1
 800117c:	e016      	b.n	80011ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fa50 	bl	800162c <DMA_CalcBaseAndBitshift>
 800118c:	4603      	mov	r3, r0
 800118e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	223f      	movs	r2, #63	; 0x3f
 8001196:	409a      	lsls	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	f010803f 	.word	0xf010803f

080011b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d101      	bne.n	80011de <HAL_DMA_Start_IT+0x26>
 80011da:	2302      	movs	r3, #2
 80011dc:	e048      	b.n	8001270 <HAL_DMA_Start_IT+0xb8>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d137      	bne.n	8001262 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2202      	movs	r2, #2
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 f9e2 	bl	80015d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001210:	223f      	movs	r2, #63	; 0x3f
 8001212:	409a      	lsls	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0216 	orr.w	r2, r2, #22
 8001226:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001236:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0208 	orr.w	r2, r2, #8
 800124e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e005      	b.n	800126e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800126a:	2302      	movs	r3, #2
 800126c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800126e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d004      	beq.n	8001296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00c      	b.n	80012b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2205      	movs	r2, #5
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012c8:	4b92      	ldr	r3, [pc, #584]	; (8001514 <HAL_DMA_IRQHandler+0x258>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a92      	ldr	r2, [pc, #584]	; (8001518 <HAL_DMA_IRQHandler+0x25c>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0a9b      	lsrs	r3, r3, #10
 80012d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e6:	2208      	movs	r2, #8
 80012e8:	409a      	lsls	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d01a      	beq.n	8001328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0204 	bic.w	r2, r2, #4
 800130e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	2208      	movs	r2, #8
 8001316:	409a      	lsls	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	2201      	movs	r2, #1
 800132e:	409a      	lsls	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d012      	beq.n	800135e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	2201      	movs	r2, #1
 800134c:	409a      	lsls	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f043 0202 	orr.w	r2, r3, #2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2204      	movs	r2, #4
 8001364:	409a      	lsls	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d012      	beq.n	8001394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00b      	beq.n	8001394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	2204      	movs	r2, #4
 8001382:	409a      	lsls	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f043 0204 	orr.w	r2, r3, #4
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	2210      	movs	r2, #16
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d043      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d03c      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b6:	2210      	movs	r2, #16
 80013b8:	409a      	lsls	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d018      	beq.n	80013fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d108      	bne.n	80013ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d024      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
 80013ea:	e01f      	b.n	800142c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01b      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
 80013fc:	e016      	b.n	800142c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0208 	bic.w	r2, r2, #8
 800141a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	2220      	movs	r2, #32
 8001432:	409a      	lsls	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 808e 	beq.w	800155a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8086 	beq.w	800155a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	2220      	movs	r2, #32
 8001454:	409a      	lsls	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b05      	cmp	r3, #5
 8001464:	d136      	bne.n	80014d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0216 	bic.w	r2, r2, #22
 8001474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <HAL_DMA_IRQHandler+0x1da>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0208 	bic.w	r2, r2, #8
 80014a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	223f      	movs	r2, #63	; 0x3f
 80014ac:	409a      	lsls	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d07d      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
        }
        return;
 80014d2:	e078      	b.n	80015c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01c      	beq.n	800151c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d108      	bne.n	8001502 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d030      	beq.n	800155a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
 8001500:	e02b      	b.n	800155a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d027      	beq.n	800155a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
 8001512:	e022      	b.n	800155a <HAL_DMA_IRQHandler+0x29e>
 8001514:	20000018 	.word	0x20000018
 8001518:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0210 	bic.w	r2, r2, #16
 8001538:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155e:	2b00      	cmp	r3, #0
 8001560:	d032      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d022      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3301      	adds	r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	429a      	cmp	r2, r3
 8001590:	d307      	bcc.n	80015a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f2      	bne.n	8001586 <HAL_DMA_IRQHandler+0x2ca>
 80015a0:	e000      	b.n	80015a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	4798      	blx	r3
 80015c4:	e000      	b.n	80015c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015c6:	bf00      	nop
    }
  }
}
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop

080015d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b40      	cmp	r3, #64	; 0x40
 80015fc:	d108      	bne.n	8001610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800160e:	e007      	b.n	8001620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	60da      	str	r2, [r3, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	3b10      	subs	r3, #16
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <DMA_CalcBaseAndBitshift+0x64>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <DMA_CalcBaseAndBitshift+0x68>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d909      	bls.n	800166e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001662:	f023 0303 	bic.w	r3, r3, #3
 8001666:	1d1a      	adds	r2, r3, #4
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	659a      	str	r2, [r3, #88]	; 0x58
 800166c:	e007      	b.n	800167e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001676:	f023 0303 	bic.w	r3, r3, #3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	aaaaaaab 	.word	0xaaaaaaab
 8001694:	0800689c 	.word	0x0800689c

08001698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d11f      	bne.n	80016f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d855      	bhi.n	8001764 <DMA_CheckFifoParam+0xcc>
 80016b8:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <DMA_CheckFifoParam+0x28>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	080016e3 	.word	0x080016e3
 80016c8:	080016d1 	.word	0x080016d1
 80016cc:	08001765 	.word	0x08001765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d045      	beq.n	8001768 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e0:	e042      	b.n	8001768 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ea:	d13f      	bne.n	800176c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f0:	e03c      	b.n	800176c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fa:	d121      	bne.n	8001740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d836      	bhi.n	8001770 <DMA_CheckFifoParam+0xd8>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <DMA_CheckFifoParam+0x70>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	0800171f 	.word	0x0800171f
 8001710:	08001719 	.word	0x08001719
 8001714:	08001731 	.word	0x08001731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
      break;
 800171c:	e02f      	b.n	800177e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d024      	beq.n	8001774 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800172e:	e021      	b.n	8001774 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001738:	d11e      	bne.n	8001778 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800173e:	e01b      	b.n	8001778 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d902      	bls.n	800174c <DMA_CheckFifoParam+0xb4>
 8001746:	2b03      	cmp	r3, #3
 8001748:	d003      	beq.n	8001752 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800174a:	e018      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
      break;
 8001750:	e015      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00e      	beq.n	800177c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
      break;
 8001762:	e00b      	b.n	800177c <DMA_CheckFifoParam+0xe4>
      break;
 8001764:	bf00      	nop
 8001766:	e00a      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 8001768:	bf00      	nop
 800176a:	e008      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 800176c:	bf00      	nop
 800176e:	e006      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 8001770:	bf00      	nop
 8001772:	e004      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 8001774:	bf00      	nop
 8001776:	e002      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;   
 8001778:	bf00      	nop
 800177a:	e000      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 800177c:	bf00      	nop
    }
  } 
  
  return status; 
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	e165      	b.n	8001a74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	f040 8154 	bne.w	8001a6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x4a>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d123      	bne.n	800181e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	69b9      	ldr	r1, [r7, #24]
 800181a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0203 	and.w	r2, r3, #3
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d00b      	beq.n	8001872 <HAL_GPIO_Init+0xe6>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001866:	2b11      	cmp	r3, #17
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b12      	cmp	r3, #18
 8001870:	d130      	bne.n	80018d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0201 	and.w	r2, r3, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80ae 	beq.w	8001a6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <HAL_GPIO_Init+0x2fc>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a5b      	ldr	r2, [pc, #364]	; (8001a88 <HAL_GPIO_Init+0x2fc>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_GPIO_Init+0x2fc>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192e:	4a57      	ldr	r2, [pc, #348]	; (8001a8c <HAL_GPIO_Init+0x300>)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_GPIO_Init+0x304>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d025      	beq.n	80019a6 <HAL_GPIO_Init+0x21a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <HAL_GPIO_Init+0x308>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d01f      	beq.n	80019a2 <HAL_GPIO_Init+0x216>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_GPIO_Init+0x30c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d019      	beq.n	800199e <HAL_GPIO_Init+0x212>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4b      	ldr	r2, [pc, #300]	; (8001a9c <HAL_GPIO_Init+0x310>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0x20e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <HAL_GPIO_Init+0x314>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00d      	beq.n	8001996 <HAL_GPIO_Init+0x20a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x318>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0x206>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_GPIO_Init+0x31c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_GPIO_Init+0x202>
 800198a:	2306      	movs	r3, #6
 800198c:	e00c      	b.n	80019a8 <HAL_GPIO_Init+0x21c>
 800198e:	2307      	movs	r3, #7
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x21c>
 8001992:	2305      	movs	r3, #5
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x21c>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x21c>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x21c>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x21c>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x21c>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_GPIO_Init+0x300>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <HAL_GPIO_Init+0x320>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ea:	4a30      	ldr	r2, [pc, #192]	; (8001aac <HAL_GPIO_Init+0x320>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_GPIO_Init+0x320>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a14:	4a25      	ldr	r2, [pc, #148]	; (8001aac <HAL_GPIO_Init+0x320>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_GPIO_Init+0x320>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3e:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <HAL_GPIO_Init+0x320>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_GPIO_Init+0x320>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a68:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_GPIO_Init+0x320>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f ae96 	bls.w	80017a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3724      	adds	r7, #36	; 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40021400 	.word	0x40021400
 8001aa8:	40021800 	.word	0x40021800
 8001aac:	40013c00 	.word	0x40013c00

08001ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0ca      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d90c      	bls.n	8001aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b64      	ldr	r3, [pc, #400]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b62      	ldr	r3, [pc, #392]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0b6      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1c:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a51      	ldr	r2, [pc, #324]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	494c      	ldr	r1, [pc, #304]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d044      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d119      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07d      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06d      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e065      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4933      	ldr	r1, [pc, #204]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7ff f93e 	bl	8000e20 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7ff f93a 	bl	8000e20 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e04d      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 020c 	and.w	r2, r3, #12
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1eb      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20c      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e030      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4915      	ldr	r1, [pc, #84]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	490d      	ldr	r1, [pc, #52]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c36:	f000 f851 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff f8a0 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	080069c0 	.word	0x080069c0
 8001c70:	20000018 	.word	0x20000018

08001c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000018 	.word	0x20000018

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c94:	4601      	mov	r1, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0a9b      	lsrs	r3, r3, #10
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	080069d0 	.word	0x080069d0

08001cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb8:	f7ff ffdc 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4601      	mov	r1, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0b5b      	lsrs	r3, r3, #13
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	080069d0 	.word	0x080069d0

08001cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf6:	4bc6      	ldr	r3, [pc, #792]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	f200 817e 	bhi.w	8002000 <HAL_RCC_GetSysClockFreq+0x324>
 8001d04:	a201      	add	r2, pc, #4	; (adr r2, 8001d0c <HAL_RCC_GetSysClockFreq+0x30>)
 8001d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0a:	bf00      	nop
 8001d0c:	08001d41 	.word	0x08001d41
 8001d10:	08002001 	.word	0x08002001
 8001d14:	08002001 	.word	0x08002001
 8001d18:	08002001 	.word	0x08002001
 8001d1c:	08001d47 	.word	0x08001d47
 8001d20:	08002001 	.word	0x08002001
 8001d24:	08002001 	.word	0x08002001
 8001d28:	08002001 	.word	0x08002001
 8001d2c:	08001d4d 	.word	0x08001d4d
 8001d30:	08002001 	.word	0x08002001
 8001d34:	08002001 	.word	0x08002001
 8001d38:	08002001 	.word	0x08002001
 8001d3c:	08001ea9 	.word	0x08001ea9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4bb4      	ldr	r3, [pc, #720]	; (8002014 <HAL_RCC_GetSysClockFreq+0x338>)
 8001d42:	613b      	str	r3, [r7, #16]
       break;
 8001d44:	e15f      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d46:	4bb3      	ldr	r3, [pc, #716]	; (8002014 <HAL_RCC_GetSysClockFreq+0x338>)
 8001d48:	613b      	str	r3, [r7, #16]
      break;
 8001d4a:	e15c      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d4c:	4bb0      	ldr	r3, [pc, #704]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d54:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d56:	4bae      	ldr	r3, [pc, #696]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04a      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d62:	4bab      	ldr	r3, [pc, #684]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	099b      	lsrs	r3, r3, #6
 8001d68:	f04f 0400 	mov.w	r4, #0
 8001d6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	ea03 0501 	and.w	r5, r3, r1
 8001d78:	ea04 0602 	and.w	r6, r4, r2
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	4632      	mov	r2, r6
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	0154      	lsls	r4, r2, #5
 8001d8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d8e:	014b      	lsls	r3, r1, #5
 8001d90:	4619      	mov	r1, r3
 8001d92:	4622      	mov	r2, r4
 8001d94:	1b49      	subs	r1, r1, r5
 8001d96:	eb62 0206 	sbc.w	r2, r2, r6
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	f04f 0400 	mov.w	r4, #0
 8001da2:	0194      	lsls	r4, r2, #6
 8001da4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001da8:	018b      	lsls	r3, r1, #6
 8001daa:	1a5b      	subs	r3, r3, r1
 8001dac:	eb64 0402 	sbc.w	r4, r4, r2
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	00e2      	lsls	r2, r4, #3
 8001dba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dbe:	00d9      	lsls	r1, r3, #3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4614      	mov	r4, r2
 8001dc4:	195b      	adds	r3, r3, r5
 8001dc6:	eb44 0406 	adc.w	r4, r4, r6
 8001dca:	f04f 0100 	mov.w	r1, #0
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	02a2      	lsls	r2, r4, #10
 8001dd4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dd8:	0299      	lsls	r1, r3, #10
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4614      	mov	r4, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	4621      	mov	r1, r4
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f04f 0400 	mov.w	r4, #0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4623      	mov	r3, r4
 8001dec:	f7fe fe32 	bl	8000a54 <__aeabi_uldivmod>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e049      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df8:	4b85      	ldr	r3, [pc, #532]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	f04f 0400 	mov.w	r4, #0
 8001e02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	ea03 0501 	and.w	r5, r3, r1
 8001e0e:	ea04 0602 	and.w	r6, r4, r2
 8001e12:	4629      	mov	r1, r5
 8001e14:	4632      	mov	r2, r6
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f04f 0400 	mov.w	r4, #0
 8001e1e:	0154      	lsls	r4, r2, #5
 8001e20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e24:	014b      	lsls	r3, r1, #5
 8001e26:	4619      	mov	r1, r3
 8001e28:	4622      	mov	r2, r4
 8001e2a:	1b49      	subs	r1, r1, r5
 8001e2c:	eb62 0206 	sbc.w	r2, r2, r6
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f04f 0400 	mov.w	r4, #0
 8001e38:	0194      	lsls	r4, r2, #6
 8001e3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e3e:	018b      	lsls	r3, r1, #6
 8001e40:	1a5b      	subs	r3, r3, r1
 8001e42:	eb64 0402 	sbc.w	r4, r4, r2
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	00e2      	lsls	r2, r4, #3
 8001e50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e54:	00d9      	lsls	r1, r3, #3
 8001e56:	460b      	mov	r3, r1
 8001e58:	4614      	mov	r4, r2
 8001e5a:	195b      	adds	r3, r3, r5
 8001e5c:	eb44 0406 	adc.w	r4, r4, r6
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	02a2      	lsls	r2, r4, #10
 8001e6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e6e:	0299      	lsls	r1, r3, #10
 8001e70:	460b      	mov	r3, r1
 8001e72:	4614      	mov	r4, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	4621      	mov	r1, r4
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f04f 0400 	mov.w	r4, #0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4623      	mov	r3, r4
 8001e82:	f7fe fde7 	bl	8000a54 <__aeabi_uldivmod>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e8c:	4b60      	ldr	r3, [pc, #384]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	613b      	str	r3, [r7, #16]
      break;
 8001ea6:	e0ae      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eb0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb2:	4b57      	ldr	r3, [pc, #348]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d04a      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebe:	4b54      	ldr	r3, [pc, #336]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	f04f 0400 	mov.w	r4, #0
 8001ec8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	ea03 0501 	and.w	r5, r3, r1
 8001ed4:	ea04 0602 	and.w	r6, r4, r2
 8001ed8:	4629      	mov	r1, r5
 8001eda:	4632      	mov	r2, r6
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	f04f 0400 	mov.w	r4, #0
 8001ee4:	0154      	lsls	r4, r2, #5
 8001ee6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001eea:	014b      	lsls	r3, r1, #5
 8001eec:	4619      	mov	r1, r3
 8001eee:	4622      	mov	r2, r4
 8001ef0:	1b49      	subs	r1, r1, r5
 8001ef2:	eb62 0206 	sbc.w	r2, r2, r6
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f04f 0400 	mov.w	r4, #0
 8001efe:	0194      	lsls	r4, r2, #6
 8001f00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f04:	018b      	lsls	r3, r1, #6
 8001f06:	1a5b      	subs	r3, r3, r1
 8001f08:	eb64 0402 	sbc.w	r4, r4, r2
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	00e2      	lsls	r2, r4, #3
 8001f16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f1a:	00d9      	lsls	r1, r3, #3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4614      	mov	r4, r2
 8001f20:	195b      	adds	r3, r3, r5
 8001f22:	eb44 0406 	adc.w	r4, r4, r6
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	02a2      	lsls	r2, r4, #10
 8001f30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f34:	0299      	lsls	r1, r3, #10
 8001f36:	460b      	mov	r3, r1
 8001f38:	4614      	mov	r4, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f04f 0400 	mov.w	r4, #0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4623      	mov	r3, r4
 8001f48:	f7fe fd84 	bl	8000a54 <__aeabi_uldivmod>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	460c      	mov	r4, r1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e049      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	f04f 0400 	mov.w	r4, #0
 8001f5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	ea03 0501 	and.w	r5, r3, r1
 8001f6a:	ea04 0602 	and.w	r6, r4, r2
 8001f6e:	4629      	mov	r1, r5
 8001f70:	4632      	mov	r2, r6
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	0154      	lsls	r4, r2, #5
 8001f7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f80:	014b      	lsls	r3, r1, #5
 8001f82:	4619      	mov	r1, r3
 8001f84:	4622      	mov	r2, r4
 8001f86:	1b49      	subs	r1, r1, r5
 8001f88:	eb62 0206 	sbc.w	r2, r2, r6
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	f04f 0400 	mov.w	r4, #0
 8001f94:	0194      	lsls	r4, r2, #6
 8001f96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f9a:	018b      	lsls	r3, r1, #6
 8001f9c:	1a5b      	subs	r3, r3, r1
 8001f9e:	eb64 0402 	sbc.w	r4, r4, r2
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	00e2      	lsls	r2, r4, #3
 8001fac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fb0:	00d9      	lsls	r1, r3, #3
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	195b      	adds	r3, r3, r5
 8001fb8:	eb44 0406 	adc.w	r4, r4, r6
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	02a2      	lsls	r2, r4, #10
 8001fc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001fca:	0299      	lsls	r1, r3, #10
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4614      	mov	r4, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f04f 0400 	mov.w	r4, #0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4623      	mov	r3, r4
 8001fde:	f7fe fd39 	bl	8000a54 <__aeabi_uldivmod>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	0f1b      	lsrs	r3, r3, #28
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	613b      	str	r3, [r7, #16]
      break;
 8001ffe:	e002      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HAL_RCC_GetSysClockFreq+0x338>)
 8002002:	613b      	str	r3, [r7, #16]
      break;
 8002004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002006:	693b      	ldr	r3, [r7, #16]
}
 8002008:	4618      	mov	r0, r3
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	00f42400 	.word	0x00f42400

08002018 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8083 	beq.w	8002138 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002032:	4b95      	ldr	r3, [pc, #596]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b04      	cmp	r3, #4
 800203c:	d019      	beq.n	8002072 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800203e:	4b92      	ldr	r3, [pc, #584]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002046:	2b08      	cmp	r3, #8
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800204a:	4b8f      	ldr	r3, [pc, #572]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002056:	d00c      	beq.n	8002072 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002058:	4b8b      	ldr	r3, [pc, #556]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d112      	bne.n	800208a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002064:	4b88      	ldr	r3, [pc, #544]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002070:	d10b      	bne.n	800208a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	4b85      	ldr	r3, [pc, #532]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d05b      	beq.n	8002136 <HAL_RCC_OscConfig+0x11e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d157      	bne.n	8002136 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e216      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x8a>
 8002094:	4b7c      	ldr	r3, [pc, #496]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a7b      	ldr	r2, [pc, #492]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e01d      	b.n	80020de <HAL_RCC_OscConfig+0xc6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020aa:	d10c      	bne.n	80020c6 <HAL_RCC_OscConfig+0xae>
 80020ac:	4b76      	ldr	r3, [pc, #472]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a75      	ldr	r2, [pc, #468]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b73      	ldr	r3, [pc, #460]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a72      	ldr	r2, [pc, #456]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e00b      	b.n	80020de <HAL_RCC_OscConfig+0xc6>
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6f      	ldr	r2, [pc, #444]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b6d      	ldr	r3, [pc, #436]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6c      	ldr	r2, [pc, #432]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d013      	beq.n	800210e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7fe fe9b 	bl	8000e20 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ee:	f7fe fe97 	bl	8000e20 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b64      	cmp	r3, #100	; 0x64
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1db      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0xd6>
 800210c:	e014      	b.n	8002138 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7fe fe87 	bl	8000e20 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002116:	f7fe fe83 	bl	8000e20 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1c7      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002128:	4b57      	ldr	r3, [pc, #348]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0xfe>
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d06f      	beq.n	8002224 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002150:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002158:	2b08      	cmp	r3, #8
 800215a:	d105      	bne.n	8002168 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800215c:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002168:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d11c      	bne.n	80021ae <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002174:	4b44      	ldr	r3, [pc, #272]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d116      	bne.n	80021ae <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002180:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_OscConfig+0x180>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d001      	beq.n	8002198 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e18f      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4938      	ldr	r1, [pc, #224]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ac:	e03a      	b.n	8002224 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d020      	beq.n	80021f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b6:	4b35      	ldr	r3, [pc, #212]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7fe fe30 	bl	8000e20 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c4:	f7fe fe2c 	bl	8000e20 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e170      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4925      	ldr	r1, [pc, #148]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
 80021f6:	e015      	b.n	8002224 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe fe0f 	bl	8000e20 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002206:	f7fe fe0b 	bl	8000e20 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e14f      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d037      	beq.n	80022a0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d016      	beq.n	8002266 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0x278>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7fe fdef 	bl	8000e20 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002246:	f7fe fdeb 	bl	8000e20 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e12f      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800225a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x22e>
 8002264:	e01c      	b.n	80022a0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_RCC_OscConfig+0x278>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7fe fdd8 	bl	8000e20 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002272:	e00f      	b.n	8002294 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002274:	f7fe fdd4 	bl	8000e20 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d908      	bls.n	8002294 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e118      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	42470000 	.word	0x42470000
 8002290:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	4b8a      	ldr	r3, [pc, #552]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e9      	bne.n	8002274 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8097 	beq.w	80023dc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b83      	ldr	r3, [pc, #524]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a7e      	ldr	r2, [pc, #504]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b7c      	ldr	r3, [pc, #496]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022da:	2301      	movs	r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b79      	ldr	r3, [pc, #484]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d118      	bne.n	800231c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a75      	ldr	r2, [pc, #468]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fd93 	bl	8000e20 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fe:	f7fe fd8f 	bl	8000e20 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0d3      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x31a>
 8002324:	4b66      	ldr	r3, [pc, #408]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a65      	ldr	r2, [pc, #404]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
 8002330:	e01c      	b.n	800236c <HAL_RCC_OscConfig+0x354>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x33c>
 800233a:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a60      	ldr	r2, [pc, #384]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	4b5e      	ldr	r3, [pc, #376]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a5d      	ldr	r2, [pc, #372]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0x354>
 8002354:	4b5a      	ldr	r3, [pc, #360]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	4a59      	ldr	r2, [pc, #356]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	6713      	str	r3, [r2, #112]	; 0x70
 8002360:	4b57      	ldr	r3, [pc, #348]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a56      	ldr	r2, [pc, #344]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002366:	f023 0304 	bic.w	r3, r3, #4
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d015      	beq.n	80023a0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe fd54 	bl	8000e20 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe fd50 	bl	8000e20 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e092      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ee      	beq.n	800237c <HAL_RCC_OscConfig+0x364>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe fd3e 	bl	8000e20 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a6:	e00a      	b.n	80023be <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f7fe fd3a 	bl	8000e20 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e07c      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023be:	4b40      	ldr	r3, [pc, #256]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ee      	bne.n	80023a8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d0:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80023d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d068      	beq.n	80024b6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d060      	beq.n	80024b2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d145      	bne.n	8002484 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_RCC_OscConfig+0x4b0>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe fd0f 	bl	8000e20 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe fd0b 	bl	8000e20 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e04f      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002418:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	019b      	lsls	r3, r3, #6
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	3b01      	subs	r3, #1
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	071b      	lsls	r3, r3, #28
 8002450:	491b      	ldr	r1, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <HAL_RCC_OscConfig+0x4b0>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fce0 	bl	8000e20 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe fcdc 	bl	8000e20 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e020      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x44c>
 8002482:	e018      	b.n	80024b6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_OscConfig+0x4b0>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fcc9 	bl	8000e20 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe fcc5 	bl	8000e20 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e009      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_OscConfig+0x4a8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x47a>
 80024b0:	e001      	b.n	80024b6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000
 80024c8:	42470060 	.word	0x42470060

080024cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e01d      	b.n	800251a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f003 fd66 	bl	8005fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f000 f8e4 	bl	80026d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b06      	cmp	r3, #6
 8002542:	d007      	beq.n	8002554 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_TIM_ConfigClockSource+0x18>
 800257e:	2302      	movs	r3, #2
 8002580:	e0a6      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x166>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025a8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d067      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x120>
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d80b      	bhi.n	80025d6 <HAL_TIM_ConfigClockSource+0x6c>
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d073      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x140>
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d802      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x62>
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d06f      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025ca:	e078      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d06c      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x140>
 80025d0:	2b30      	cmp	r3, #48	; 0x30
 80025d2:	d06a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025d4:	e073      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025d6:	2b70      	cmp	r3, #112	; 0x70
 80025d8:	d00d      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x8c>
 80025da:	2b70      	cmp	r3, #112	; 0x70
 80025dc:	d804      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x7e>
 80025de:	2b50      	cmp	r3, #80	; 0x50
 80025e0:	d033      	beq.n	800264a <HAL_TIM_ConfigClockSource+0xe0>
 80025e2:	2b60      	cmp	r3, #96	; 0x60
 80025e4:	d041      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80025e6:	e06a      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ec:	d066      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0x152>
 80025ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f2:	d017      	beq.n	8002624 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80025f4:	e063      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f000 f981 	bl	800290c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002618:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	609a      	str	r2, [r3, #8]
      break;
 8002622:	e04c      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f000 f96a 	bl	800290c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002646:	609a      	str	r2, [r3, #8]
      break;
 8002648:	e039      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f8de 	bl	8002818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2150      	movs	r1, #80	; 0x50
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f937 	bl	80028d6 <TIM_ITRx_SetConfig>
      break;
 8002668:	e029      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	461a      	mov	r2, r3
 8002678:	f000 f8fd 	bl	8002876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2160      	movs	r1, #96	; 0x60
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f927 	bl	80028d6 <TIM_ITRx_SetConfig>
      break;
 8002688:	e019      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	461a      	mov	r2, r3
 8002698:	f000 f8be 	bl	8002818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2140      	movs	r1, #64	; 0x40
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f917 	bl	80028d6 <TIM_ITRx_SetConfig>
      break;
 80026a8:	e009      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 f90e 	bl	80028d6 <TIM_ITRx_SetConfig>
      break;
 80026ba:	e000      	b.n	80026be <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a40      	ldr	r2, [pc, #256]	; (80027ec <TIM_Base_SetConfig+0x114>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f6:	d00f      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3d      	ldr	r2, [pc, #244]	; (80027f0 <TIM_Base_SetConfig+0x118>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <TIM_Base_SetConfig+0x11c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <TIM_Base_SetConfig+0x120>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a3a      	ldr	r2, [pc, #232]	; (80027fc <TIM_Base_SetConfig+0x124>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d108      	bne.n	800272a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <TIM_Base_SetConfig+0x114>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02b      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d027      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <TIM_Base_SetConfig+0x118>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d023      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <TIM_Base_SetConfig+0x11c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <TIM_Base_SetConfig+0x120>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01b      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a29      	ldr	r2, [pc, #164]	; (80027fc <TIM_Base_SetConfig+0x124>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d017      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a28      	ldr	r2, [pc, #160]	; (8002800 <TIM_Base_SetConfig+0x128>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <TIM_Base_SetConfig+0x12c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a26      	ldr	r2, [pc, #152]	; (8002808 <TIM_Base_SetConfig+0x130>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a25      	ldr	r2, [pc, #148]	; (800280c <TIM_Base_SetConfig+0x134>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a24      	ldr	r2, [pc, #144]	; (8002810 <TIM_Base_SetConfig+0x138>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <TIM_Base_SetConfig+0x13c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d108      	bne.n	800279c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <TIM_Base_SetConfig+0x114>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_Base_SetConfig+0xf8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <TIM_Base_SetConfig+0x124>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d103      	bne.n	80027d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	615a      	str	r2, [r3, #20]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40000c00 	.word	0x40000c00
 80027fc:	40010400 	.word	0x40010400
 8002800:	40014000 	.word	0x40014000
 8002804:	40014400 	.word	0x40014400
 8002808:	40014800 	.word	0x40014800
 800280c:	40001800 	.word	0x40001800
 8002810:	40001c00 	.word	0x40001c00
 8002814:	40002000 	.word	0x40002000

08002818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f023 030a 	bic.w	r3, r3, #10
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002876:	b480      	push	{r7}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 0210 	bic.w	r2, r3, #16
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	031b      	lsls	r3, r3, #12
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f043 0307 	orr.w	r3, r3, #7
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	609a      	str	r2, [r3, #8]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	021a      	lsls	r2, r3, #8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	431a      	orrs	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002960:	2302      	movs	r3, #2
 8002962:	e032      	b.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e03f      	b.n	8002a68 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d106      	bne.n	8002a02 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f003 fb01 	bl	8006004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2224      	movs	r2, #36	; 0x24
 8002a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fd20 	bl	8003460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a3e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	f040 8083 	bne.w	8002b98 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_UART_Transmit+0x2e>
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07b      	b.n	8002b9a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Transmit+0x40>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e074      	b.n	8002b9a <HAL_UART_Transmit+0x12a>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2221      	movs	r2, #33	; 0x21
 8002ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ac6:	f7fe f9ab 	bl	8000e20 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ad8:	e042      	b.n	8002b60 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d122      	bne.n	8002b38 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2200      	movs	r2, #0
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fb2e 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e046      	b.n	8002b9a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	e017      	b.n	8002b60 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	e013      	b.n	8002b60 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fb0b 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e023      	b.n	8002b9a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	60ba      	str	r2, [r7, #8]
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1b7      	bne.n	8002ada <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 faf2 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e00a      	b.n	8002b9a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d153      	bne.n	8002c66 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_UART_Transmit_DMA+0x26>
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e04c      	b.n	8002c68 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_UART_Transmit_DMA+0x38>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e045      	b.n	8002c68 <HAL_UART_Transmit_DMA+0xc4>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	88fa      	ldrh	r2, [r7, #6]
 8002bee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_UART_Transmit_DMA+0xcc>)
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_UART_Transmit_DMA+0xd0>)
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_UART_Transmit_DMA+0xd4>)
 8002c1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	2200      	movs	r2, #0
 8002c22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3304      	adds	r3, #4
 8002c38:	461a      	mov	r2, r3
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	f7fe fabc 	bl	80011b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c48:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c60:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08002fd9 	.word	0x08002fd9
 8002c74:	0800302b 	.word	0x0800302b
 8002c78:	080030cb 	.word	0x080030cb

08002c7c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d166      	bne.n	8002d64 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_UART_Receive_DMA+0x26>
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e05f      	b.n	8002d66 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_UART_Receive_DMA+0x38>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e058      	b.n	8002d66 <HAL_UART_Receive_DMA+0xea>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2222      	movs	r2, #34	; 0x22
 8002cd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <HAL_UART_Receive_DMA+0xf4>)
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_UART_Receive_DMA+0xf8>)
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <HAL_UART_Receive_DMA+0xfc>)
 8002cec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	f7fe fa53 	bl	80011b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d5e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e000      	b.n	8002d66 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	08003047 	.word	0x08003047
 8002d74:	080030af 	.word	0x080030af
 8002d78:	080030cb 	.word	0x080030cb

08002d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10d      	bne.n	8002dce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_UART_IRQHandler+0x52>
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fac9 	bl	800335e <UART_Receive_IT>
      return;
 8002dcc:	e0cc      	b.n	8002f68 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80ab 	beq.w	8002f2c <HAL_UART_IRQHandler+0x1b0>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_UART_IRQHandler+0x70>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80a0 	beq.w	8002f2c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_UART_IRQHandler+0x90>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_UART_IRQHandler+0xb0>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	f043 0202 	orr.w	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_UART_IRQHandler+0xd0>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_UART_IRQHandler+0xf0>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	f043 0208 	orr.w	r2, r3, #8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d078      	beq.n	8002f66 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_UART_IRQHandler+0x112>
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fa68 	bl	800335e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x13a>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d031      	beq.n	8002f1a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9b1 	bl	800321e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d123      	bne.n	8002f12 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d013      	beq.n	8002f0a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_UART_IRQHandler+0x1f4>)
 8002ee8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe f9c2 	bl	8001278 <HAL_DMA_Abort_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f04:	4610      	mov	r0, r2
 8002f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f08:	e00e      	b.n	8002f28 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f85a 	bl	8002fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	e00a      	b.n	8002f28 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f856 	bl	8002fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e006      	b.n	8002f28 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f852 	bl	8002fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f26:	e01e      	b.n	8002f66 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	bf00      	nop
    return;
 8002f2a:	e01c      	b.n	8002f66 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_UART_IRQHandler+0x1cc>
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f99e 	bl	8003282 <UART_Transmit_IT>
    return;
 8002f46:	e00f      	b.n	8002f68 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_UART_IRQHandler+0x1ec>
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f9e6 	bl	800332e <UART_EndTransmit_IT>
    return;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002f66:	bf00      	nop
  }
}
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	0800325b 	.word	0x0800325b

08002f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d113      	bne.n	800301c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003008:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003018:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800301a:	e002      	b.n	8003022 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff ffa9 	bl	8002f74 <HAL_UART_TxCpltCallback>
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff ffa5 	bl	8002f88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11e      	bne.n	80030a0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003076:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003096:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff ff7b 	bl	8002f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff ff77 	bl	8002fb0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b80      	cmp	r3, #128	; 0x80
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b21      	cmp	r3, #33	; 0x21
 80030fc:	d108      	bne.n	8003110 <UART_DMAError+0x46>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2200      	movs	r2, #0
 8003108:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800310a:	68b8      	ldr	r0, [r7, #8]
 800310c:	f000 f871 	bl	80031f2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b22      	cmp	r3, #34	; 0x22
 8003130:	d108      	bne.n	8003144 <UART_DMAError+0x7a>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800313e:	68b8      	ldr	r0, [r7, #8]
 8003140:	f000 f86d 	bl	800321e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003150:	68b8      	ldr	r0, [r7, #8]
 8003152:	f7ff ff37 	bl	8002fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316e:	e02c      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	d028      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0x30>
 800317e:	f7fd fe4f 	bl	8000e20 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	429a      	cmp	r2, r3
 800318c:	d21d      	bcs.n	80031ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800319c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e00f      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d0c3      	beq.n	8003170 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003208:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003234:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff fea5 	bl	8002fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003282:	b480      	push	{r7}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b21      	cmp	r3, #33	; 0x21
 8003294:	d144      	bne.n	8003320 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329e:	d11a      	bne.n	80032d6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	1c9a      	adds	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	621a      	str	r2, [r3, #32]
 80032c8:	e00e      	b.n	80032e8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	621a      	str	r2, [r3, #32]
 80032d4:	e008      	b.n	80032e8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6211      	str	r1, [r2, #32]
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10f      	bne.n	800331c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fe10 	bl	8002f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b22      	cmp	r3, #34	; 0x22
 8003370:	d171      	bne.n	8003456 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337a:	d123      	bne.n	80033c4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10e      	bne.n	80033a8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	1c9a      	adds	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28
 80033a6:	e029      	b.n	80033fc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
 80033c2:	e01b      	b.n	80033fc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6858      	ldr	r0, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6291      	str	r1, [r2, #40]	; 0x28
 80033dc:	b2c2      	uxtb	r2, r0
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e00c      	b.n	80033fc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	1c58      	adds	r0, r3, #1
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	6288      	str	r0, [r1, #40]	; 0x28
 80033f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4619      	mov	r1, r3
 800340a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800340c:	2b00      	cmp	r3, #0
 800340e:	d120      	bne.n	8003452 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0220 	bic.w	r2, r2, #32
 800341e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800342e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fda7 	bl	8002f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e002      	b.n	8003458 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003460:	b5b0      	push	{r4, r5, r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034a0:	f023 030c 	bic.w	r3, r3, #12
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	430b      	orrs	r3, r1
 80034ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034cc:	f040 80e4 	bne.w	8003698 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4aab      	ldr	r2, [pc, #684]	; (8003784 <UART_SetConfig+0x324>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <UART_SetConfig+0x84>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4aaa      	ldr	r2, [pc, #680]	; (8003788 <UART_SetConfig+0x328>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d16c      	bne.n	80035be <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80034e4:	f7fe fbe6 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009a      	lsls	r2, r3, #2
 80034f2:	441a      	add	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	4aa3      	ldr	r2, [pc, #652]	; (800378c <UART_SetConfig+0x32c>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	011c      	lsls	r4, r3, #4
 8003508:	f7fe fbd4 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 800350c:	4602      	mov	r2, r0
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009a      	lsls	r2, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003522:	f7fe fbc7 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8003526:	4602      	mov	r2, r0
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009a      	lsls	r2, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	4a93      	ldr	r2, [pc, #588]	; (800378c <UART_SetConfig+0x32c>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2264      	movs	r2, #100	; 0x64
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	1aeb      	subs	r3, r5, r3
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	3332      	adds	r3, #50	; 0x32
 8003550:	4a8e      	ldr	r2, [pc, #568]	; (800378c <UART_SetConfig+0x32c>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800355e:	441c      	add	r4, r3
 8003560:	f7fe fba8 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8003564:	4602      	mov	r2, r0
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009a      	lsls	r2, r3, #2
 800356e:	441a      	add	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fbb2 f5f3 	udiv	r5, r2, r3
 800357a:	f7fe fb9b 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 800357e:	4602      	mov	r2, r0
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009a      	lsls	r2, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	4a7d      	ldr	r2, [pc, #500]	; (800378c <UART_SetConfig+0x32c>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2264      	movs	r2, #100	; 0x64
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	1aeb      	subs	r3, r5, r3
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	3332      	adds	r3, #50	; 0x32
 80035a8:	4a78      	ldr	r2, [pc, #480]	; (800378c <UART_SetConfig+0x32c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 0207 	and.w	r2, r3, #7
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4422      	add	r2, r4
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	e154      	b.n	8003868 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80035be:	f7fe fb65 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009a      	lsls	r2, r3, #2
 80035cc:	441a      	add	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	4a6c      	ldr	r2, [pc, #432]	; (800378c <UART_SetConfig+0x32c>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	011c      	lsls	r4, r3, #4
 80035e2:	f7fe fb53 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009a      	lsls	r2, r3, #2
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80035fc:	f7fe fb46 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003600:	4602      	mov	r2, r0
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009a      	lsls	r2, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	4a5d      	ldr	r2, [pc, #372]	; (800378c <UART_SetConfig+0x32c>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2264      	movs	r2, #100	; 0x64
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	1aeb      	subs	r3, r5, r3
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	3332      	adds	r3, #50	; 0x32
 800362a:	4a58      	ldr	r2, [pc, #352]	; (800378c <UART_SetConfig+0x32c>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003638:	441c      	add	r4, r3
 800363a:	f7fe fb27 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 800363e:	4602      	mov	r2, r0
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009a      	lsls	r2, r3, #2
 8003648:	441a      	add	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fbb2 f5f3 	udiv	r5, r2, r3
 8003654:	f7fe fb1a 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003658:	4602      	mov	r2, r0
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009a      	lsls	r2, r3, #2
 8003662:	441a      	add	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fbb2 f3f3 	udiv	r3, r2, r3
 800366e:	4a47      	ldr	r2, [pc, #284]	; (800378c <UART_SetConfig+0x32c>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	2264      	movs	r2, #100	; 0x64
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	1aeb      	subs	r3, r5, r3
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	3332      	adds	r3, #50	; 0x32
 8003682:	4a42      	ldr	r2, [pc, #264]	; (800378c <UART_SetConfig+0x32c>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	f003 0207 	and.w	r2, r3, #7
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4422      	add	r2, r4
 8003694:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003696:	e0e7      	b.n	8003868 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a39      	ldr	r2, [pc, #228]	; (8003784 <UART_SetConfig+0x324>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <UART_SetConfig+0x24c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a38      	ldr	r2, [pc, #224]	; (8003788 <UART_SetConfig+0x328>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d171      	bne.n	8003790 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80036ac:	f7fe fb02 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009a      	lsls	r2, r3, #2
 80036ba:	441a      	add	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	4a31      	ldr	r2, [pc, #196]	; (800378c <UART_SetConfig+0x32c>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	011c      	lsls	r4, r3, #4
 80036d0:	f7fe faf0 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80036ea:	f7fe fae3 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009a      	lsls	r2, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	4a21      	ldr	r2, [pc, #132]	; (800378c <UART_SetConfig+0x32c>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2264      	movs	r2, #100	; 0x64
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	1aeb      	subs	r3, r5, r3
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	3332      	adds	r3, #50	; 0x32
 8003718:	4a1c      	ldr	r2, [pc, #112]	; (800378c <UART_SetConfig+0x32c>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003724:	441c      	add	r4, r3
 8003726:	f7fe fac5 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 800372a:	4602      	mov	r2, r0
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003740:	f7fe fab8 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8003744:	4602      	mov	r2, r0
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009a      	lsls	r2, r3, #2
 800374e:	441a      	add	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <UART_SetConfig+0x32c>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	2264      	movs	r2, #100	; 0x64
 8003764:	fb02 f303 	mul.w	r3, r2, r3
 8003768:	1aeb      	subs	r3, r5, r3
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	3332      	adds	r3, #50	; 0x32
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <UART_SetConfig+0x32c>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	f003 020f 	and.w	r2, r3, #15
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4422      	add	r2, r4
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	e071      	b.n	8003868 <UART_SetConfig+0x408>
 8003784:	40011000 	.word	0x40011000
 8003788:	40011400 	.word	0x40011400
 800378c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003790:	f7fe fa7c 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003794:	4602      	mov	r2, r0
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009a      	lsls	r2, r3, #2
 800379e:	441a      	add	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	4a31      	ldr	r2, [pc, #196]	; (8003870 <UART_SetConfig+0x410>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	011c      	lsls	r4, r3, #4
 80037b4:	f7fe fa6a 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80037ce:	f7fe fa5d 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009a      	lsls	r2, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	4a21      	ldr	r2, [pc, #132]	; (8003870 <UART_SetConfig+0x410>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2264      	movs	r2, #100	; 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	1aeb      	subs	r3, r5, r3
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	3332      	adds	r3, #50	; 0x32
 80037fc:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <UART_SetConfig+0x410>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003808:	441c      	add	r4, r3
 800380a:	f7fe fa3f 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 800380e:	4602      	mov	r2, r0
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009a      	lsls	r2, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	fbb2 f5f3 	udiv	r5, r2, r3
 8003824:	f7fe fa32 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003828:	4602      	mov	r2, r0
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009a      	lsls	r2, r3, #2
 8003832:	441a      	add	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <UART_SetConfig+0x410>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	2264      	movs	r2, #100	; 0x64
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	1aeb      	subs	r3, r5, r3
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	3332      	adds	r3, #50	; 0x32
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <UART_SetConfig+0x410>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4422      	add	r2, r4
 8003864:	609a      	str	r2, [r3, #8]
}
 8003866:	e7ff      	b.n	8003868 <UART_SetConfig+0x408>
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bdb0      	pop	{r4, r5, r7, pc}
 8003870:	51eb851f 	.word	0x51eb851f

08003874 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0a5a      	lsrs	r2, r3, #9
 8003884:	490f      	ldr	r1, [pc, #60]	; (80038c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003886:	fba1 1202 	umull	r1, r2, r1, r2
 800388a:	09d2      	lsrs	r2, r2, #7
 800388c:	490e      	ldr	r1, [pc, #56]	; (80038c8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800388e:	fb01 f202 	mul.w	r2, r1, r2
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	0a5b      	lsrs	r3, r3, #9
 800389c:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	09db      	lsrs	r3, r3, #7
 80038a4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	00044b83 	.word	0x00044b83
 80038c8:	3b9aca00 	.word	0x3b9aca00

080038cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038d0:	f7fd fa40 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038d4:	f000 f810 	bl	80038f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038d8:	f000 f946 	bl	8003b68 <MX_GPIO_Init>
  MX_DMA_Init();
 80038dc:	f000 f91c 	bl	8003b18 <MX_DMA_Init>
  MX_TIM2_Init();
 80038e0:	f000 f878 	bl	80039d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80038e4:	f000 f8ee 	bl	8003ac4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80038e8:	f000 f8c2 	bl	8003a70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
ros_init();
 80038ec:	f001 fb38 	bl	8004f60 <ros_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ros_run();
 80038f0:	f001 fb58 	bl	8004fa4 <ros_run>
 80038f4:	e7fc      	b.n	80038f0 <main+0x24>
	...

080038f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b094      	sub	sp, #80	; 0x50
 80038fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038fe:	f107 031c 	add.w	r3, r7, #28
 8003902:	2234      	movs	r2, #52	; 0x34
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f002 fdaf 	bl	800646a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800390c:	f107 0308 	add.w	r3, r7, #8
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <SystemClock_Config+0xd4>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	4a29      	ldr	r2, [pc, #164]	; (80039cc <SystemClock_Config+0xd4>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6413      	str	r3, [r2, #64]	; 0x40
 800392c:	4b27      	ldr	r3, [pc, #156]	; (80039cc <SystemClock_Config+0xd4>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003938:	2300      	movs	r3, #0
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <SystemClock_Config+0xd8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003944:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <SystemClock_Config+0xd8>)
 8003946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <SystemClock_Config+0xd8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003958:	2301      	movs	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800395c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003960:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003962:	2302      	movs	r3, #2
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800396c:	2308      	movs	r3, #8
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003974:	2302      	movs	r3, #2
 8003976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003978:	2302      	movs	r3, #2
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800397c:	2302      	movs	r3, #2
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fb47 	bl	8002018 <HAL_RCC_OscConfig>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003990:	f000 f912 	bl	8003bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003994:	230f      	movs	r3, #15
 8003996:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8003998:	2303      	movs	r3, #3
 800399a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80039ac:	f107 0308 	add.w	r3, r7, #8
 80039b0:	2104      	movs	r1, #4
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe f87c 	bl	8001ab0 <HAL_RCC_ClockConfig>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80039be:	f000 f8fb 	bl	8003bb8 <Error_Handler>
  }
}
 80039c2:	bf00      	nop
 80039c4:	3750      	adds	r7, #80	; 0x50
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000

080039d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e8:	463b      	mov	r3, r7
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039f0:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <MX_TIM2_Init+0x98>)
 80039f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 80039f8:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <MX_TIM2_Init+0x98>)
 80039fa:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80039fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <MX_TIM2_Init+0x98>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8003a06:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <MX_TIM2_Init+0x98>)
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <MX_TIM2_Init+0x98>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <MX_TIM2_Init+0x98>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a1a:	4814      	ldr	r0, [pc, #80]	; (8003a6c <MX_TIM2_Init+0x98>)
 8003a1c:	f7fe fd56 	bl	80024cc <HAL_TIM_Base_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003a26:	f000 f8c7 	bl	8003bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a30:	f107 0308 	add.w	r3, r7, #8
 8003a34:	4619      	mov	r1, r3
 8003a36:	480d      	ldr	r0, [pc, #52]	; (8003a6c <MX_TIM2_Init+0x98>)
 8003a38:	f7fe fd97 	bl	800256a <HAL_TIM_ConfigClockSource>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003a42:	f000 f8b9 	bl	8003bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a4e:	463b      	mov	r3, r7
 8003a50:	4619      	mov	r1, r3
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <MX_TIM2_Init+0x98>)
 8003a54:	f7fe ff7a 	bl	800294c <HAL_TIMEx_MasterConfigSynchronization>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003a5e:	f000 f8ab 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200013ac 	.word	0x200013ac

08003a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003a76:	4a11      	ldr	r2, [pc, #68]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003a7c:	4a10      	ldr	r2, [pc, #64]	; (8003ac0 <MX_USART1_UART_Init+0x50>)
 8003a7e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a80:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003a94:	220c      	movs	r2, #12
 8003a96:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003aa4:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <MX_USART1_UART_Init+0x48>)
 8003aa6:	f7fe ff96 	bl	80029d6 <HAL_UART_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003ab0:	f000 f882 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	2000136c 	.word	0x2000136c
 8003abc:	40011000 	.word	0x40011000
 8003ac0:	000f4240 	.word	0x000f4240

08003ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <MX_USART2_UART_Init+0x50>)
 8003acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003ad0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003aea:	220c      	movs	r2, #12
 8003aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003afa:	4805      	ldr	r0, [pc, #20]	; (8003b10 <MX_USART2_UART_Init+0x4c>)
 8003afc:	f7fe ff6b 	bl	80029d6 <HAL_UART_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b06:	f000 f857 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	200013ec 	.word	0x200013ec
 8003b14:	40004400 	.word	0x40004400

08003b18 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <MX_DMA_Init+0x4c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <MX_DMA_Init+0x4c>)
 8003b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <MX_DMA_Init+0x4c>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	2010      	movs	r0, #16
 8003b40:	f7fd fa55 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b44:	2010      	movs	r0, #16
 8003b46:	f7fd fa6e 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	2011      	movs	r0, #17
 8003b50:	f7fd fa4d 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003b54:	2011      	movs	r0, #17
 8003b56:	f7fd fa66 	bl	8001026 <HAL_NVIC_EnableIRQ>

}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800

08003b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <MX_GPIO_Init+0x4c>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <MX_GPIO_Init+0x4c>)
 8003b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <MX_GPIO_Init+0x4c>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_GPIO_Init+0x4c>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <MX_GPIO_Init+0x4c>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_GPIO_Init+0x4c>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]

}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800

08003bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8003bf4:	463b      	mov	r3, r7
 8003bf6:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	15db      	asrs	r3, r3, #23
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8003c0e:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	0159      	lsls	r1, r3, #5
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	b2ca      	uxtb	r2, r1
 8003c40:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	10d9      	asrs	r1, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	b2ca      	uxtb	r2, r1
 8003c4e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	12d9      	asrs	r1, r3, #11
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	b2ca      	uxtb	r2, r1
 8003c5c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	b25a      	sxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	14db      	asrs	r3, r3, #19
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	4313      	orrs	r3, r2
 8003c72:	b259      	sxtb	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	b2ca      	uxtb	r2, r1
 8003c7c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	111b      	asrs	r3, r3, #4
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	6079      	str	r1, [r7, #4]
 8003c8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8003c92:	edd7 7a00 	vldr	s15, [r7]
 8003c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9e:	d508      	bpl.n	8003cb2 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	781a      	ldrb	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8003cb2:	2308      	movs	r3, #8
  }
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3303      	adds	r3, #3
 8003cd2:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	00da      	lsls	r2, r3, #3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	02da      	lsls	r2, r3, #11
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	04db      	lsls	r3, r3, #19
 8003d18:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8003d52:	05db      	lsls	r3, r3, #23
 8003d54:	431a      	orrs	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]

    return 8;
 8003d72:	2308      	movs	r3, #8
  }
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_ZN3ros3MsgC1Ev>:
class Msg
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <_ZN3ros3MsgC1Ev+0x1c>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	080069b0 	.word	0x080069b0

08003da0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
      data()
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ffe8 	bl	8003d80 <_ZN3ros3MsgC1Ev>
 8003db0:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff03 	bl	8003bc6 <_ZN3ros4TimeC1Ev>
    {
    }
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	08006998 	.word	0x08006998

08003dd0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	b2ca      	uxtb	r2, r1
 8003dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	0a19      	lsrs	r1, r3, #8
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3301      	adds	r3, #1
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	0c19      	lsrs	r1, r3, #16
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3302      	adds	r3, #2
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	b2ca      	uxtb	r2, r1
 8003e0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	0e19      	lsrs	r1, r3, #24
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3303      	adds	r3, #3
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	b2ca      	uxtb	r2, r1
 8003e20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6899      	ldr	r1, [r3, #8]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	b2ca      	uxtb	r2, r1
 8003e34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	0a19      	lsrs	r1, r3, #8
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	b2ca      	uxtb	r2, r1
 8003e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	0c19      	lsrs	r1, r3, #16
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3302      	adds	r3, #2
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	4413      	add	r3, r2
 8003e56:	b2ca      	uxtb	r2, r1
 8003e58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0e19      	lsrs	r1, r3, #24
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3303      	adds	r3, #3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	4413      	add	r3, r2
 8003e68:	b2ca      	uxtb	r2, r1
 8003e6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e72:	68fb      	ldr	r3, [r7, #12]
    }
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	440b      	add	r3, r1
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	6839      	ldr	r1, [r7, #0]
 8003ebc:	440b      	add	r3, r1
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3303      	adds	r3, #3
 8003ed0:	6839      	ldr	r1, [r7, #0]
 8003ed2:	440b      	add	r3, r1
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	061b      	lsls	r3, r3, #24
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	440b      	add	r3, r1
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3302      	adds	r3, #2
 8003f10:	6839      	ldr	r1, [r7, #0]
 8003f12:	440b      	add	r3, r1
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3303      	adds	r3, #3
 8003f26:	6839      	ldr	r1, [r7, #0]
 8003f28:	440b      	add	r3, r1
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3304      	adds	r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]
     return offset;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
    }
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	080066fc 	.word	0x080066fc

08003f64 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	0800670c 	.word	0x0800670c

08003f80 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fef8 	bl	8003d80 <_ZN3ros3MsgC1Ev>
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	809a      	strh	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a06      	ldr	r2, [pc, #24]	; (8003fc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003fac:	611a      	str	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	615a      	str	r2, [r3, #20]
    {
    }
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08006980 	.word	0x08006980
 8003fc4:	08006730 	.word	0x08006730

08003fc8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8899      	ldrh	r1, [r3, #4]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	4413      	add	r3, r2
 8003fe0:	b2ca      	uxtb	r2, r1
 8003fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	889b      	ldrh	r3, [r3, #4]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	b299      	uxth	r1, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	b2ca      	uxtb	r2, r1
 8003ff6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc f900 	bl	8000208 <strlen>
 8004008:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	4413      	add	r3, r2
 8004010:	69b9      	ldr	r1, [r7, #24]
 8004012:	4618      	mov	r0, r3
 8004014:	f001 f8e4 	bl	80051e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3304      	adds	r3, #4
 800401c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	18d0      	adds	r0, r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4619      	mov	r1, r3
 800402c:	f002 fa12 	bl	8006454 <memcpy>
      offset += length_topic_name;
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc f8e3 	bl	8000208 <strlen>
 8004042:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	4413      	add	r3, r2
 800404a:	6979      	ldr	r1, [r7, #20]
 800404c:	4618      	mov	r0, r3
 800404e:	f001 f8c7 	bl	80051e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3304      	adds	r3, #4
 8004056:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	18d0      	adds	r0, r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4619      	mov	r1, r3
 8004066:	f002 f9f5 	bl	8006454 <memcpy>
      offset += length_message_type;
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	4413      	add	r3, r2
 8004070:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc f8c6 	bl	8000208 <strlen>
 800407c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	4413      	add	r3, r2
 8004084:	6939      	ldr	r1, [r7, #16]
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f8aa 	bl	80051e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3304      	adds	r3, #4
 8004090:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	18d0      	adds	r0, r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4619      	mov	r1, r3
 80040a0:	f002 f9d8 	bl	8006454 <memcpy>
      offset += length_md5sum;
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	4413      	add	r3, r2
 80040ba:	b2ca      	uxtb	r2, r1
 80040bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	0a19      	lsrs	r1, r3, #8
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3301      	adds	r3, #1
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	b2ca      	uxtb	r2, r1
 80040cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0c19      	lsrs	r1, r3, #16
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3302      	adds	r3, #2
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	4413      	add	r3, r2
 80040da:	b2ca      	uxtb	r2, r1
 80040dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0e19      	lsrs	r1, r3, #24
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3303      	adds	r3, #3
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	4413      	add	r3, r2
 80040ea:	b2ca      	uxtb	r2, r1
 80040ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3304      	adds	r3, #4
 80040f2:	61fb      	str	r3, [r7, #28]
      return offset;
 80040f4:	69fb      	ldr	r3, [r7, #28]
    }
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80040fe:	b580      	push	{r7, lr}
 8004100:	b08a      	sub	sp, #40	; 0x28
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	4413      	add	r3, r2
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	889b      	ldrh	r3, [r3, #4]
 800411e:	b21a      	sxth	r2, r3
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	3301      	adds	r3, #1
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	440b      	add	r3, r1
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	b21b      	sxth	r3, r3
 800412e:	4313      	orrs	r3, r2
 8004130:	b21b      	sxth	r3, r3
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	3302      	adds	r3, #2
 800413c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	441a      	add	r2, r3
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f001 f866 	bl	800521c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	3304      	adds	r3, #4
 8004154:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	4413      	add	r3, r2
 8004160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004162:	429a      	cmp	r2, r3
 8004164:	d20c      	bcs.n	8004180 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	441a      	add	r2, r3
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	3b01      	subs	r3, #1
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	440b      	add	r3, r1
 8004174:	7812      	ldrb	r2, [r2, #0]
 8004176:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	3301      	adds	r3, #1
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
 800417e:	e7ec      	b.n	800415a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4413      	add	r3, r2
 8004186:	3b01      	subs	r3, #1
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	4413      	add	r3, r2
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	3b01      	subs	r3, #1
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	441a      	add	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4413      	add	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	441a      	add	r2, r3
 80041aa:	f107 0310 	add.w	r3, r7, #16
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 f833 	bl	800521c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3304      	adds	r3, #4
 80041ba:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	6a3a      	ldr	r2, [r7, #32]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d20c      	bcs.n	80041e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	441a      	add	r2, r3
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	6839      	ldr	r1, [r7, #0]
 80041d8:	440b      	add	r3, r1
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	3301      	adds	r3, #1
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	e7ec      	b.n	80041c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	3b01      	subs	r3, #1
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	4413      	add	r3, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	441a      	add	r2, r3
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	4611      	mov	r1, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f001 f800 	bl	800521c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	3304      	adds	r3, #4
 8004220:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	429a      	cmp	r2, r3
 8004230:	d20c      	bcs.n	800424c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	441a      	add	r2, r3
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3b01      	subs	r3, #1
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	440b      	add	r3, r1
 8004240:	7812      	ldrb	r2, [r2, #0]
 8004242:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	e7ec      	b.n	8004226 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	3b01      	subs	r3, #1
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	4413      	add	r3, r2
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	3b01      	subs	r3, #1
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	441a      	add	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	440a      	add	r2, r1
 800427c:	7812      	ldrb	r2, [r2, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	3301      	adds	r3, #1
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	440b      	add	r3, r1
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	4313      	orrs	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	3302      	adds	r3, #2
 800429a:	6839      	ldr	r1, [r7, #0]
 800429c:	440b      	add	r3, r1
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	3303      	adds	r3, #3
 80042ac:	6839      	ldr	r1, [r7, #0]
 80042ae:	440b      	add	r3, r1
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3304      	adds	r3, #4
 80042c2:	61bb      	str	r3, [r7, #24]
     return offset;
 80042c4:	69bb      	ldr	r3, [r7, #24]
    }
 80042c6:	4618      	mov	r0, r3
 80042c8:	3728      	adds	r7, #40	; 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	08006734 	.word	0x08006734

080042ec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	08006750 	.word	0x08006750

08004308 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fd34 	bl	8003d80 <_ZN3ros3MsgC1Ev>
 8004318:	4a06      	ldr	r2, [pc, #24]	; (8004334 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	711a      	strb	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a04      	ldr	r2, [pc, #16]	; (8004338 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8004328:	609a      	str	r2, [r3, #8]
    {
    }
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	08006968 	.word	0x08006968
 8004338:	08006730 	.word	0x08006730

0800433c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	4413      	add	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	7912      	ldrb	r2, [r2, #4]
 8004354:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3301      	adds	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fb ff51 	bl	8000208 <strlen>
 8004366:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	4413      	add	r3, r2
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 ff35 	bl	80051e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3304      	adds	r3, #4
 800437a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	18d0      	adds	r0, r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4619      	mov	r1, r3
 800438a:	f002 f863 	bl	8006454 <memcpy>
      offset += length_msg;
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
      return offset;
 8004396:	68fb      	ldr	r3, [r7, #12]
    }
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	4413      	add	r3, r2
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3301      	adds	r3, #1
 80043be:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	441a      	add	r2, r3
 80043c6:	f107 030c 	add.w	r3, r7, #12
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 ff25 	bl	800521c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3304      	adds	r3, #4
 80043d6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d20c      	bcs.n	8004402 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	441a      	add	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	440b      	add	r3, r1
 80043f6:	7812      	ldrb	r2, [r2, #0]
 80043f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	3301      	adds	r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	e7ec      	b.n	80043dc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	3b01      	subs	r3, #1
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	4413      	add	r3, r2
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3b01      	subs	r3, #1
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
     return offset;
 8004426:	693b      	ldr	r3, [r7, #16]
    }
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	08006774 	.word	0x08006774

0800444c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	08006788 	.word	0x08006788

08004468 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fc84 	bl	8003d80 <_ZN3ros3MsgC1Ev>
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	611a      	str	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	619a      	str	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	61da      	str	r2, [r3, #28]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	08006950 	.word	0x08006950

080044b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6859      	ldr	r1, [r3, #4]
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	4413      	add	r3, r2
 80044c8:	b2ca      	uxtb	r2, r1
 80044ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0a19      	lsrs	r1, r3, #8
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	3301      	adds	r3, #1
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	b2ca      	uxtb	r2, r1
 80044dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	0c19      	lsrs	r1, r3, #16
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	3302      	adds	r3, #2
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	4413      	add	r3, r2
 80044ec:	b2ca      	uxtb	r2, r1
 80044ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	0e19      	lsrs	r1, r3, #24
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	3303      	adds	r3, #3
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	b2ca      	uxtb	r2, r1
 8004500:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	3304      	adds	r3, #4
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004508:	2300      	movs	r3, #0
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	429a      	cmp	r2, r3
 8004514:	d22b      	bcs.n	800456e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8004524:	6939      	ldr	r1, [r7, #16]
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	4413      	add	r3, r2
 800452c:	b2ca      	uxtb	r2, r1
 800452e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	0a19      	lsrs	r1, r3, #8
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	3301      	adds	r3, #1
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	4413      	add	r3, r2
 800453c:	b2ca      	uxtb	r2, r1
 800453e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	0c19      	lsrs	r1, r3, #16
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	3302      	adds	r3, #2
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	4413      	add	r3, r2
 800454c:	b2ca      	uxtb	r2, r1
 800454e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	0e19      	lsrs	r1, r3, #24
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	3303      	adds	r3, #3
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	4413      	add	r3, r2
 800455c:	b2ca      	uxtb	r2, r1
 800455e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	3304      	adds	r3, #4
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	3301      	adds	r3, #1
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	e7ce      	b.n	800450c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6919      	ldr	r1, [r3, #16]
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	4413      	add	r3, r2
 8004578:	b2ca      	uxtb	r2, r1
 800457a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	0a19      	lsrs	r1, r3, #8
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	3301      	adds	r3, #1
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	4413      	add	r3, r2
 800458a:	b2ca      	uxtb	r2, r1
 800458c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	0c19      	lsrs	r1, r3, #16
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	3302      	adds	r3, #2
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	4413      	add	r3, r2
 800459c:	b2ca      	uxtb	r2, r1
 800459e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	0e19      	lsrs	r1, r3, #24
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	3303      	adds	r3, #3
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	4413      	add	r3, r2
 80045ae:	b2ca      	uxtb	r2, r1
 80045b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	3304      	adds	r3, #4
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d22b      	bcs.n	800461e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80045d4:	68f9      	ldr	r1, [r7, #12]
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	4413      	add	r3, r2
 80045dc:	b2ca      	uxtb	r2, r1
 80045de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	0a19      	lsrs	r1, r3, #8
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	3301      	adds	r3, #1
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	4413      	add	r3, r2
 80045ec:	b2ca      	uxtb	r2, r1
 80045ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	0c19      	lsrs	r1, r3, #16
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	3302      	adds	r3, #2
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	4413      	add	r3, r2
 80045fc:	b2ca      	uxtb	r2, r1
 80045fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	0e19      	lsrs	r1, r3, #24
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	3303      	adds	r3, #3
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	4413      	add	r3, r2
 800460c:	b2ca      	uxtb	r2, r1
 800460e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	3304      	adds	r3, #4
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	e7ce      	b.n	80045bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69d9      	ldr	r1, [r3, #28]
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	4413      	add	r3, r2
 8004628:	b2ca      	uxtb	r2, r1
 800462a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	0a19      	lsrs	r1, r3, #8
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	3301      	adds	r3, #1
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4413      	add	r3, r2
 800463a:	b2ca      	uxtb	r2, r1
 800463c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	0c19      	lsrs	r1, r3, #16
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	3302      	adds	r3, #2
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	4413      	add	r3, r2
 800464c:	b2ca      	uxtb	r2, r1
 800464e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	0e19      	lsrs	r1, r3, #24
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	3303      	adds	r3, #3
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	4413      	add	r3, r2
 800465e:	b2ca      	uxtb	r2, r1
 8004660:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	3304      	adds	r3, #4
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	429a      	cmp	r2, r3
 8004674:	d228      	bcs.n	80046c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fb fdc0 	bl	8000208 <strlen>
 8004688:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	4413      	add	r3, r2
 8004690:	6979      	ldr	r1, [r7, #20]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fda4 	bl	80051e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	3304      	adds	r3, #4
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	18d0      	adds	r0, r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4619      	mov	r1, r3
 80046b4:	f001 fece 	bl	8006454 <memcpy>
      offset += length_stringsi;
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	4413      	add	r3, r2
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e7d1      	b.n	800466c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80046ca:	4618      	mov	r0, r3
 80046cc:	3728      	adds	r7, #40	; 0x28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b08e      	sub	sp, #56	; 0x38
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	3301      	adds	r3, #1
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	4413      	add	r3, r2
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	6a3a      	ldr	r2, [r7, #32]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	3302      	adds	r3, #2
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	4413      	add	r3, r2
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	6a3a      	ldr	r2, [r7, #32]
 800470a:	4313      	orrs	r3, r2
 800470c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800470e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004710:	3303      	adds	r3, #3
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	4413      	add	r3, r2
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	6a3a      	ldr	r2, [r7, #32]
 800471c:	4313      	orrs	r3, r2
 800471e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8004720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004722:	3304      	adds	r3, #4
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	429a      	cmp	r2, r3
 800472e:	d90a      	bls.n	8004746 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f001 fe9e 	bl	800647c <realloc>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a3a      	ldr	r2, [r7, #32]
 800474a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800474c:	2300      	movs	r3, #0
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	429a      	cmp	r2, r3
 8004758:	d236      	bcs.n	80047c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	440a      	add	r2, r1
 8004766:	7812      	ldrb	r2, [r2, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004770:	3301      	adds	r3, #1
 8004772:	6839      	ldr	r1, [r7, #0]
 8004774:	440b      	add	r3, r1
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	3302      	adds	r3, #2
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	440b      	add	r3, r1
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	3303      	adds	r3, #3
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	440b      	add	r3, r1
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	3304      	adds	r3, #4
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	3301      	adds	r3, #1
 80047c4:	633b      	str	r3, [r7, #48]	; 0x30
 80047c6:	e7c3      	b.n	8004750 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	3301      	adds	r3, #1
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4413      	add	r3, r2
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80047e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e6:	3302      	adds	r3, #2
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4413      	add	r3, r2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80047f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f8:	3303      	adds	r3, #3
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	4313      	orrs	r3, r2
 8004806:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	3304      	adds	r3, #4
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	429a      	cmp	r2, r3
 8004816:	d90a      	bls.n	800482e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699a      	ldr	r2, [r3, #24]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4619      	mov	r1, r3
 8004822:	4610      	mov	r0, r2
 8004824:	f001 fe2a 	bl	800647c <realloc>
 8004828:	4602      	mov	r2, r0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483e:	429a      	cmp	r2, r3
 8004840:	d236      	bcs.n	80048b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	440a      	add	r2, r1
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004858:	3301      	adds	r3, #1
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	440b      	add	r3, r1
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486a:	3302      	adds	r3, #2
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	440b      	add	r3, r1
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	3303      	adds	r3, #3
 800487e:	6839      	ldr	r1, [r7, #0]
 8004880:	440b      	add	r3, r1
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8004890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004892:	3304      	adds	r3, #4
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	3214      	adds	r2, #20
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	3301      	adds	r3, #1
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	e7c3      	b.n	8004838 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	4413      	add	r3, r2
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	3301      	adds	r3, #1
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	4413      	add	r3, r2
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	3302      	adds	r3, #2
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80048de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e0:	3303      	adds	r3, #3
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80048f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f2:	3304      	adds	r3, #4
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d90a      	bls.n	8004916 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f001 fdb6 	bl	800647c <realloc>
 8004910:	4602      	mov	r2, r0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800491c:	2300      	movs	r3, #0
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004926:	429a      	cmp	r2, r3
 8004928:	d23f      	bcs.n	80049aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800492a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	441a      	add	r2, r3
 8004930:	f107 030c 	add.w	r3, r7, #12
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fc70 	bl	800521c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	3304      	adds	r3, #4
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
 8004946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	429a      	cmp	r2, r3
 8004950:	d20c      	bcs.n	800496c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	441a      	add	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	3b01      	subs	r3, #1
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	440b      	add	r3, r1
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	3301      	adds	r3, #1
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
 800496a:	e7ec      	b.n	8004946 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800496c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	3b01      	subs	r3, #1
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	4413      	add	r3, r2
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	3b01      	subs	r3, #1
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	441a      	add	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8004988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	3220      	adds	r2, #32
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	3301      	adds	r3, #1
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a8:	e7ba      	b.n	8004920 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80049ac:	4618      	mov	r0, r3
 80049ae:	3738      	adds	r7, #56	; 0x38
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	080068a4 	.word	0x080068a4

080049d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	080067ac 	.word	0x080067ac

080049ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	611a      	str	r2, [r3, #16]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68d8      	ldr	r0, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6891      	ldr	r1, [r2, #8]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	4798      	blx	r3
 8004a38:	4603      	mov	r3, r0
  };
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
  }
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - huart->hdmarx->Instance->NDTR) & (rbuflen - 1); }
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
      htim(&htim2), huart(&huart2), rind(0), twind(0), tfind(0){
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <_ZN13STM32HardwareC1Ev+0x3c>)
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <_ZN13STM32HardwareC1Ev+0x40>)
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    }
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	200013ac 	.word	0x200013ac
 8004ac0:	200013ec 	.word	0x200013ec

08004ac4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(TIM_HandleTypeDef *htim_, UART_HandleTypeDef *huart_):
      htim(htim_), huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f809 	bl	8004ae4 <_ZN13STM32Hardware10reset_rbufEv>

      HAL_TIM_Base_Start(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fd fd23 	bl	8002522 <HAL_TIM_Base_Start>
    }
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6858      	ldr	r0, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3308      	adds	r3, #8
 8004af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004af8:	4619      	mov	r1, r3
 8004afa:	f7fe f8bf 	bl	8002c7c <HAL_UART_Receive_DMA>
    }
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <_ZN13STM32Hardware4readEv>:

    int read(){
 8004b06:	b590      	push	{r4, r7, lr}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
      int c = -1;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b12:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff ff9d 	bl	8004a5a <_ZN13STM32Hardware10getRdmaIndEv>
 8004b20:	4603      	mov	r3, r0
 8004b22:	429c      	cmp	r4, r3
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d012      	beq.n	8004b56 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004b36:	1c59      	adds	r1, r3, #1
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	7a1b      	ldrb	r3, [r3, #8]
 8004b44:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004b4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 8004b56:	68fb      	ldr	r3, [r7, #12]
    }
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}

08004b60 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d108      	bne.n	8004b88 <_ZN13STM32Hardware5flushEv+0x28>
 8004b76:	4b28      	ldr	r3, [pc, #160]	; (8004c18 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	f083 0301 	eor.w	r3, r3, #1
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <_ZN13STM32Hardware5flushEv+0x28>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <_ZN13STM32Hardware5flushEv+0x2a>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d040      	beq.n	8004c10 <_ZN13STM32Hardware5flushEv+0xb0>
        mutex = true;
 8004b8e:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d032      	beq.n	8004c0a <_ZN13STM32Hardware5flushEv+0xaa>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d20a      	bcs.n	8004bca <_ZN13STM32Hardware5flushEv+0x6a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	e006      	b.n	8004bd8 <_ZN13STM32Hardware5flushEv+0x78>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6858      	ldr	r0, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 8004be4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4413      	add	r3, r2
 8004bec:	3304      	adds	r3, #4
 8004bee:	89fa      	ldrh	r2, [r7, #14]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f7fd ffd7 	bl	8002ba4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
 8004bfc:	89fb      	ldrh	r3, [r7, #14]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
        }
        mutex = false;
 8004c0a:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
      }
    }
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	200000a0 	.word	0x200000a0

08004c1c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
      int n = length;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	61bb      	str	r3, [r7, #24]
      n = n <= tbuflen ? n : tbuflen;
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c32:	bfa8      	it	ge
 8004c34:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8004c38:	61bb      	str	r3, [r7, #24]

      int get_tail;

      //int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
      int n_tail;
      n <= (int)(tbuflen - twind) ? get_tail = n : get_tail = tbuflen - twind;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8004c40:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004c44:	461a      	mov	r2, r3
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	dc02      	bgt.n	8004c52 <_ZN13STM32Hardware5writeEPhi+0x36>
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	e005      	b.n	8004c5e <_ZN13STM32Hardware5writeEPhi+0x42>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8004c58:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004c5c:	61fb      	str	r3, [r7, #28]


      n_tail = get_tail;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	617b      	str	r3, [r7, #20]

      memcpy(&(tbuf[twind]), data, n_tail);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8004c68:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	3304      	adds	r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 fbec 	bl	8006454 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	4413      	add	r3, r2
 8004c86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c

      if(n != n_tail){
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d00b      	beq.n	8004cb0 <_ZN13STM32Hardware5writeEPhi+0x94>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	18d1      	adds	r1, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	f001 fbd2 	bl	8006454 <memcpy>
      }

      flush();
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff ff55 	bl	8004b60 <_ZN13STM32Hardware5flushEv>
    }
 8004cb6:	bf00      	nop
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return __HAL_TIM_GET_COUNTER(htim); }
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
      data("")
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff f84a 	bl	8003d80 <_ZN3ros3MsgC1Ev>
 8004cec:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <_ZN8std_msgs6StringC1Ev+0x28>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8004cf6:	605a      	str	r2, [r3, #4]
    {
    }
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	0800690c 	.word	0x0800690c
 8004d08:	08006730 	.word	0x08006730

08004d0c <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fa72 	bl	8000208 <strlen>
 8004d24:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fa56 	bl	80051e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3304      	adds	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	18d0      	adds	r0, r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4619      	mov	r1, r3
 8004d48:	f001 fb84 	bl	8006454 <memcpy>
      offset += length_data;
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
      return offset;
 8004d54:	68fb      	ldr	r3, [r7, #12]
    }
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	441a      	add	r2, r3
 8004d72:	f107 030c 	add.w	r3, r7, #12
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fa4f 	bl	800521c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3304      	adds	r3, #4
 8004d82:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d20c      	bcs.n	8004dae <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	441a      	add	r2, r3
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	440b      	add	r3, r1
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	3301      	adds	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e7ec      	b.n	8004d88 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	3b01      	subs	r3, #1
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
     return offset;
 8004dd2:	693b      	ldr	r3, [r7, #16]
    }
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	080067d0 	.word	0x080067d0

08004df8 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	080067e0 	.word	0x080067e0

08004e14 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe ffae 	bl	8003d80 <_ZN3ros3MsgC1Ev>
 8004e24:	4a09      	ldr	r2, [pc, #36]	; (8004e4c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	60da      	str	r2, [r3, #12]
    {
    }
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	080068f4 	.word	0x080068f4

08004e50 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	441a      	add	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f7fe feba 	bl	8003be8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	441a      	add	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e88:	eeb0 0a67 	vmov.f32	s0, s15
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f7fe feab 	bl	8003be8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	441a      	add	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f7fe fe9c 	bl	8003be8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
      return offset;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
    }
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7fe feef 	bl	8003cc0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	441a      	add	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	f7fe fee2 	bl	8003cc0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f7fe fed5 	bl	8003cc0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
     return offset;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
    }
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	08006804 	.word	0x08006804

08004f44 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	0800681c 	.word	0x0800681c

08004f60 <ros_init>:
}



void ros_init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0

	nh.initNode();
 8004f64:	480a      	ldr	r0, [pc, #40]	; (8004f90 <ros_init+0x30>)
 8004f66:	f000 fa53 	bl	8005410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(pub_chat);
 8004f6a:	490a      	ldr	r1, [pc, #40]	; (8004f94 <ros_init+0x34>)
 8004f6c:	4808      	ldr	r0, [pc, #32]	; (8004f90 <ros_init+0x30>)
 8004f6e:	f000 fa74 	bl	800545a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(angle_sub);
 8004f72:	4909      	ldr	r1, [pc, #36]	; (8004f98 <ros_init+0x38>)
 8004f74:	4806      	ldr	r0, [pc, #24]	; (8004f90 <ros_init+0x30>)
 8004f76:	f000 fa9e 	bl	80054b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_>

	nowTick = HAL_GetTick();
 8004f7a:	f7fb ff51 	bl	8000e20 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <ros_init+0x3c>)
 8004f82:	601a      	str	r2, [r3, #0]
	pastTick = nowTick;
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <ros_init+0x3c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <ros_init+0x40>)
 8004f8a:	6013      	str	r3, [r2, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	200000a4 	.word	0x200000a4
 8004f94:	200011ec 	.word	0x200011ec
 8004f98:	20001264 	.word	0x20001264
 8004f9c:	20001294 	.word	0x20001294
 8004fa0:	20001298 	.word	0x20001298

08004fa4 <ros_run>:

void ros_run(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0

	ax12_SetRegister(1, 30, 512-yaw_data);
 8004fa8:	4b30      	ldr	r3, [pc, #192]	; (800506c <ros_run+0xc8>)
 8004faa:	edd3 7a00 	vldr	s15, [r3]
 8004fae:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005070 <ros_run+0xcc>
 8004fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fba:	ee17 3a90 	vmov	r3, s15
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	211e      	movs	r1, #30
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f000 f8c7 	bl	8005158 <_Z16ax12_SetRegisterhht>
	HAL_UART_Transmit(&huart1, sendData, 9, 0xFF);
 8004fca:	23ff      	movs	r3, #255	; 0xff
 8004fcc:	2209      	movs	r2, #9
 8004fce:	4929      	ldr	r1, [pc, #164]	; (8005074 <ros_run+0xd0>)
 8004fd0:	4829      	ldr	r0, [pc, #164]	; (8005078 <ros_run+0xd4>)
 8004fd2:	f7fd fd4d 	bl	8002a70 <HAL_UART_Transmit>
	ax12_SetRegister(1, 32, 256);
 8004fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fda:	2120      	movs	r1, #32
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f000 f8bb 	bl	8005158 <_Z16ax12_SetRegisterhht>
	HAL_UART_Transmit(&huart1, sendData, 9, 0xFF);
 8004fe2:	23ff      	movs	r3, #255	; 0xff
 8004fe4:	2209      	movs	r2, #9
 8004fe6:	4923      	ldr	r1, [pc, #140]	; (8005074 <ros_run+0xd0>)
 8004fe8:	4823      	ldr	r0, [pc, #140]	; (8005078 <ros_run+0xd4>)
 8004fea:	f7fd fd41 	bl	8002a70 <HAL_UART_Transmit>

	ax12_SetRegister(2, 30, 512+pitch_data);
 8004fee:	4b23      	ldr	r3, [pc, #140]	; (800507c <ros_run+0xd8>)
 8004ff0:	edd3 7a00 	vldr	s15, [r3]
 8004ff4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005070 <ros_run+0xcc>
 8004ff8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005000:	ee17 3a90 	vmov	r3, s15
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	211e      	movs	r1, #30
 800500a:	2002      	movs	r0, #2
 800500c:	f000 f8a4 	bl	8005158 <_Z16ax12_SetRegisterhht>
	HAL_UART_Transmit(&huart1, sendData, 9, 0xFF);
 8005010:	23ff      	movs	r3, #255	; 0xff
 8005012:	2209      	movs	r2, #9
 8005014:	4917      	ldr	r1, [pc, #92]	; (8005074 <ros_run+0xd0>)
 8005016:	4818      	ldr	r0, [pc, #96]	; (8005078 <ros_run+0xd4>)
 8005018:	f7fd fd2a 	bl	8002a70 <HAL_UART_Transmit>
	ax12_SetRegister(2, 32, 256);
 800501c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005020:	2120      	movs	r1, #32
 8005022:	2002      	movs	r0, #2
 8005024:	f000 f898 	bl	8005158 <_Z16ax12_SetRegisterhht>
	HAL_UART_Transmit(&huart1, sendData, 9, 0xFF);
 8005028:	23ff      	movs	r3, #255	; 0xff
 800502a:	2209      	movs	r2, #9
 800502c:	4911      	ldr	r1, [pc, #68]	; (8005074 <ros_run+0xd0>)
 800502e:	4812      	ldr	r0, [pc, #72]	; (8005078 <ros_run+0xd4>)
 8005030:	f7fd fd1e 	bl	8002a70 <HAL_UART_Transmit>


	nowTick = HAL_GetTick();
 8005034:	f7fb fef4 	bl	8000e20 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	4b11      	ldr	r3, [pc, #68]	; (8005080 <ros_run+0xdc>)
 800503c:	601a      	str	r2, [r3, #0]
	if(nowTick - pastTick > 100)
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <ros_run+0xdc>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <ros_run+0xe0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b64      	cmp	r3, #100	; 0x64
 800504a:	d90d      	bls.n	8005068 <ros_run+0xc4>
	{
		str_msg.data = hello;
 800504c:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <ros_run+0xe4>)
 800504e:	4a0f      	ldr	r2, [pc, #60]	; (800508c <ros_run+0xe8>)
 8005050:	605a      	str	r2, [r3, #4]
		pub_chat.publish(&str_msg);
 8005052:	490d      	ldr	r1, [pc, #52]	; (8005088 <ros_run+0xe4>)
 8005054:	480e      	ldr	r0, [pc, #56]	; (8005090 <ros_run+0xec>)
 8005056:	f7ff fce0 	bl	8004a1a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 800505a:	480e      	ldr	r0, [pc, #56]	; (8005094 <ros_run+0xf0>)
 800505c:	f000 fa58 	bl	8005510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
		pastTick = nowTick;
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <ros_run+0xdc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a07      	ldr	r2, [pc, #28]	; (8005084 <ros_run+0xe0>)
 8005066:	6013      	str	r3, [r2, #0]
	}
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20001288 	.word	0x20001288
 8005070:	44000000 	.word	0x44000000
 8005074:	20001200 	.word	0x20001200
 8005078:	2000136c 	.word	0x2000136c
 800507c:	2000128c 	.word	0x2000128c
 8005080:	20001294 	.word	0x20001294
 8005084:	20001298 	.word	0x20001298
 8005088:	200011e4 	.word	0x200011e4
 800508c:	20000008 	.word	0x20000008
 8005090:	200011ec 	.word	0x200011ec
 8005094:	200000a4 	.word	0x200000a4

08005098 <_Z8angle_cbRKN13geometry_msgs7Vector3E>:


void angle_cb(const geometry_msgs::Vector3& msg)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	roll_data = msg.x * 180 / 3.14;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80050a6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005148 <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xb0>
 80050aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ae:	ee17 0a90 	vmov	r0, s15
 80050b2:	f7fb fa15 	bl	80004e0 <__aeabi_f2d>
 80050b6:	a322      	add	r3, pc, #136	; (adr r3, 8005140 <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xa8>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb fb92 	bl	80007e4 <__aeabi_ddiv>
 80050c0:	4603      	mov	r3, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	4618      	mov	r0, r3
 80050c6:	4621      	mov	r1, r4
 80050c8:	f7fb fc74 	bl	80009b4 <__aeabi_d2f>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b1f      	ldr	r3, [pc, #124]	; (800514c <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xb4>)
 80050d0:	601a      	str	r2, [r3, #0]
	pitch_data = msg.y * 180 / 3.14;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80050d8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005148 <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xb0>
 80050dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e0:	ee17 0a90 	vmov	r0, s15
 80050e4:	f7fb f9fc 	bl	80004e0 <__aeabi_f2d>
 80050e8:	a315      	add	r3, pc, #84	; (adr r3, 8005140 <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xa8>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	f7fb fb79 	bl	80007e4 <__aeabi_ddiv>
 80050f2:	4603      	mov	r3, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	4618      	mov	r0, r3
 80050f8:	4621      	mov	r1, r4
 80050fa:	f7fb fc5b 	bl	80009b4 <__aeabi_d2f>
 80050fe:	4602      	mov	r2, r0
 8005100:	4b13      	ldr	r3, [pc, #76]	; (8005150 <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xb8>)
 8005102:	601a      	str	r2, [r3, #0]
	yaw_data = msg.z * 180 / 3.14;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	edd3 7a03 	vldr	s15, [r3, #12]
 800510a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005148 <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xb0>
 800510e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005112:	ee17 0a90 	vmov	r0, s15
 8005116:	f7fb f9e3 	bl	80004e0 <__aeabi_f2d>
 800511a:	a309      	add	r3, pc, #36	; (adr r3, 8005140 <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xa8>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f7fb fb60 	bl	80007e4 <__aeabi_ddiv>
 8005124:	4603      	mov	r3, r0
 8005126:	460c      	mov	r4, r1
 8005128:	4618      	mov	r0, r3
 800512a:	4621      	mov	r1, r4
 800512c:	f7fb fc42 	bl	80009b4 <__aeabi_d2f>
 8005130:	4602      	mov	r2, r0
 8005132:	4b08      	ldr	r3, [pc, #32]	; (8005154 <_Z8angle_cbRKN13geometry_msgs7Vector3E+0xbc>)
 8005134:	601a      	str	r2, [r3, #0]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bd90      	pop	{r4, r7, pc}
 800513e:	bf00      	nop
 8005140:	51eb851f 	.word	0x51eb851f
 8005144:	40091eb8 	.word	0x40091eb8
 8005148:	43340000 	.word	0x43340000
 800514c:	20001290 	.word	0x20001290
 8005150:	2000128c 	.word	0x2000128c
 8005154:	20001288 	.word	0x20001288

08005158 <_Z16ax12_SetRegisterhht>:


void ax12_SetRegister(uint8_t id, uint8_t regstart, uint16_t data) {
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
 8005162:	460b      	mov	r3, r1
 8005164:	71bb      	strb	r3, [r7, #6]
 8005166:	4613      	mov	r3, r2
 8005168:	80bb      	strh	r3, [r7, #4]
	sendData[0] = 0xFF;
 800516a:	4b1c      	ldr	r3, [pc, #112]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 800516c:	22ff      	movs	r2, #255	; 0xff
 800516e:	701a      	strb	r2, [r3, #0]
	sendData[1] = 0xFF;
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 8005172:	22ff      	movs	r2, #255	; 0xff
 8005174:	705a      	strb	r2, [r3, #1]
	sendData[2] = id;
 8005176:	4a19      	ldr	r2, [pc, #100]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	7093      	strb	r3, [r2, #2]
	sendData[3] = 5;
 800517c:	4b17      	ldr	r3, [pc, #92]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 800517e:	2205      	movs	r2, #5
 8005180:	70da      	strb	r2, [r3, #3]
	sendData[4] = AX_WRITE_DATA;
 8005182:	4b16      	ldr	r3, [pc, #88]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 8005184:	2203      	movs	r2, #3
 8005186:	711a      	strb	r2, [r3, #4]
	sendData[5] = regstart;
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 800518a:	79bb      	ldrb	r3, [r7, #6]
 800518c:	7153      	strb	r3, [r2, #5]
	sendData[6] = (data & 0xFF);
 800518e:	88bb      	ldrh	r3, [r7, #4]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 8005194:	719a      	strb	r2, [r3, #6]
	sendData[7] = (data & 0xFF00) >> 8;
 8005196:	88bb      	ldrh	r3, [r7, #4]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	b29b      	uxth	r3, r3
 800519c:	b2da      	uxtb	r2, r3
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 80051a0:	71da      	strb	r2, [r3, #7]
	sendData[8] = (0xFF
			- ((id + 5 + AX_WRITE_DATA + regstart + (data & 0xFF)
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	f103 0208 	add.w	r2, r3, #8
 80051a8:	79bb      	ldrb	r3, [r7, #6]
 80051aa:	441a      	add	r2, r3
 80051ac:	88bb      	ldrh	r3, [r7, #4]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	4413      	add	r3, r2
					+ ((data & 0xFF00) >> 8)) % 256));
 80051b2:	88ba      	ldrh	r2, [r7, #4]
 80051b4:	0a12      	lsrs	r2, r2, #8
 80051b6:	b292      	uxth	r2, r2
 80051b8:	4413      	add	r3, r2
 80051ba:	425a      	negs	r2, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	bf58      	it	pl
 80051c2:	4253      	negpl	r3, r2
			- ((id + 5 + AX_WRITE_DATA + regstart + (data & 0xFF)
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	b2da      	uxtb	r2, r3
	sendData[8] = (0xFF
 80051ca:	4b04      	ldr	r3, [pc, #16]	; (80051dc <_Z16ax12_SetRegisterhht+0x84>)
 80051cc:	721a      	strb	r2, [r3, #8]

}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20001200 	.word	0x20001200

080051e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b03      	cmp	r3, #3
 80051f2:	d80d      	bhi.n	8005210 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	fa22 f103 	lsr.w	r1, r2, r3
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	b2ca      	uxtb	r2, r1
 8005206:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	e7ee      	b.n	80051ee <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d811      	bhi.n	800525a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	440a      	add	r2, r1
 8005240:	7812      	ldrb	r2, [r2, #0]
 8005242:	4611      	mov	r1, r2
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	00d2      	lsls	r2, r2, #3
 8005248:	fa01 f202 	lsl.w	r2, r1, r2
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e7ea      	b.n	8005230 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	4a04      	ldr	r2, [pc, #16]	; (8005284 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	0800693c 	.word	0x0800693c

08005288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ffe8 	bl	8005268 <_ZN3ros15NodeHandleBase_C1Ev>
 8005298:	4a42      	ldr	r2, [pc, #264]	; (80053a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x11c>)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fbec 	bl	8004a80 <_ZN13STM32HardwareC1Ev>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80052ae:	3304      	adds	r3, #4
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80052ba:	3318      	adds	r3, #24
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff f8d3 	bl	8004468 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b18      	cmp	r3, #24
 80052ca:	d80a      	bhi.n	80052e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>
      publishers[i] = 0;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80052d4:	2100      	movs	r1, #0
 80052d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	3301      	adds	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e7f1      	b.n	80052c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b18      	cmp	r3, #24
 80052ea:	d80b      	bhi.n	8005304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	2200      	movs	r2, #0
 80052fa:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3301      	adds	r3, #1
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	e7f0      	b.n	80052e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530e:	d20a      	bcs.n	8005326 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9e>
      message_in[i] = 0;
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e7f0      	b.n	8005308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d20a      	bcs.n	8005348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc0>
      message_out[i] = 0;
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4413      	add	r3, r2
 8005338:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	3301      	adds	r3, #1
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	e7f0      	b.n	800532a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800534e:	331c      	adds	r3, #28
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800535a:	3304      	adds	r3, #4
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005366:	3308      	adds	r3, #8
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005372:	3310      	adds	r3, #16
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800537e:	331c      	adds	r3, #28
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800538a:	3304      	adds	r3, #4
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

    spin_timeout_ = 0;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
  }
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	080068e0 	.word	0x080068e0

080053a8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	08006924 	.word	0x08006924

080053c8 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff ffe5 	bl	80053a8 <_ZN3ros11Subscriber_C1Ev>
 80053de:	4a0b      	ldr	r2, [pc, #44]	; (800540c <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei+0x44>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	330c      	adds	r3, #12
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fd13 	bl	8004e14 <_ZN13geometry_msgs7Vector3C1Ev>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	61da      	str	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	621a      	str	r2, [r3, #32]
  {
    topic_ = topic_name;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
  };
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	080068c8 	.word	0x080068c8

08005410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fb51 	bl	8004ac4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005428:	3310      	adds	r3, #16
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005434:	3314      	adds	r3, #20
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
    index_ = 0;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005440:	331c      	adds	r3, #28
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800544c:	3318      	adds	r3, #24
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
  };
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b18      	cmp	r3, #24
 800546c:	dc1c      	bgt.n	80054a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d110      	bne.n	80054a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	60da      	str	r2, [r3, #12]
        return true;
 800549c:	2301      	movs	r3, #1
 800549e:	e004      	b.n	80054aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e7df      	b.n	8005468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80054a8:	2300      	movs	r3, #0
  }
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b18      	cmp	r3, #24
 80054c8:	dc1b      	bgt.n	8005502 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10e      	bne.n	80054fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	605a      	str	r2, [r3, #4]
        return true;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e004      	b.n	8005504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e7e0      	b.n	80054c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs7Vector3EvEEEEbRT_+0xe>
      }
    }
    return false;
 8005502:	2300      	movs	r3, #0
  }
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fbce 	bl	8004cbe <_ZN13STM32Hardware4timeEv>
 8005522:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800552a:	330c      	adds	r3, #12
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005536:	4293      	cmp	r3, r2
 8005538:	d905      	bls.n	8005546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005540:	3304      	adds	r3, #4
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800554c:	3310      	adds	r3, #16
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      if (c_time > last_msg_timeout_time)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800555a:	3310      	adds	r3, #16
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	429a      	cmp	r2, r3
 8005562:	d905      	bls.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        mode_ = MODE_FIRST_FF;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800556a:	3310      	adds	r3, #16
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 8005576:	2b00      	cmp	r3, #0
 8005578:	d014      	beq.n	80055a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x94>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fb9d 	bl	8004cbe <_ZN13STM32Hardware4timeEv>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad2      	subs	r2, r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 8005590:	429a      	cmp	r2, r3
 8005592:	bf8c      	ite	hi
 8005594:	2301      	movhi	r3, #1
 8005596:	2300      	movls	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x94>
          return SPIN_TIMEOUT;
 800559e:	f06f 0301 	mvn.w	r3, #1
 80055a2:	e211      	b.n	80059c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
      int data = hardware_.read();
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3304      	adds	r3, #4
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff faac 	bl	8004b06 <_ZN13STM32Hardware4readEv>
 80055ae:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f2c0 81eb 	blt.w	800598e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x47e>
      checksum_ += data;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	441a      	add	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80055ca:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055d2:	3310      	adds	r3, #16
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b07      	cmp	r3, #7
 80055d8:	d12a      	bne.n	8005630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
        message_in[index_++] = data;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055e0:	331c      	adds	r3, #28
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	1c51      	adds	r1, r2, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055ec:	331c      	adds	r3, #28
 80055ee:	6019      	str	r1, [r3, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	b2d9      	uxtb	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4413      	add	r3, r2
 80055f8:	460a      	mov	r2, r1
 80055fa:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
        bytes_--;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005604:	3314      	adds	r3, #20
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	1e5a      	subs	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005610:	3314      	adds	r3, #20
 8005612:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800561a:	3314      	adds	r3, #20
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1a6      	bne.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_MSG_CHECKSUM;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005628:	3310      	adds	r3, #16
 800562a:	2208      	movs	r2, #8
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e79f      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_FIRST_FF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005636:	3310      	adds	r3, #16
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d131      	bne.n	80056a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x192>
        if (data == 0xff)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2bff      	cmp	r3, #255	; 0xff
 8005642:	d113      	bne.n	800566c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x15c>
          mode_++;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800564a:	3310      	adds	r3, #16
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005656:	3310      	adds	r3, #16
 8005658:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f103 0214 	add.w	r2, r3, #20
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005666:	3310      	adds	r3, #16
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e781      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fb24 	bl	8004cbe <_ZN13STM32Hardware4timeEv>
 8005676:	4602      	mov	r2, r0
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005680:	4293      	cmp	r3, r2
 8005682:	bf8c      	ite	hi
 8005684:	2301      	movhi	r3, #1
 8005686:	2300      	movls	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	f43f af70 	beq.w	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          configured_ = false;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005696:	3304      	adds	r3, #4
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 800569c:	f06f 0301 	mvn.w	r3, #1
 80056a0:	e192      	b.n	80059c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056a8:	3310      	adds	r3, #16
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d123      	bne.n	80056f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        if (data == PROTOCOL_VER)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2bfe      	cmp	r3, #254	; 0xfe
 80056b4:	d10b      	bne.n	80056ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
          mode_++;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056bc:	3310      	adds	r3, #16
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056c8:	3310      	adds	r3, #16
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e750      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_FIRST_FF;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056d4:	3310      	adds	r3, #16
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80056e0:	3304      	adds	r3, #4
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	f083 0301 	eor.w	r3, r3, #1
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f43f af40 	beq.w	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f96d 	bl	80059d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80056f6:	e73b      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056fe:	3310      	adds	r3, #16
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d11c      	bne.n	8005740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x230>
        bytes_ = data;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800570c:	3314      	adds	r3, #20
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	601a      	str	r2, [r3, #0]
        index_ = 0;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005718:	331c      	adds	r3, #28
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
        mode_++;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005724:	3310      	adds	r3, #16
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005730:	3310      	adds	r3, #16
 8005732:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e717      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005746:	3310      	adds	r3, #16
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b03      	cmp	r3, #3
 800574c:	d118      	bne.n	8005780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x270>
        bytes_ += data << 8;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005754:	3314      	adds	r3, #20
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	441a      	add	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005764:	3314      	adds	r3, #20
 8005766:	601a      	str	r2, [r3, #0]
        mode_++;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800576e:	3310      	adds	r3, #16
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800577a:	3310      	adds	r3, #16
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	e6f7      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005786:	3310      	adds	r3, #16
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d11d      	bne.n	80057ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ba>
        if ((checksum_ % 256) == 255)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	425a      	negs	r2, r3
 8005798:	b2db      	uxtb	r3, r3
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	bf58      	it	pl
 800579e:	4253      	negpl	r3, r2
 80057a0:	2bff      	cmp	r3, #255	; 0xff
 80057a2:	d10b      	bne.n	80057bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ac>
          mode_++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057aa:	3310      	adds	r3, #16
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057b6:	3310      	adds	r3, #16
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e6d9      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057c2:	3310      	adds	r3, #16
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	e6d2      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057d0:	3310      	adds	r3, #16
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d116      	bne.n	8005806 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f6>
        topic_ = data;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057de:	3318      	adds	r3, #24
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	601a      	str	r2, [r3, #0]
        mode_++;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057ea:	3310      	adds	r3, #16
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057f6:	3310      	adds	r3, #16
 80057f8:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e6b4      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800580c:	3310      	adds	r3, #16
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b06      	cmp	r3, #6
 8005812:	d121      	bne.n	8005858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x348>
        topic_ += data << 8;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800581a:	3318      	adds	r3, #24
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	441a      	add	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800582a:	3318      	adds	r3, #24
 800582c:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005834:	3310      	adds	r3, #16
 8005836:	2207      	movs	r2, #7
 8005838:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005840:	3314      	adds	r3, #20
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f47f ae93 	bne.w	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_MSG_CHECKSUM;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005850:	3310      	adds	r3, #16
 8005852:	2208      	movs	r2, #8
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e68b      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800585e:	3310      	adds	r3, #16
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b08      	cmp	r3, #8
 8005864:	f47f ae84 	bne.w	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        mode_ = MODE_FIRST_FF;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800586e:	3310      	adds	r3, #16
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	425a      	negs	r2, r3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	bf58      	it	pl
 8005884:	4253      	negpl	r3, r2
 8005886:	2bff      	cmp	r3, #255	; 0xff
 8005888:	f47f ae72 	bne.w	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005892:	3318      	adds	r3, #24
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d114      	bne.n	80058c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b4>
            requestSyncTime();
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f898 	bl	80059d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f8b3 	bl	8005a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80058ac:	3308      	adds	r3, #8
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80058b8:	330c      	adds	r3, #12
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
 80058c2:	e081      	b.n	80059c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
          else if (topic_ == TopicInfo::ID_TIME)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058ca:	3318      	adds	r3, #24
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b0a      	cmp	r3, #10
 80058d0:	d107      	bne.n	80058e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
            syncTime(message_in);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f978 	bl	8005bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80058e0:	e646      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058e8:	3318      	adds	r3, #24
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b06      	cmp	r3, #6
 80058ee:	d111      	bne.n	8005914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x404>
            req_param_resp.deserialize(message_in);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80058f6:	3318      	adds	r3, #24
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe fee6 	bl	80046d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800590c:	3314      	adds	r3, #20
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	e62d      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800591a:	3318      	adds	r3, #24
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b0b      	cmp	r3, #11
 8005920:	d106      	bne.n	8005930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x420>
            configured_ = false;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005928:	3304      	adds	r3, #4
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	e61f      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
            if (subscribers[topic_ - 100])
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005936:	3318      	adds	r3, #24
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3b64      	subs	r3, #100	; 0x64
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f43f ae11 	beq.w	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
              subscribers[topic_ - 100]->callback(message_in);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005954:	3318      	adds	r3, #24
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3b64      	subs	r3, #100	; 0x64
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	6858      	ldr	r0, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800596c:	3318      	adds	r3, #24
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3b64      	subs	r3, #100	; 0x64
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8005988:	4611      	mov	r1, r2
 800598a:	4798      	blx	r3
    while (true)
 800598c:	e5f0      	b.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        break;
 800598e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005996:	3304      	adds	r3, #4
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d013      	beq.n	80059c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80059a4:	3308      	adds	r3, #8
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d908      	bls.n	80059c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b6>
      requestSyncTime();
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f80b 	bl	80059d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80059c0:	3308      	adds	r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 80059c6:	2300      	movs	r3, #0
  }
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80059d8:	f107 030c 	add.w	r3, r7, #12
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe f9df 	bl	8003da0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f107 020c 	add.w	r2, r7, #12
 80059ec:	210a      	movs	r1, #10
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
    rt_time = hardware_.time();
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f961 	bl	8004cbe <_ZN13STM32Hardware4timeEv>
 80059fc:	4602      	mov	r2, r0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
  }
 8005a04:	bf00      	nop
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b08b      	sub	sp, #44	; 0x2c
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005a14:	f107 030c 	add.w	r3, r7, #12
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fab1 	bl	8003f80 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005a1e:	2300      	movs	r3, #0
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2b18      	cmp	r3, #24
 8005a26:	dc5b      	bgt.n	8005ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d04f      	beq.n	8005ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a66:	6859      	ldr	r1, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	4798      	blx	r3
 8005a80:	4603      	mov	r3, r0
 8005a82:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a88:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a90:	6859      	ldr	r1, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a96:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4798      	blx	r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681c      	ldr	r4, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005abe:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe ffbb 	bl	8004a42 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005acc:	4601      	mov	r1, r0
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	3301      	adds	r3, #1
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	e7a0      	b.n	8005a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	2b18      	cmp	r3, #24
 8005ae8:	dc68      	bgt.n	8005bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05b      	beq.n	8005bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	6859      	ldr	r1, [r3, #4]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3308      	adds	r3, #8
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4608      	mov	r0, r1
 8005b46:	4798      	blx	r3
 8005b48:	4603      	mov	r3, r0
 8005b4a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	6859      	ldr	r1, [r3, #4]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4608      	mov	r0, r1
 8005b70:	4798      	blx	r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b7a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681c      	ldr	r4, [r3, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	6859      	ldr	r1, [r3, #4]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	4798      	blx	r3
 8005ba8:	4601      	mov	r1, r0
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	461a      	mov	r2, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bba:	e793      	b.n	8005ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
  }
 8005bc8:	bf00      	nop
 8005bca:	372c      	adds	r7, #44	; 0x2c
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd90      	pop	{r4, r7, pc}

08005bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe f8de 	bl	8003da0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff f868 	bl	8004cbe <_ZN13STM32Hardware4timeEv>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005bfa:	f107 0308 	add.w	r3, r7, #8
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe f93d 	bl	8003e80 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4916      	ldr	r1, [pc, #88]	; (8005c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005c0c:	fba1 1303 	umull	r1, r3, r1, r3
 8005c10:	099b      	lsrs	r3, r3, #6
 8005c12:	4413      	add	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005c16:	6939      	ldr	r1, [r7, #16]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005c1c:	fba3 0302 	umull	r0, r3, r3, r2
 8005c20:	099b      	lsrs	r3, r3, #6
 8005c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c26:	fb00 f303 	mul.w	r3, r0, r3
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	4a0e      	ldr	r2, [pc, #56]	; (8005c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	440b      	add	r3, r1
 8005c34:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005c36:	f107 0308 	add.w	r3, r7, #8
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f8a8 	bl	8005d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff f838 	bl	8004cbe <_ZN13STM32Hardware4timeEv>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005c56:	330c      	adds	r3, #12
 8005c58:	601a      	str	r2, [r3, #0]
  }
 8005c5a:	bf00      	nop
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	10624dd3 	.word	0x10624dd3
 8005c68:	000f4240 	.word	0x000f4240

08005c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b63      	cmp	r3, #99	; 0x63
 8005c7c:	dd0b      	ble.n	8005c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005c84:	3304      	adds	r3, #4
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f083 0301 	eor.w	r3, r3, #1
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e077      	b.n	8005d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	f602 6228 	addw	r2, r2, #3624	; 0xe28
 8005ca2:	3207      	adds	r2, #7
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
 8005caa:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	22ff      	movs	r2, #255	; 0xff
 8005cb0:	f883 2e28 	strb.w	r2, [r3, #3624]	; 0xe28
    message_out[1] = PROTOCOL_VER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	22fe      	movs	r2, #254	; 0xfe
 8005cb8:	f883 2e29 	strb.w	r2, [r3, #3625]	; 0xe29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f883 2e2a 	strb.w	r2, [r3, #3626]	; 0xe2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	121b      	asrs	r3, r3, #8
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f883 2e2b 	strb.w	r2, [r3, #3627]	; 0xe2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 2e2a 	ldrb.w	r2, [r3, #3626]	; 0xe2a
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 3e2b 	ldrb.w	r3, [r3, #3627]	; 0xe2b
 8005ce0:	4413      	add	r3, r2
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f883 2e2c 	strb.w	r2, [r3, #3628]	; 0xe2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f883 2e2d 	strb.w	r2, [r3, #3629]	; 0xe2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	b21b      	sxth	r3, r3
 8005cfc:	121b      	asrs	r3, r3, #8
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f883 2e2e 	strb.w	r2, [r3, #3630]	; 0xe2e

    /* calculate checksum */
    int chk = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005d0a:	2305      	movs	r3, #5
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	3307      	adds	r3, #7
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	da0d      	bge.n	8005d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e7ec      	b.n	8005d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	3307      	adds	r3, #7
 8005d38:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	425a      	negs	r2, r3
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	bf58      	it	pl
 8005d44:	4253      	negpl	r3, r2
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	1c59      	adds	r1, r3, #1
 8005d4c:	6179      	str	r1, [r7, #20]
 8005d4e:	43d2      	mvns	r2, r2
 8005d50:	b2d1      	uxtb	r1, r2
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	460a      	mov	r2, r1
 8005d58:	f883 2e28 	strb.w	r2, [r3, #3624]	; 0xe28

    if (l <= OUTPUT_SIZE)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d62:	dc0a      	bgt.n	8005d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1d18      	adds	r0, r3, #4
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4619      	mov	r1, r3
 8005d72:	f7fe ff53 	bl	8004c1c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	e005      	b.n	8005d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005d7a:	4905      	ldr	r1, [pc, #20]	; (8005d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f849 	bl	8005e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8005d86:	4618      	mov	r0, r3
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	08006840 	.word	0x08006840

08005d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe ff8b 	bl	8004cbe <_ZN13STM32Hardware4timeEv>
 8005da8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4915      	ldr	r1, [pc, #84]	; (8005e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005db2:	fba1 1303 	umull	r1, r3, r1, r3
 8005db6:	099b      	lsrs	r3, r3, #6
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	1e5a      	subs	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6859      	ldr	r1, [r3, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005dca:	fba3 0302 	umull	r0, r3, r3, r2
 8005dce:	099b      	lsrs	r3, r3, #6
 8005dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005dd4:	fb00 f303 	mul.w	r3, r0, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	4a0c      	ldr	r2, [pc, #48]	; (8005e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8005ddc:	fb02 f303 	mul.w	r3, r2, r3
 8005de0:	1aca      	subs	r2, r1, r3
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8005de4:	4413      	add	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
    normalizeSecNSec(sec_offset, nsec_offset);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f603 421c 	addw	r2, r3, #3100	; 0xc1c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f7fd fd3a 	bl	8003874 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	10624dd3 	.word	0x10624dd3
 8005e0c:	000f4240 	.word	0x000f4240
 8005e10:	3b9aca00 	.word	0x3b9aca00

08005e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	2103      	movs	r1, #3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f804 	bl	8005e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005e3e:	f107 0314 	add.w	r3, r7, #20
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fa60 	bl	8004308 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005e48:	7afb      	ldrb	r3, [r7, #11]
 8005e4a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f107 0214 	add.w	r2, r7, #20
 8005e5a:	2107      	movs	r1, #7
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	4798      	blx	r3
  }
 8005e60:	bf00      	nop
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <_Z41__static_initialization_and_destruction_0ii>:
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d116      	bne.n	8005ea6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d111      	bne.n	8005ea6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8005e82:	480b      	ldr	r0, [pc, #44]	; (8005eb0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005e84:	f7ff fa00 	bl	8005288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8005e88:	480a      	ldr	r0, [pc, #40]	; (8005eb4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005e8a:	f7fe ff27 	bl	8004cdc <_ZN8std_msgs6StringC1Ev>
ros::Publisher pub_chat("AuCAR/chatter", &str_msg);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005e92:	4909      	ldr	r1, [pc, #36]	; (8005eb8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005e94:	4809      	ldr	r0, [pc, #36]	; (8005ebc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005e96:	f7fe fda9 	bl	80049ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Vector3> angle_sub("gimbal/angles", &angle_cb);
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8005e9e:	4909      	ldr	r1, [pc, #36]	; (8005ec4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005ea0:	4809      	ldr	r0, [pc, #36]	; (8005ec8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005ea2:	f7ff fa91 	bl	80053c8 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvEC1EPKcPFvRKS2_Ei>
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	200000a4 	.word	0x200000a4
 8005eb4:	200011e4 	.word	0x200011e4
 8005eb8:	0800687c 	.word	0x0800687c
 8005ebc:	200011ec 	.word	0x200011ec
 8005ec0:	08005099 	.word	0x08005099
 8005ec4:	0800688c 	.word	0x0800688c
 8005ec8:	20001264 	.word	0x20001264

08005ecc <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fff0 	bl	8004ec2 <_ZN13geometry_msgs7Vector311deserializeEPh>
    this->cb_(msg);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	320c      	adds	r2, #12
 8005eea:	4610      	mov	r0, r2
 8005eec:	4798      	blx	r3
  }
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
  }
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff f804 	bl	8004f28 <_ZN13geometry_msgs7Vector37getTypeEv>
 8005f20:	4603      	mov	r3, r0
  }
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZN3ros10SubscriberIN13geometry_msgs7Vector3EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	330c      	adds	r3, #12
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff f804 	bl	8004f44 <_ZN13geometry_msgs7Vector36getMD5Ev>
 8005f3c:	4603      	mov	r3, r0
  }
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
    return configured_;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005f54:	3304      	adds	r3, #4
 8005f56:	781b      	ldrb	r3, [r3, #0]
  };
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <_GLOBAL__sub_I_nh>:
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f7ff ff7b 	bl	8005e68 <_Z41__static_initialization_and_destruction_0ii>
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f88:	6453      	str	r3, [r2, #68]	; 0x44
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40023800 	.word	0x40023800

08005fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d10d      	bne.n	8005ff2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_TIM_Base_MspInit+0x3c>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	4a08      	ldr	r2, [pc, #32]	; (8006000 <HAL_TIM_Base_MspInit+0x3c>)
 8005fe0:	f043 0301 	orr.w	r3, r3, #1
 8005fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_TIM_Base_MspInit+0x3c>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40023800 	.word	0x40023800

08006004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08c      	sub	sp, #48	; 0x30
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800600c:	f107 031c 	add.w	r3, r7, #28
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	609a      	str	r2, [r3, #8]
 8006018:	60da      	str	r2, [r3, #12]
 800601a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a65      	ldr	r2, [pc, #404]	; (80061b8 <HAL_UART_MspInit+0x1b4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d12d      	bne.n	8006082 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	4b64      	ldr	r3, [pc, #400]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 800602c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602e:	4a63      	ldr	r2, [pc, #396]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 8006030:	f043 0310 	orr.w	r3, r3, #16
 8006034:	6453      	str	r3, [r2, #68]	; 0x44
 8006036:	4b61      	ldr	r3, [pc, #388]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	4a5c      	ldr	r2, [pc, #368]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6313      	str	r3, [r2, #48]	; 0x30
 8006052:	4b5a      	ldr	r3, [pc, #360]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800605e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006064:	2302      	movs	r3, #2
 8006066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006068:	2301      	movs	r3, #1
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800606c:	2303      	movs	r3, #3
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006070:	2307      	movs	r3, #7
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006074:	f107 031c 	add.w	r3, r7, #28
 8006078:	4619      	mov	r1, r3
 800607a:	4851      	ldr	r0, [pc, #324]	; (80061c0 <HAL_UART_MspInit+0x1bc>)
 800607c:	f7fb fb86 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006080:	e096      	b.n	80061b0 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a4f      	ldr	r2, [pc, #316]	; (80061c4 <HAL_UART_MspInit+0x1c0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	f040 8091 	bne.w	80061b0 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	4b4a      	ldr	r3, [pc, #296]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	4a49      	ldr	r2, [pc, #292]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 8006098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609c:	6413      	str	r3, [r2, #64]	; 0x40
 800609e:	4b47      	ldr	r3, [pc, #284]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	4b43      	ldr	r3, [pc, #268]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	4a42      	ldr	r2, [pc, #264]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	6313      	str	r3, [r2, #48]	; 0x30
 80060ba:	4b40      	ldr	r3, [pc, #256]	; (80061bc <HAL_UART_MspInit+0x1b8>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060c6:	230c      	movs	r3, #12
 80060c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ca:	2302      	movs	r3, #2
 80060cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060ce:	2301      	movs	r3, #1
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d2:	2303      	movs	r3, #3
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060d6:	2307      	movs	r3, #7
 80060d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060da:	f107 031c 	add.w	r3, r7, #28
 80060de:	4619      	mov	r1, r3
 80060e0:	4837      	ldr	r0, [pc, #220]	; (80061c0 <HAL_UART_MspInit+0x1bc>)
 80060e2:	f7fb fb53 	bl	800178c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80060e6:	4b38      	ldr	r3, [pc, #224]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 80060e8:	4a38      	ldr	r2, [pc, #224]	; (80061cc <HAL_UART_MspInit+0x1c8>)
 80060ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80060ec:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 80060ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060f4:	4b34      	ldr	r3, [pc, #208]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060fa:	4b33      	ldr	r3, [pc, #204]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006100:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 8006102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006106:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006108:	4b2f      	ldr	r3, [pc, #188]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 800610a:	2200      	movs	r2, #0
 800610c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800610e:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 8006110:	2200      	movs	r2, #0
 8006112:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006114:	4b2c      	ldr	r3, [pc, #176]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 8006116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800611a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800611c:	4b2a      	ldr	r3, [pc, #168]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 800611e:	2200      	movs	r2, #0
 8006120:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006122:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 8006124:	2200      	movs	r2, #0
 8006126:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006128:	4827      	ldr	r0, [pc, #156]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 800612a:	f7fa ff97 	bl	800105c <HAL_DMA_Init>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8006134:	f7fd fd40 	bl	8003bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a23      	ldr	r2, [pc, #140]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 800613c:	635a      	str	r2, [r3, #52]	; 0x34
 800613e:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <HAL_UART_MspInit+0x1c4>)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006144:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 8006146:	4a23      	ldr	r2, [pc, #140]	; (80061d4 <HAL_UART_MspInit+0x1d0>)
 8006148:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800614a:	4b21      	ldr	r3, [pc, #132]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 800614c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006150:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006152:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 8006154:	2240      	movs	r2, #64	; 0x40
 8006156:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006158:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 800615a:	2200      	movs	r2, #0
 800615c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800615e:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 8006160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006164:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006166:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 8006168:	2200      	movs	r2, #0
 800616a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800616c:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 800616e:	2200      	movs	r2, #0
 8006170:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006172:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 8006174:	2200      	movs	r2, #0
 8006176:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 800617a:	2200      	movs	r2, #0
 800617c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800617e:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 8006180:	2200      	movs	r2, #0
 8006182:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006184:	4812      	ldr	r0, [pc, #72]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 8006186:	f7fa ff69 	bl	800105c <HAL_DMA_Init>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8006190:	f7fd fd12 	bl	8003bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 8006198:	631a      	str	r2, [r3, #48]	; 0x30
 800619a:	4a0d      	ldr	r2, [pc, #52]	; (80061d0 <HAL_UART_MspInit+0x1cc>)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061a0:	2200      	movs	r2, #0
 80061a2:	2100      	movs	r1, #0
 80061a4:	2026      	movs	r0, #38	; 0x26
 80061a6:	f7fa ff22 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061aa:	2026      	movs	r0, #38	; 0x26
 80061ac:	f7fa ff3b 	bl	8001026 <HAL_NVIC_EnableIRQ>
}
 80061b0:	bf00      	nop
 80061b2:	3730      	adds	r7, #48	; 0x30
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40011000 	.word	0x40011000
 80061bc:	40023800 	.word	0x40023800
 80061c0:	40020000 	.word	0x40020000
 80061c4:	40004400 	.word	0x40004400
 80061c8:	200012ac 	.word	0x200012ac
 80061cc:	40026088 	.word	0x40026088
 80061d0:	2000130c 	.word	0x2000130c
 80061d4:	400260a0 	.word	0x400260a0

080061d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061e6:	b480      	push	{r7}
 80061e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061ea:	e7fe      	b.n	80061ea <HardFault_Handler+0x4>

080061ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061f0:	e7fe      	b.n	80061f0 <MemManage_Handler+0x4>

080061f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061f6:	e7fe      	b.n	80061f6 <BusFault_Handler+0x4>

080061f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061fc:	e7fe      	b.n	80061fc <UsageFault_Handler+0x4>

080061fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061fe:	b480      	push	{r7}
 8006200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006202:	bf00      	nop
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006210:	bf00      	nop
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800621a:	b480      	push	{r7}
 800621c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800621e:	bf00      	nop
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800622c:	f7fa fde4 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006230:	bf00      	nop
 8006232:	bd80      	pop	{r7, pc}

08006234 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006238:	4802      	ldr	r0, [pc, #8]	; (8006244 <DMA1_Stream5_IRQHandler+0x10>)
 800623a:	f7fb f83f 	bl	80012bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800623e:	bf00      	nop
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	200012ac 	.word	0x200012ac

08006248 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800624c:	4802      	ldr	r0, [pc, #8]	; (8006258 <DMA1_Stream6_IRQHandler+0x10>)
 800624e:	f7fb f835 	bl	80012bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	2000130c 	.word	0x2000130c

0800625c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006260:	4802      	ldr	r0, [pc, #8]	; (800626c <USART2_IRQHandler+0x10>)
 8006262:	f7fc fd8b 	bl	8002d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	200013ec 	.word	0x200013ec

08006270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
	return 1;
 8006274:	2301      	movs	r3, #1
}
 8006276:	4618      	mov	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <_kill>:

int _kill(int pid, int sig)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800628a:	f000 f8b9 	bl	8006400 <__errno>
 800628e:	4602      	mov	r2, r0
 8006290:	2316      	movs	r3, #22
 8006292:	6013      	str	r3, [r2, #0]
	return -1;
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <_exit>:

void _exit (int status)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80062a8:	f04f 31ff 	mov.w	r1, #4294967295
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff ffe7 	bl	8006280 <_kill>
	while (1) {}		/* Make sure we hang here */
 80062b2:	e7fe      	b.n	80062b2 <_exit+0x12>

080062b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <_sbrk+0x50>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d102      	bne.n	80062ca <_sbrk+0x16>
		heap_end = &end;
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <_sbrk+0x50>)
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <_sbrk+0x54>)
 80062c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80062ca:	4b0e      	ldr	r3, [pc, #56]	; (8006304 <_sbrk+0x50>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80062d0:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <_sbrk+0x50>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	466a      	mov	r2, sp
 80062da:	4293      	cmp	r3, r2
 80062dc:	d907      	bls.n	80062ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80062de:	f000 f88f 	bl	8006400 <__errno>
 80062e2:	4602      	mov	r2, r0
 80062e4:	230c      	movs	r3, #12
 80062e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80062e8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ec:	e006      	b.n	80062fc <_sbrk+0x48>
	}

	heap_end += incr;
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <_sbrk+0x50>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	4a03      	ldr	r2, [pc, #12]	; (8006304 <_sbrk+0x50>)
 80062f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80062fa:	68fb      	ldr	r3, [r7, #12]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2000129c 	.word	0x2000129c
 8006308:	20001430 	.word	0x20001430

0800630c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006310:	4b16      	ldr	r3, [pc, #88]	; (800636c <SystemInit+0x60>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	4a15      	ldr	r2, [pc, #84]	; (800636c <SystemInit+0x60>)
 8006318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800631c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006320:	4b13      	ldr	r3, [pc, #76]	; (8006370 <SystemInit+0x64>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a12      	ldr	r2, [pc, #72]	; (8006370 <SystemInit+0x64>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800632c:	4b10      	ldr	r3, [pc, #64]	; (8006370 <SystemInit+0x64>)
 800632e:	2200      	movs	r2, #0
 8006330:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006332:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <SystemInit+0x64>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a0e      	ldr	r2, [pc, #56]	; (8006370 <SystemInit+0x64>)
 8006338:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800633c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006340:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <SystemInit+0x64>)
 8006344:	4a0b      	ldr	r2, [pc, #44]	; (8006374 <SystemInit+0x68>)
 8006346:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <SystemInit+0x64>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a08      	ldr	r2, [pc, #32]	; (8006370 <SystemInit+0x64>)
 800634e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006352:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <SystemInit+0x64>)
 8006356:	2200      	movs	r2, #0
 8006358:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800635a:	4b04      	ldr	r3, [pc, #16]	; (800636c <SystemInit+0x60>)
 800635c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006360:	609a      	str	r2, [r3, #8]
#endif
}
 8006362:	bf00      	nop
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	e000ed00 	.word	0xe000ed00
 8006370:	40023800 	.word	0x40023800
 8006374:	24003010 	.word	0x24003010

08006378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800637c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800637e:	e003      	b.n	8006388 <LoopCopyDataInit>

08006380 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006380:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006382:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006384:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006386:	3104      	adds	r1, #4

08006388 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006388:	480b      	ldr	r0, [pc, #44]	; (80063b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800638a:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800638c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800638e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006390:	d3f6      	bcc.n	8006380 <CopyDataInit>
  ldr  r2, =_sbss
 8006392:	4a0b      	ldr	r2, [pc, #44]	; (80063c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006394:	e002      	b.n	800639c <LoopFillZerobss>

08006396 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006396:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006398:	f842 3b04 	str.w	r3, [r2], #4

0800639c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800639e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80063a0:	d3f9      	bcc.n	8006396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80063a2:	f7ff ffb3 	bl	800630c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063a6:	f000 f831 	bl	800640c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063aa:	f7fd fa8f 	bl	80038cc <main>
  bx  lr    
 80063ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80063b4:	080069ec 	.word	0x080069ec
  ldr  r0, =_sdata
 80063b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80063bc:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80063c0:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80063c4:	20001430 	.word	0x20001430

080063c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063c8:	e7fe      	b.n	80063c8 <ADC_IRQHandler>

080063ca <__cxa_pure_virtual>:
 80063ca:	b508      	push	{r3, lr}
 80063cc:	f000 f80c 	bl	80063e8 <_ZSt9terminatev>

080063d0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80063d0:	b508      	push	{r3, lr}
 80063d2:	4780      	blx	r0
 80063d4:	f000 f80d 	bl	80063f2 <abort>

080063d8 <_ZSt13get_terminatev>:
 80063d8:	4b02      	ldr	r3, [pc, #8]	; (80063e4 <_ZSt13get_terminatev+0xc>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	f3bf 8f5b 	dmb	ish
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000001c 	.word	0x2000001c

080063e8 <_ZSt9terminatev>:
 80063e8:	b508      	push	{r3, lr}
 80063ea:	f7ff fff5 	bl	80063d8 <_ZSt13get_terminatev>
 80063ee:	f7ff ffef 	bl	80063d0 <_ZN10__cxxabiv111__terminateEPFvvE>

080063f2 <abort>:
 80063f2:	b508      	push	{r3, lr}
 80063f4:	2006      	movs	r0, #6
 80063f6:	f000 f871 	bl	80064dc <raise>
 80063fa:	2001      	movs	r0, #1
 80063fc:	f7ff ff50 	bl	80062a0 <_exit>

08006400 <__errno>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <__errno+0x8>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000020 	.word	0x20000020

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4e0d      	ldr	r6, [pc, #52]	; (8006444 <__libc_init_array+0x38>)
 8006410:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006412:	1ba4      	subs	r4, r4, r6
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	2500      	movs	r5, #0
 8006418:	42a5      	cmp	r5, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	4e0b      	ldr	r6, [pc, #44]	; (800644c <__libc_init_array+0x40>)
 800641e:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <__libc_init_array+0x44>)
 8006420:	f000 f960 	bl	80066e4 <_init>
 8006424:	1ba4      	subs	r4, r4, r6
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	2500      	movs	r5, #0
 800642a:	42a5      	cmp	r5, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006434:	4798      	blx	r3
 8006436:	3501      	adds	r5, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800643e:	4798      	blx	r3
 8006440:	3501      	adds	r5, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	080069e0 	.word	0x080069e0
 8006448:	080069e0 	.word	0x080069e0
 800644c:	080069e0 	.word	0x080069e0
 8006450:	080069e8 	.word	0x080069e8

08006454 <memcpy>:
 8006454:	b510      	push	{r4, lr}
 8006456:	1e43      	subs	r3, r0, #1
 8006458:	440a      	add	r2, r1
 800645a:	4291      	cmp	r1, r2
 800645c:	d100      	bne.n	8006460 <memcpy+0xc>
 800645e:	bd10      	pop	{r4, pc}
 8006460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006468:	e7f7      	b.n	800645a <memcpy+0x6>

0800646a <memset>:
 800646a:	4402      	add	r2, r0
 800646c:	4603      	mov	r3, r0
 800646e:	4293      	cmp	r3, r2
 8006470:	d100      	bne.n	8006474 <memset+0xa>
 8006472:	4770      	bx	lr
 8006474:	f803 1b01 	strb.w	r1, [r3], #1
 8006478:	e7f9      	b.n	800646e <memset+0x4>
	...

0800647c <realloc>:
 800647c:	4b02      	ldr	r3, [pc, #8]	; (8006488 <realloc+0xc>)
 800647e:	460a      	mov	r2, r1
 8006480:	4601      	mov	r1, r0
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	f000 b8a0 	b.w	80065c8 <_realloc_r>
 8006488:	20000020 	.word	0x20000020

0800648c <_raise_r>:
 800648c:	291f      	cmp	r1, #31
 800648e:	b538      	push	{r3, r4, r5, lr}
 8006490:	4604      	mov	r4, r0
 8006492:	460d      	mov	r5, r1
 8006494:	d904      	bls.n	80064a0 <_raise_r+0x14>
 8006496:	2316      	movs	r3, #22
 8006498:	6003      	str	r3, [r0, #0]
 800649a:	f04f 30ff 	mov.w	r0, #4294967295
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064a2:	b112      	cbz	r2, 80064aa <_raise_r+0x1e>
 80064a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064a8:	b94b      	cbnz	r3, 80064be <_raise_r+0x32>
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 f830 	bl	8006510 <_getpid_r>
 80064b0:	462a      	mov	r2, r5
 80064b2:	4601      	mov	r1, r0
 80064b4:	4620      	mov	r0, r4
 80064b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064ba:	f000 b817 	b.w	80064ec <_kill_r>
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d00a      	beq.n	80064d8 <_raise_r+0x4c>
 80064c2:	1c59      	adds	r1, r3, #1
 80064c4:	d103      	bne.n	80064ce <_raise_r+0x42>
 80064c6:	2316      	movs	r3, #22
 80064c8:	6003      	str	r3, [r0, #0]
 80064ca:	2001      	movs	r0, #1
 80064cc:	e7e7      	b.n	800649e <_raise_r+0x12>
 80064ce:	2400      	movs	r4, #0
 80064d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064d4:	4628      	mov	r0, r5
 80064d6:	4798      	blx	r3
 80064d8:	2000      	movs	r0, #0
 80064da:	e7e0      	b.n	800649e <_raise_r+0x12>

080064dc <raise>:
 80064dc:	4b02      	ldr	r3, [pc, #8]	; (80064e8 <raise+0xc>)
 80064de:	4601      	mov	r1, r0
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	f7ff bfd3 	b.w	800648c <_raise_r>
 80064e6:	bf00      	nop
 80064e8:	20000020 	.word	0x20000020

080064ec <_kill_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4c07      	ldr	r4, [pc, #28]	; (800650c <_kill_r+0x20>)
 80064f0:	2300      	movs	r3, #0
 80064f2:	4605      	mov	r5, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	f7ff fec1 	bl	8006280 <_kill>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	d102      	bne.n	8006508 <_kill_r+0x1c>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	b103      	cbz	r3, 8006508 <_kill_r+0x1c>
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	bd38      	pop	{r3, r4, r5, pc}
 800650a:	bf00      	nop
 800650c:	2000142c 	.word	0x2000142c

08006510 <_getpid_r>:
 8006510:	f7ff beae 	b.w	8006270 <_getpid>

08006514 <_malloc_r>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	1ccd      	adds	r5, r1, #3
 8006518:	f025 0503 	bic.w	r5, r5, #3
 800651c:	3508      	adds	r5, #8
 800651e:	2d0c      	cmp	r5, #12
 8006520:	bf38      	it	cc
 8006522:	250c      	movcc	r5, #12
 8006524:	2d00      	cmp	r5, #0
 8006526:	4606      	mov	r6, r0
 8006528:	db01      	blt.n	800652e <_malloc_r+0x1a>
 800652a:	42a9      	cmp	r1, r5
 800652c:	d903      	bls.n	8006536 <_malloc_r+0x22>
 800652e:	230c      	movs	r3, #12
 8006530:	6033      	str	r3, [r6, #0]
 8006532:	2000      	movs	r0, #0
 8006534:	bd70      	pop	{r4, r5, r6, pc}
 8006536:	f000 f87d 	bl	8006634 <__malloc_lock>
 800653a:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <_malloc_r+0xac>)
 800653c:	6814      	ldr	r4, [r2, #0]
 800653e:	4621      	mov	r1, r4
 8006540:	b991      	cbnz	r1, 8006568 <_malloc_r+0x54>
 8006542:	4c20      	ldr	r4, [pc, #128]	; (80065c4 <_malloc_r+0xb0>)
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	b91b      	cbnz	r3, 8006550 <_malloc_r+0x3c>
 8006548:	4630      	mov	r0, r6
 800654a:	f000 f863 	bl	8006614 <_sbrk_r>
 800654e:	6020      	str	r0, [r4, #0]
 8006550:	4629      	mov	r1, r5
 8006552:	4630      	mov	r0, r6
 8006554:	f000 f85e 	bl	8006614 <_sbrk_r>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d124      	bne.n	80065a6 <_malloc_r+0x92>
 800655c:	230c      	movs	r3, #12
 800655e:	6033      	str	r3, [r6, #0]
 8006560:	4630      	mov	r0, r6
 8006562:	f000 f868 	bl	8006636 <__malloc_unlock>
 8006566:	e7e4      	b.n	8006532 <_malloc_r+0x1e>
 8006568:	680b      	ldr	r3, [r1, #0]
 800656a:	1b5b      	subs	r3, r3, r5
 800656c:	d418      	bmi.n	80065a0 <_malloc_r+0x8c>
 800656e:	2b0b      	cmp	r3, #11
 8006570:	d90f      	bls.n	8006592 <_malloc_r+0x7e>
 8006572:	600b      	str	r3, [r1, #0]
 8006574:	50cd      	str	r5, [r1, r3]
 8006576:	18cc      	adds	r4, r1, r3
 8006578:	4630      	mov	r0, r6
 800657a:	f000 f85c 	bl	8006636 <__malloc_unlock>
 800657e:	f104 000b 	add.w	r0, r4, #11
 8006582:	1d23      	adds	r3, r4, #4
 8006584:	f020 0007 	bic.w	r0, r0, #7
 8006588:	1ac3      	subs	r3, r0, r3
 800658a:	d0d3      	beq.n	8006534 <_malloc_r+0x20>
 800658c:	425a      	negs	r2, r3
 800658e:	50e2      	str	r2, [r4, r3]
 8006590:	e7d0      	b.n	8006534 <_malloc_r+0x20>
 8006592:	428c      	cmp	r4, r1
 8006594:	684b      	ldr	r3, [r1, #4]
 8006596:	bf16      	itet	ne
 8006598:	6063      	strne	r3, [r4, #4]
 800659a:	6013      	streq	r3, [r2, #0]
 800659c:	460c      	movne	r4, r1
 800659e:	e7eb      	b.n	8006578 <_malloc_r+0x64>
 80065a0:	460c      	mov	r4, r1
 80065a2:	6849      	ldr	r1, [r1, #4]
 80065a4:	e7cc      	b.n	8006540 <_malloc_r+0x2c>
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d005      	beq.n	80065bc <_malloc_r+0xa8>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4630      	mov	r0, r6
 80065b4:	f000 f82e 	bl	8006614 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d0cf      	beq.n	800655c <_malloc_r+0x48>
 80065bc:	6025      	str	r5, [r4, #0]
 80065be:	e7db      	b.n	8006578 <_malloc_r+0x64>
 80065c0:	200012a0 	.word	0x200012a0
 80065c4:	200012a4 	.word	0x200012a4

080065c8 <_realloc_r>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	4607      	mov	r7, r0
 80065cc:	4614      	mov	r4, r2
 80065ce:	460e      	mov	r6, r1
 80065d0:	b921      	cbnz	r1, 80065dc <_realloc_r+0x14>
 80065d2:	4611      	mov	r1, r2
 80065d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065d8:	f7ff bf9c 	b.w	8006514 <_malloc_r>
 80065dc:	b922      	cbnz	r2, 80065e8 <_realloc_r+0x20>
 80065de:	f000 f82b 	bl	8006638 <_free_r>
 80065e2:	4625      	mov	r5, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e8:	f000 f874 	bl	80066d4 <_malloc_usable_size_r>
 80065ec:	42a0      	cmp	r0, r4
 80065ee:	d20f      	bcs.n	8006610 <_realloc_r+0x48>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4638      	mov	r0, r7
 80065f4:	f7ff ff8e 	bl	8006514 <_malloc_r>
 80065f8:	4605      	mov	r5, r0
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d0f2      	beq.n	80065e4 <_realloc_r+0x1c>
 80065fe:	4631      	mov	r1, r6
 8006600:	4622      	mov	r2, r4
 8006602:	f7ff ff27 	bl	8006454 <memcpy>
 8006606:	4631      	mov	r1, r6
 8006608:	4638      	mov	r0, r7
 800660a:	f000 f815 	bl	8006638 <_free_r>
 800660e:	e7e9      	b.n	80065e4 <_realloc_r+0x1c>
 8006610:	4635      	mov	r5, r6
 8006612:	e7e7      	b.n	80065e4 <_realloc_r+0x1c>

08006614 <_sbrk_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4c06      	ldr	r4, [pc, #24]	; (8006630 <_sbrk_r+0x1c>)
 8006618:	2300      	movs	r3, #0
 800661a:	4605      	mov	r5, r0
 800661c:	4608      	mov	r0, r1
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	f7ff fe48 	bl	80062b4 <_sbrk>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_sbrk_r+0x1a>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	b103      	cbz	r3, 800662e <_sbrk_r+0x1a>
 800662c:	602b      	str	r3, [r5, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	2000142c 	.word	0x2000142c

08006634 <__malloc_lock>:
 8006634:	4770      	bx	lr

08006636 <__malloc_unlock>:
 8006636:	4770      	bx	lr

08006638 <_free_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4605      	mov	r5, r0
 800663c:	2900      	cmp	r1, #0
 800663e:	d045      	beq.n	80066cc <_free_r+0x94>
 8006640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006644:	1f0c      	subs	r4, r1, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	bfb8      	it	lt
 800664a:	18e4      	addlt	r4, r4, r3
 800664c:	f7ff fff2 	bl	8006634 <__malloc_lock>
 8006650:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <_free_r+0x98>)
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	4610      	mov	r0, r2
 8006656:	b933      	cbnz	r3, 8006666 <_free_r+0x2e>
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	6014      	str	r4, [r2, #0]
 800665c:	4628      	mov	r0, r5
 800665e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006662:	f7ff bfe8 	b.w	8006636 <__malloc_unlock>
 8006666:	42a3      	cmp	r3, r4
 8006668:	d90c      	bls.n	8006684 <_free_r+0x4c>
 800666a:	6821      	ldr	r1, [r4, #0]
 800666c:	1862      	adds	r2, r4, r1
 800666e:	4293      	cmp	r3, r2
 8006670:	bf04      	itt	eq
 8006672:	681a      	ldreq	r2, [r3, #0]
 8006674:	685b      	ldreq	r3, [r3, #4]
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	bf04      	itt	eq
 800667a:	1852      	addeq	r2, r2, r1
 800667c:	6022      	streq	r2, [r4, #0]
 800667e:	6004      	str	r4, [r0, #0]
 8006680:	e7ec      	b.n	800665c <_free_r+0x24>
 8006682:	4613      	mov	r3, r2
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	b10a      	cbz	r2, 800668c <_free_r+0x54>
 8006688:	42a2      	cmp	r2, r4
 800668a:	d9fa      	bls.n	8006682 <_free_r+0x4a>
 800668c:	6819      	ldr	r1, [r3, #0]
 800668e:	1858      	adds	r0, r3, r1
 8006690:	42a0      	cmp	r0, r4
 8006692:	d10b      	bne.n	80066ac <_free_r+0x74>
 8006694:	6820      	ldr	r0, [r4, #0]
 8006696:	4401      	add	r1, r0
 8006698:	1858      	adds	r0, r3, r1
 800669a:	4282      	cmp	r2, r0
 800669c:	6019      	str	r1, [r3, #0]
 800669e:	d1dd      	bne.n	800665c <_free_r+0x24>
 80066a0:	6810      	ldr	r0, [r2, #0]
 80066a2:	6852      	ldr	r2, [r2, #4]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	4401      	add	r1, r0
 80066a8:	6019      	str	r1, [r3, #0]
 80066aa:	e7d7      	b.n	800665c <_free_r+0x24>
 80066ac:	d902      	bls.n	80066b4 <_free_r+0x7c>
 80066ae:	230c      	movs	r3, #12
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	e7d3      	b.n	800665c <_free_r+0x24>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	1821      	adds	r1, r4, r0
 80066b8:	428a      	cmp	r2, r1
 80066ba:	bf04      	itt	eq
 80066bc:	6811      	ldreq	r1, [r2, #0]
 80066be:	6852      	ldreq	r2, [r2, #4]
 80066c0:	6062      	str	r2, [r4, #4]
 80066c2:	bf04      	itt	eq
 80066c4:	1809      	addeq	r1, r1, r0
 80066c6:	6021      	streq	r1, [r4, #0]
 80066c8:	605c      	str	r4, [r3, #4]
 80066ca:	e7c7      	b.n	800665c <_free_r+0x24>
 80066cc:	bd38      	pop	{r3, r4, r5, pc}
 80066ce:	bf00      	nop
 80066d0:	200012a0 	.word	0x200012a0

080066d4 <_malloc_usable_size_r>:
 80066d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d8:	1f18      	subs	r0, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfbc      	itt	lt
 80066de:	580b      	ldrlt	r3, [r1, r0]
 80066e0:	18c0      	addlt	r0, r0, r3
 80066e2:	4770      	bx	lr

080066e4 <_init>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr

080066f0 <_fini>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr
